
Eclipse_B-L475_IOT01A1_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd8  080104c8  080104c8  000204c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112a0  080112a0  000302b4  2**0
                  CONTENTS
  4 .ARM          00000008  080112a0  080112a0  000212a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112a8  080112a8  000302b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112a8  080112a8  000212a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080112ac  080112ac  000212ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  080112b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003260  200002b4  08011564  000302b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003514  08011564  00033514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003952b  00000000  00000000  000302e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000683f  00000000  00000000  0006980f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002428  00000000  00000000  00070050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002170  00000000  00000000  00072478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bcb1  00000000  00000000  000745e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fb42  00000000  00000000  00080299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123360  00000000  00000000  000afddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d313b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7b4  00000000  00000000  001d3190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b4 	.word	0x200002b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080104ac 	.word	0x080104ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	080104ac 	.word	0x080104ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <test_byte_order>:

/*************************   B Y T E   O R D E R   ****************************/


static int test_byte_order(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
    if (*(uint32_t*)endianness != 0x31323334UL)
        return CWP_RC_WRONG_BYTE_ORDER;
#else

#ifdef COMPILE_FOR_LITTLE_ENDIAN
    const char *endianness = "1234";
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <test_byte_order+0x28>)
 8000ea8:	607b      	str	r3, [r7, #4]
    if (*(uint32_t*)endianness != 0x34333231UL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <test_byte_order+0x2c>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d002      	beq.n	8000eba <test_byte_order+0x1a>
        return CWP_RC_WRONG_BYTE_ORDER;
 8000eb4:	f06f 0304 	mvn.w	r3, #4
 8000eb8:	e000      	b.n	8000ebc <test_byte_order+0x1c>
#endif
#endif
    return CWP_RC_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	080104c8 	.word	0x080104c8
 8000ecc:	34333231 	.word	0x34333231

08000ed0 <cw_pack_context_init>:
/*******************************   P A C K   **********************************/



int cw_pack_context_init (cw_pack_context* pack_context, void* data, unsigned long length, pack_overflow_handler hpo)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
    pack_context->start = pack_context->current = (uint8_t*)data;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	605a      	str	r2, [r3, #4]
    pack_context->end = pack_context->start + length;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	441a      	add	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	609a      	str	r2, [r3, #8]
    pack_context->be_compatible = false;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	731a      	strb	r2, [r3, #12]
    pack_context->err_no = 0;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
    pack_context->handle_pack_overflow = hpo;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	619a      	str	r2, [r3, #24]
    pack_context->handle_flush = NULL;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
    pack_context->return_code = test_byte_order();
 8000f10:	f7ff ffc6 	bl	8000ea0 <test_byte_order>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	611a      	str	r2, [r3, #16]
    return pack_context->return_code;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	691b      	ldr	r3, [r3, #16]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <cw_pack_unsigned>:

/*  Packing routines  --------------------------------------------------------------------------------  */


void cw_pack_unsigned(cw_pack_context* pack_context, uint64_t i)
{
 8000f26:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f2a:	b0a2      	sub	sp, #136	; 0x88
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000f30:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if (pack_context->return_code)
 8000f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f040 81cd 	bne.w	80012d8 <cw_pack_unsigned+0x3b2>
        return;

    if (i < 128)
 8000f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf08      	it	eq
 8000f46:	2a80      	cmpeq	r2, #128	; 0x80
 8000f48:	d224      	bcs.n	8000f94 <cw_pack_unsigned+0x6e>
        tryMove0(i);
 8000f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d115      	bne.n	8000f82 <cw_pack_unsigned+0x5c>
 8000f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <cw_pack_unsigned+0x42>
 8000f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f60:	f06f 0201 	mvn.w	r2, #1
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	e1b8      	b.n	80012da <cw_pack_unsigned+0x3b4>
 8000f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f70:	4798      	blx	r3
 8000f72:	6578      	str	r0, [r7, #84]	; 0x54
 8000f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <cw_pack_unsigned+0x5c>
 8000f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	e1ab      	b.n	80012da <cw_pack_unsigned+0x3b4>
 8000f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1c59      	adds	r1, r3, #1
 8000f88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f8a:	6011      	str	r1, [r2, #0]
 8000f8c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e1a2      	b.n	80012da <cw_pack_unsigned+0x3b4>

    if (i < 256)
 8000f94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf08      	it	eq
 8000f9c:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
 8000fa0:	d23e      	bcs.n	8001020 <cw_pack_unsigned+0xfa>
        tryMove1(0xcc, i);
 8000fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fae:	3302      	adds	r3, #2
 8000fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d91e      	bls.n	8000ffe <cw_pack_unsigned+0xd8>
 8000fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d104      	bne.n	8000fd2 <cw_pack_unsigned+0xac>
 8000fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fca:	f06f 0201 	mvn.w	r2, #1
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	e183      	b.n	80012da <cw_pack_unsigned+0x3b4>
 8000fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fda:	4798      	blx	r3
 8000fdc:	65b8      	str	r0, [r7, #88]	; 0x58
 8000fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <cw_pack_unsigned+0xc6>
 8000fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	e176      	b.n	80012da <cw_pack_unsigned+0x3b4>
 8000fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001000:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001010:	22cc      	movs	r2, #204	; 0xcc
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e15c      	b.n	80012da <cw_pack_unsigned+0x3b4>

    if (i < 0x10000L)
 8001020:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	428b      	cmp	r3, r1
 800102e:	bf08      	it	eq
 8001030:	4282      	cmpeq	r2, r0
 8001032:	d344      	bcc.n	80010be <cw_pack_unsigned+0x198>
    {
        tryMove2(0xcd, i);
 8001034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	67fb      	str	r3, [r7, #124]	; 0x7c
 800103a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800103c:	3303      	adds	r3, #3
 800103e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001046:	429a      	cmp	r2, r3
 8001048:	d91b      	bls.n	8001082 <cw_pack_unsigned+0x15c>
 800104a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <cw_pack_unsigned+0x136>
 8001052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001054:	f06f 0201 	mvn.w	r2, #1
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	e13e      	b.n	80012da <cw_pack_unsigned+0x3b4>
 800105c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	2103      	movs	r1, #3
 8001062:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001064:	4798      	blx	r3
 8001066:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <cw_pack_unsigned+0x150>
 800106e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001070:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	e131      	b.n	80012da <cw_pack_unsigned+0x3b4>
 8001076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800107c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800107e:	3303      	adds	r3, #3
 8001080:	67bb      	str	r3, [r7, #120]	; 0x78
 8001082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800108e:	22cd      	movs	r2, #205	; 0xcd
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	0a02      	lsrs	r2, r0, #8
 80010a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010a4:	0a0b      	lsrs	r3, r1, #8
 80010a6:	b293      	uxth	r3, r2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	e10d      	b.n	80012da <cw_pack_unsigned+0x3b4>
    }
    if (i < 0x100000000LL)
 80010be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	bf08      	it	eq
 80010c6:	2a00      	cmpeq	r2, #0
 80010c8:	d240      	bcs.n	800114c <cw_pack_unsigned+0x226>
        tryMove4(0xce, i);
 80010ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	677b      	str	r3, [r7, #116]	; 0x74
 80010d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010d2:	3305      	adds	r3, #5
 80010d4:	673b      	str	r3, [r7, #112]	; 0x70
 80010d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80010dc:	429a      	cmp	r2, r3
 80010de:	d91b      	bls.n	8001118 <cw_pack_unsigned+0x1f2>
 80010e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d104      	bne.n	80010f2 <cw_pack_unsigned+0x1cc>
 80010e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ea:	f06f 0201 	mvn.w	r2, #1
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	e0f3      	b.n	80012da <cw_pack_unsigned+0x3b4>
 80010f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	2105      	movs	r1, #5
 80010f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010fa:	4798      	blx	r3
 80010fc:	6638      	str	r0, [r7, #96]	; 0x60
 80010fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <cw_pack_unsigned+0x1e6>
 8001104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001106:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	e0e6      	b.n	80012da <cw_pack_unsigned+0x3b4>
 800110c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	677b      	str	r3, [r7, #116]	; 0x74
 8001112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001114:	3305      	adds	r3, #5
 8001116:	673b      	str	r3, [r7, #112]	; 0x70
 8001118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	677a      	str	r2, [r7, #116]	; 0x74
 8001124:	22ce      	movs	r2, #206	; 0xce
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800112a:	0e1a      	lsrs	r2, r3, #24
 800112c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001134:	431a      	orrs	r2, r3
 8001136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800113e:	431a      	orrs	r2, r3
 8001140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001142:	061b      	lsls	r3, r3, #24
 8001144:	431a      	orrs	r2, r3
 8001146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e0c6      	b.n	80012da <cw_pack_unsigned+0x3b4>

    tryMove8(0xcf,i);
 800114c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001154:	3309      	adds	r3, #9
 8001156:	66bb      	str	r3, [r7, #104]	; 0x68
 8001158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800115e:	4293      	cmp	r3, r2
 8001160:	d91b      	bls.n	800119a <cw_pack_unsigned+0x274>
 8001162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d104      	bne.n	8001174 <cw_pack_unsigned+0x24e>
 800116a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800116c:	f06f 0201 	mvn.w	r2, #1
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	e0b2      	b.n	80012da <cw_pack_unsigned+0x3b4>
 8001174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2109      	movs	r1, #9
 800117a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800117c:	4798      	blx	r3
 800117e:	6678      	str	r0, [r7, #100]	; 0x64
 8001180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <cw_pack_unsigned+0x268>
 8001186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001188:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	e0a5      	b.n	80012da <cw_pack_unsigned+0x3b4>
 800118e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001196:	3309      	adds	r3, #9
 8001198:	66bb      	str	r3, [r7, #104]	; 0x68
 800119a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800119c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80011a2:	1c53      	adds	r3, r2, #1
 80011a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80011a6:	23cf      	movs	r3, #207	; 0xcf
 80011a8:	7013      	strb	r3, [r2, #0]
 80011aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ac:	0a1a      	lsrs	r2, r3, #8
 80011ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b0:	061b      	lsls	r3, r3, #24
 80011b2:	ea42 0503 	orr.w	r5, r2, r3
 80011b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b8:	0a1a      	lsrs	r2, r3, #8
 80011ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011bc:	061b      	lsls	r3, r3, #24
 80011be:	ea42 0403 	orr.w	r4, r2, r3
 80011c2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80011c6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80011ca:	ea04 0102 	and.w	r1, r4, r2
 80011ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80011d0:	402b      	ands	r3, r5
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d6:	021a      	lsls	r2, r3, #8
 80011d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011da:	0e1b      	lsrs	r3, r3, #24
 80011dc:	ea42 0a03 	orr.w	sl, r2, r3
 80011e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e2:	021a      	lsls	r2, r3, #8
 80011e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e6:	0e1b      	lsrs	r3, r3, #24
 80011e8:	ea42 0b03 	orr.w	fp, r2, r3
 80011ec:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80011f0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80011f4:	ea0a 0802 	and.w	r8, sl, r2
 80011f8:	ea0b 0903 	and.w	r9, fp, r3
 80011fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001200:	460b      	mov	r3, r1
 8001202:	ea43 0308 	orr.w	r3, r3, r8
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
 8001208:	4613      	mov	r3, r2
 800120a:	ea43 0309 	orr.w	r3, r3, r9
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
 8001210:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001214:	f04f 0000 	mov.w	r0, #0
 8001218:	f04f 0100 	mov.w	r1, #0
 800121c:	0a10      	lsrs	r0, r2, #8
 800121e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001222:	0a19      	lsrs	r1, r3, #8
 8001224:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	ea00 0402 	and.w	r4, r0, r2
 8001230:	62bc      	str	r4, [r7, #40]	; 0x28
 8001232:	400b      	ands	r3, r1
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800123a:	4623      	mov	r3, r4
 800123c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001240:	4602      	mov	r2, r0
 8001242:	4313      	orrs	r3, r2
 8001244:	623b      	str	r3, [r7, #32]
 8001246:	462b      	mov	r3, r5
 8001248:	460a      	mov	r2, r1
 800124a:	4313      	orrs	r3, r2
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	f04f 0100 	mov.w	r1, #0
 800125a:	0219      	lsls	r1, r3, #8
 800125c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8001260:	0210      	lsls	r0, r2, #8
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800126a:	ea00 0402 	and.w	r4, r0, r2
 800126e:	61bc      	str	r4, [r7, #24]
 8001270:	400b      	ands	r3, r1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001278:	4623      	mov	r3, r4
 800127a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800127e:	4602      	mov	r2, r0
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	462b      	mov	r3, r5
 8001286:	460a      	mov	r2, r1
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	0e0a      	lsrs	r2, r1, #24
 800129a:	2300      	movs	r3, #0
 800129c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80012a0:	4621      	mov	r1, r4
 80012a2:	4311      	orrs	r1, r2
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	4629      	mov	r1, r5
 80012a8:	4319      	orrs	r1, r3
 80012aa:	60f9      	str	r1, [r7, #12]
 80012ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	0603      	lsls	r3, r0, #24
 80012ba:	2200      	movs	r2, #0
 80012bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80012c0:	4621      	mov	r1, r4
 80012c2:	4311      	orrs	r1, r2
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	4629      	mov	r1, r5
 80012c8:	4319      	orrs	r1, r3
 80012ca:	6079      	str	r1, [r7, #4]
 80012cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012d2:	e9c3 1200 	strd	r1, r2, [r3]
 80012d6:	e000      	b.n	80012da <cw_pack_unsigned+0x3b4>
        return;
 80012d8:	bf00      	nop
}
 80012da:	3788      	adds	r7, #136	; 0x88
 80012dc:	46bd      	mov	sp, r7
 80012de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012e2 <cw_pack_float>:
    tryMove8(0xd3,i);
}


void cw_pack_float(cw_pack_context* pack_context, float f)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	ed87 0a00 	vstr	s0, [r7]
    if (pack_context->return_code)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d143      	bne.n	800137e <cw_pack_float+0x9c>
        return;

    uint32_t tmp = *((uint32_t*)&f);
 80012f6:	463b      	mov	r3, r7
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60fb      	str	r3, [r7, #12]
    tryMove4(0xca,tmp);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3305      	adds	r3, #5
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	429a      	cmp	r2, r3
 8001310:	d91b      	bls.n	800134a <cw_pack_float+0x68>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d104      	bne.n	8001324 <cw_pack_float+0x42>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f06f 0201 	mvn.w	r2, #1
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	e02d      	b.n	8001380 <cw_pack_float+0x9e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	2105      	movs	r1, #5
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	4798      	blx	r3
 800132e:	60b8      	str	r0, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <cw_pack_float+0x5c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	e020      	b.n	8001380 <cw_pack_float+0x9e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3305      	adds	r3, #5
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	617a      	str	r2, [r7, #20]
 8001356:	22ca      	movs	r2, #202	; 0xca
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	0e1a      	lsrs	r2, r3, #24
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001366:	431a      	orrs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001370:	431a      	orrs	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	431a      	orrs	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	e000      	b.n	8001380 <cw_pack_float+0x9e>
        return;
 800137e:	bf00      	nop
}
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <cw_pack_map_size>:
    tryMove4(0xdd, n);
}


void cw_pack_map_size(cw_pack_context* pack_context, uint32_t n)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b08a      	sub	sp, #40	; 0x28
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
    if (pack_context->return_code)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 80ad 	bne.w	80014f4 <cw_pack_map_size+0x16e>
        return;

    if (n < 16)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d827      	bhi.n	80013f0 <cw_pack_map_size+0x6a>
        tryMove0(0x80 | n);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d115      	bne.n	80013d8 <cw_pack_map_size+0x52>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <cw_pack_map_size+0x38>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f06f 0201 	mvn.w	r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	e09b      	b.n	80014f6 <cw_pack_map_size+0x170>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2101      	movs	r1, #1
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <cw_pack_map_size+0x52>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	e08e      	b.n	80014f6 <cw_pack_map_size+0x170>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1c58      	adds	r0, r3, #1
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	6008      	str	r0, [r1, #0]
 80013e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e082      	b.n	80014f6 <cw_pack_map_size+0x170>

    if (n < 65536)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f6:	d23c      	bcs.n	8001472 <cw_pack_map_size+0xec>
        tryMove2(0xde, n);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	3303      	adds	r3, #3
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	6a3a      	ldr	r2, [r7, #32]
 800140a:	429a      	cmp	r2, r3
 800140c:	d91b      	bls.n	8001446 <cw_pack_map_size+0xc0>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <cw_pack_map_size+0x9a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f06f 0201 	mvn.w	r2, #1
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	e06a      	b.n	80014f6 <cw_pack_map_size+0x170>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	2103      	movs	r1, #3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
 800142a:	6138      	str	r0, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <cw_pack_map_size+0xb4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	e05d      	b.n	80014f6 <cw_pack_map_size+0x170>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	3303      	adds	r3, #3
 8001444:	623b      	str	r3, [r7, #32]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a3a      	ldr	r2, [r7, #32]
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	627a      	str	r2, [r7, #36]	; 0x24
 8001452:	22de      	movs	r2, #222	; 0xde
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	b29a      	uxth	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b29b      	uxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b29a      	uxth	r2, r3
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	e041      	b.n	80014f6 <cw_pack_map_size+0x170>

    tryMove4(0xdf, n);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	3305      	adds	r3, #5
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	429a      	cmp	r2, r3
 8001486:	d91b      	bls.n	80014c0 <cw_pack_map_size+0x13a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d104      	bne.n	800149a <cw_pack_map_size+0x114>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f06f 0201 	mvn.w	r2, #1
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	e02d      	b.n	80014f6 <cw_pack_map_size+0x170>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2105      	movs	r1, #5
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4798      	blx	r3
 80014a4:	6178      	str	r0, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <cw_pack_map_size+0x12e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	e020      	b.n	80014f6 <cw_pack_map_size+0x170>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3305      	adds	r3, #5
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	61fa      	str	r2, [r7, #28]
 80014cc:	22df      	movs	r2, #223	; 0xdf
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	0e1a      	lsrs	r2, r3, #24
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80014dc:	431a      	orrs	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014e6:	431a      	orrs	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	061b      	lsls	r3, r3, #24
 80014ec:	431a      	orrs	r2, r3
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e000      	b.n	80014f6 <cw_pack_map_size+0x170>
        return;
 80014f4:	bf00      	nop
}
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <cw_pack_str>:


void cw_pack_str(cw_pack_context* pack_context, const char* v, uint32_t l)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
    if (pack_context->return_code)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f040 8128 	bne.w	8001762 <cw_pack_str+0x266>
        return;

    uint8_t *p;

    if (l < 32)             // Fixstr
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b1f      	cmp	r3, #31
 8001516:	d83d      	bhi.n	8001594 <cw_pack_str+0x98>
    {
        cw_pack_reserve_space(l+1);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001524:	4413      	add	r3, r2
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800152e:	429a      	cmp	r2, r3
 8001530:	d91f      	bls.n	8001572 <cw_pack_str+0x76>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d104      	bne.n	8001544 <cw_pack_str+0x48>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f06f 0201 	mvn.w	r2, #1
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	e10f      	b.n	8001764 <cw_pack_str+0x268>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	3201      	adds	r2, #1
 800154c:	4611      	mov	r1, r2
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	4798      	blx	r3
 8001552:	6178      	str	r0, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <cw_pack_str+0x66>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	e100      	b.n	8001764 <cw_pack_str+0x268>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	637b      	str	r3, [r7, #52]	; 0x34
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3301      	adds	r3, #1
 800156c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800156e:	4413      	add	r3, r2
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001576:	601a      	str	r2, [r3, #0]
        *p = (uint8_t)(0xa0 + l);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3b60      	subs	r3, #96	; 0x60
 800157e:	b2da      	uxtb	r2, r3
 8001580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001582:	701a      	strb	r2, [r3, #0]
        memcpy(p+1,v,l);
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	3301      	adds	r3, #1
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	4618      	mov	r0, r3
 800158e:	f00c f868 	bl	800d662 <memcpy>
        return;
 8001592:	e0e7      	b.n	8001764 <cw_pack_str+0x268>
    }
    if (l < 256 && !pack_context->be_compatible)       // Str 8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2bff      	cmp	r3, #255	; 0xff
 8001598:	d847      	bhi.n	800162a <cw_pack_str+0x12e>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	7b1b      	ldrb	r3, [r3, #12]
 800159e:	f083 0301 	eor.w	r3, r3, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d040      	beq.n	800162a <cw_pack_str+0x12e>
    {
        cw_pack_reserve_space(l+2);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3302      	adds	r3, #2
 80015b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b4:	4413      	add	r3, r2
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015be:	429a      	cmp	r2, r3
 80015c0:	d91f      	bls.n	8001602 <cw_pack_str+0x106>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d104      	bne.n	80015d4 <cw_pack_str+0xd8>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f06f 0201 	mvn.w	r2, #1
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	e0c7      	b.n	8001764 <cw_pack_str+0x268>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	3202      	adds	r2, #2
 80015dc:	4611      	mov	r1, r2
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	4798      	blx	r3
 80015e2:	6238      	str	r0, [r7, #32]
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <cw_pack_str+0xf6>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	e0b8      	b.n	8001764 <cw_pack_str+0x268>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3302      	adds	r3, #2
 80015fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015fe:	4413      	add	r3, r2
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001606:	601a      	str	r2, [r3, #0]
        *p++ = (uint8_t)(0xd9);
 8001608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	637a      	str	r2, [r7, #52]	; 0x34
 800160e:	22d9      	movs	r2, #217	; 0xd9
 8001610:	701a      	strb	r2, [r3, #0]
        *p = (uint8_t)(l);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	701a      	strb	r2, [r3, #0]
        memcpy(p+1,v,l);
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	3301      	adds	r3, #1
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	4618      	mov	r0, r3
 8001624:	f00c f81d 	bl	800d662 <memcpy>
        return;
 8001628:	e09c      	b.n	8001764 <cw_pack_str+0x268>
    }
    if (l < 65536)     // Str 16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d249      	bcs.n	80016c6 <cw_pack_str+0x1ca>
    {
        cw_pack_reserve_space(l+3)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3303      	adds	r3, #3
 800163c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800163e:	4413      	add	r3, r2
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001648:	429a      	cmp	r2, r3
 800164a:	d91f      	bls.n	800168c <cw_pack_str+0x190>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d104      	bne.n	800165e <cw_pack_str+0x162>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f06f 0201 	mvn.w	r2, #1
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	e082      	b.n	8001764 <cw_pack_str+0x268>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	3203      	adds	r2, #3
 8001666:	4611      	mov	r1, r2
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	4798      	blx	r3
 800166c:	61b8      	str	r0, [r7, #24]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <cw_pack_str+0x180>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	611a      	str	r2, [r3, #16]
 800167a:	e073      	b.n	8001764 <cw_pack_str+0x268>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3303      	adds	r3, #3
 8001686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001688:	4413      	add	r3, r2
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001690:	601a      	str	r2, [r3, #0]
        *p++ = (uint8_t)0xda;
 8001692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	637a      	str	r2, [r7, #52]	; 0x34
 8001698:	22da      	movs	r2, #218	; 0xda
 800169a:	701a      	strb	r2, [r3, #0]
        cw_store16(l);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	801a      	strh	r2, [r3, #0]
        memcpy(p+2,v,l);
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	3302      	adds	r3, #2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b ffcf 	bl	800d662 <memcpy>
        return;
 80016c4:	e04e      	b.n	8001764 <cw_pack_str+0x268>
    }
    // Str 32
    cw_pack_reserve_space(l+5)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	637b      	str	r3, [r7, #52]	; 0x34
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3305      	adds	r3, #5
 80016d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016d2:	4413      	add	r3, r2
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016dc:	429a      	cmp	r2, r3
 80016de:	d91f      	bls.n	8001720 <cw_pack_str+0x224>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d104      	bne.n	80016f2 <cw_pack_str+0x1f6>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f06f 0201 	mvn.w	r2, #1
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	e038      	b.n	8001764 <cw_pack_str+0x268>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	3205      	adds	r2, #5
 80016fa:	4611      	mov	r1, r2
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	4798      	blx	r3
 8001700:	61f8      	str	r0, [r7, #28]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <cw_pack_str+0x214>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	611a      	str	r2, [r3, #16]
 800170e:	e029      	b.n	8001764 <cw_pack_str+0x268>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3305      	adds	r3, #5
 800171a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800171c:	4413      	add	r3, r2
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001724:	601a      	str	r2, [r3, #0]
    *p++ = (uint8_t)0xdb;
 8001726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	637a      	str	r2, [r7, #52]	; 0x34
 800172c:	22db      	movs	r2, #219	; 0xdb
 800172e:	701a      	strb	r2, [r3, #0]
    cw_store32(l);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0e1a      	lsrs	r2, r3, #24
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	061b      	lsls	r3, r3, #24
 800174c:	431a      	orrs	r2, r3
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	601a      	str	r2, [r3, #0]
    memcpy(p+4,v,l);
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	3304      	adds	r3, #4
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f00b ff81 	bl	800d662 <memcpy>
    return;
 8001760:	e000      	b.n	8001764 <cw_pack_str+0x268>
        return;
 8001762:	bf00      	nop
}
 8001764:	3738      	adds	r7, #56	; 0x38
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b2f      	cmp	r3, #47	; 0x2f
 8001778:	d906      	bls.n	8001788 <Hex2Num+0x1e>
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b39      	cmp	r3, #57	; 0x39
 800177e:	d803      	bhi.n	8001788 <Hex2Num+0x1e>
        return a - '0';
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	3b30      	subs	r3, #48	; 0x30
 8001784:	b2db      	uxtb	r3, r3
 8001786:	e014      	b.n	80017b2 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b60      	cmp	r3, #96	; 0x60
 800178c:	d906      	bls.n	800179c <Hex2Num+0x32>
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b66      	cmp	r3, #102	; 0x66
 8001792:	d803      	bhi.n	800179c <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3b57      	subs	r3, #87	; 0x57
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e00a      	b.n	80017b2 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2b40      	cmp	r3, #64	; 0x40
 80017a0:	d906      	bls.n	80017b0 <Hex2Num+0x46>
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b46      	cmp	r3, #70	; 0x46
 80017a6:	d803      	bhi.n	80017b0 <Hex2Num+0x46>
        return (a - 'A') + 10;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	3b37      	subs	r3, #55	; 0x37
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e000      	b.n	80017b2 <Hex2Num+0x48>
    }

    return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80017d0:	e012      	b.n	80017f8 <ParseHexNumber+0x3a>
        sum <<= 4;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ffc4 	bl	800176a <Hex2Num>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
        ptr++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3301      	adds	r3, #1
 80017f0:	607b      	str	r3, [r7, #4]
        i++;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	3301      	adds	r3, #1
 80017f6:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b2f      	cmp	r3, #47	; 0x2f
 80017fe:	d903      	bls.n	8001808 <ParseHexNumber+0x4a>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b39      	cmp	r3, #57	; 0x39
 8001806:	d9e4      	bls.n	80017d2 <ParseHexNumber+0x14>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b60      	cmp	r3, #96	; 0x60
 800180e:	d903      	bls.n	8001818 <ParseHexNumber+0x5a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b66      	cmp	r3, #102	; 0x66
 8001816:	d9dc      	bls.n	80017d2 <ParseHexNumber+0x14>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b40      	cmp	r3, #64	; 0x40
 800181e:	d903      	bls.n	8001828 <ParseHexNumber+0x6a>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b46      	cmp	r3, #70	; 0x46
 8001826:	d9d4      	bls.n	80017d2 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <ParseHexNumber+0x76>
        *cnt = i;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	7afa      	ldrb	r2, [r7, #11]
 8001832:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	2300      	movs	r3, #0
 800184e:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b2d      	cmp	r3, #45	; 0x2d
 800185a:	d119      	bne.n	8001890 <ParseNumber+0x52>
        minus = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
        i++;
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	3301      	adds	r3, #1
 800186a:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800186c:	e010      	b.n	8001890 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	3b30      	subs	r3, #48	; 0x30
 8001880:	4413      	add	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3301      	adds	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
        i++;
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	3301      	adds	r3, #1
 800188e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b2f      	cmp	r3, #47	; 0x2f
 8001896:	d903      	bls.n	80018a0 <ParseNumber+0x62>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b39      	cmp	r3, #57	; 0x39
 800189e:	d9e6      	bls.n	800186e <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <ParseNumber+0x6e>
        *cnt = i;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	7bba      	ldrb	r2, [r7, #14]
 80018aa:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <ParseNumber+0x7a>
        return 0 - sum;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	425b      	negs	r3, r3
 80018b6:	e000      	b.n	80018ba <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80018b8:	68bb      	ldr	r3, [r7, #8]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80018d4:	e019      	b.n	800190a <ParseMAC+0x44>
    hexcnt = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b3a      	cmp	r3, #58	; 0x3a
 80018e0:	d00e      	beq.n	8001900 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80018e2:	f107 030e 	add.w	r3, r7, #14
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff68 	bl	80017be <ParseHexNumber>
 80018ee:	4601      	mov	r1, r0
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	73fa      	strb	r2, [r7, #15]
 80018f6:	461a      	mov	r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001900:	7bbb      	ldrb	r3, [r7, #14]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1e1      	bne.n	80018d6 <ParseMAC+0x10>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 800192a:	e019      	b.n	8001960 <ParseIP+0x44>
    hexcnt = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b2e      	cmp	r3, #46	; 0x2e
 8001936:	d00e      	beq.n	8001956 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8001938:	f107 030e 	add.w	r3, r7, #14
 800193c:	4619      	mov	r1, r3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ff7d 	bl	800183e <ParseNumber>
 8001944:	4601      	mov	r1, r0
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	73fa      	strb	r2, [r7, #15]
 800194c:	461a      	mov	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001956:	7bbb      	ldrb	r3, [r7, #14]
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e1      	bne.n	800192c <ParseIP+0x10>
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3302      	adds	r3, #2
 8001986:	4934      	ldr	r1, [pc, #208]	; (8001a58 <AT_ParseInfo+0xe4>)
 8001988:	4618      	mov	r0, r3
 800198a:	f00c fcdb 	bl	800e344 <strtok>
 800198e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001990:	e05a      	b.n	8001a48 <AT_ParseInfo+0xd4>
    switch (num++) {
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	72fa      	strb	r2, [r7, #11]
 8001998:	2b06      	cmp	r3, #6
 800199a:	d84f      	bhi.n	8001a3c <AT_ParseInfo+0xc8>
 800199c:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <AT_ParseInfo+0x30>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019c1 	.word	0x080019c1
 80019a8:	080019cf 	.word	0x080019cf
 80019ac:	080019df 	.word	0x080019df
 80019b0:	080019ef 	.word	0x080019ef
 80019b4:	080019ff 	.word	0x080019ff
 80019b8:	08001a0f 	.word	0x08001a0f
 80019bc:	08001a23 	.word	0x08001a23
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00c fc91 	bl	800e2ee <strncpy>
      break;
 80019cc:	e037      	b.n	8001a3e <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3320      	adds	r3, #32
 80019d2:	2218      	movs	r2, #24
 80019d4:	68f9      	ldr	r1, [r7, #12]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00c fc89 	bl	800e2ee <strncpy>
      break;
 80019dc:	e02f      	b.n	8001a3e <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3338      	adds	r3, #56	; 0x38
 80019e2:	2210      	movs	r2, #16
 80019e4:	68f9      	ldr	r1, [r7, #12]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00c fc81 	bl	800e2ee <strncpy>
      break;
 80019ec:	e027      	b.n	8001a3e <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3348      	adds	r3, #72	; 0x48
 80019f2:	2210      	movs	r2, #16
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00c fc79 	bl	800e2ee <strncpy>
      break;
 80019fc:	e01f      	b.n	8001a3e <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3358      	adds	r3, #88	; 0x58
 8001a02:	2210      	movs	r2, #16
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00c fc71 	bl	800e2ee <strncpy>
      break;
 8001a0c:	e017      	b.n	8001a3e <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f7ff ff14 	bl	800183e <ParseNumber>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001a20:	e00d      	b.n	8001a3e <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8001a22:	490e      	ldr	r1, [pc, #56]	; (8001a5c <AT_ParseInfo+0xe8>)
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f00c fc8d 	bl	800e344 <strtok>
 8001a2a:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3368      	adds	r3, #104	; 0x68
 8001a30:	2220      	movs	r2, #32
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00c fc5a 	bl	800e2ee <strncpy>
      break;
 8001a3a:	e000      	b.n	8001a3e <AT_ParseInfo+0xca>

    default: break;
 8001a3c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001a3e:	4906      	ldr	r1, [pc, #24]	; (8001a58 <AT_ParseInfo+0xe4>)
 8001a40:	2000      	movs	r0, #0
 8001a42:	f00c fc7f 	bl	800e344 <strtok>
 8001a46:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1a1      	bne.n	8001992 <AT_ParseInfo+0x1e>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	08010500 	.word	0x08010500
 8001a5c:	08010504 	.word	0x08010504

08001a60 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3302      	adds	r3, #2
 8001a72:	4952      	ldr	r1, [pc, #328]	; (8001bbc <AT_ParseConnSettings+0x15c>)
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00c fc65 	bl	800e344 <strtok>
 8001a7a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001a7c:	e095      	b.n	8001baa <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	73fa      	strb	r2, [r7, #15]
 8001a84:	2b0b      	cmp	r3, #11
 8001a86:	d87f      	bhi.n	8001b88 <AT_ParseConnSettings+0x128>
 8001a88:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <AT_ParseConnSettings+0x30>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001ac1 	.word	0x08001ac1
 8001a94:	08001acf 	.word	0x08001acf
 8001a98:	08001adf 	.word	0x08001adf
 8001a9c:	08001af3 	.word	0x08001af3
 8001aa0:	08001b07 	.word	0x08001b07
 8001aa4:	08001b1b 	.word	0x08001b1b
 8001aa8:	08001b29 	.word	0x08001b29
 8001aac:	08001b37 	.word	0x08001b37
 8001ab0:	08001b45 	.word	0x08001b45
 8001ab4:	08001b53 	.word	0x08001b53
 8001ab8:	08001b61 	.word	0x08001b61
 8001abc:	08001b75 	.word	0x08001b75
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2221      	movs	r2, #33	; 0x21
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00c fc11 	bl	800e2ee <strncpy>
      break;
 8001acc:	e05d      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3321      	adds	r3, #33	; 0x21
 8001ad2:	2221      	movs	r2, #33	; 0x21
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00c fc09 	bl	800e2ee <strncpy>
      break;
 8001adc:	e055      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	68b8      	ldr	r0, [r7, #8]
 8001ae2:	f7ff feac 	bl	800183e <ParseNumber>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8001af0:	e04b      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8001af2:	2100      	movs	r1, #0
 8001af4:	68b8      	ldr	r0, [r7, #8]
 8001af6:	f7ff fea2 	bl	800183e <ParseNumber>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8001b04:	e041      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001b06:	2100      	movs	r1, #0
 8001b08:	68b8      	ldr	r0, [r7, #8]
 8001b0a:	f7ff fe98 	bl	800183e <ParseNumber>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001b18:	e037      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3348      	adds	r3, #72	; 0x48
 8001b1e:	4619      	mov	r1, r3
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f7ff fefb 	bl	800191c <ParseIP>
      break;
 8001b26:	e030      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	334c      	adds	r3, #76	; 0x4c
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	68b8      	ldr	r0, [r7, #8]
 8001b30:	f7ff fef4 	bl	800191c <ParseIP>
      break;
 8001b34:	e029      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3350      	adds	r3, #80	; 0x50
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	68b8      	ldr	r0, [r7, #8]
 8001b3e:	f7ff feed 	bl	800191c <ParseIP>
      break;
 8001b42:	e022      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	3354      	adds	r3, #84	; 0x54
 8001b48:	4619      	mov	r1, r3
 8001b4a:	68b8      	ldr	r0, [r7, #8]
 8001b4c:	f7ff fee6 	bl	800191c <ParseIP>
      break;
 8001b50:	e01b      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3358      	adds	r3, #88	; 0x58
 8001b56:	4619      	mov	r1, r3
 8001b58:	68b8      	ldr	r0, [r7, #8]
 8001b5a:	f7ff fedf 	bl	800191c <ParseIP>
      break;
 8001b5e:	e014      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001b60:	2100      	movs	r1, #0
 8001b62:	68b8      	ldr	r0, [r7, #8]
 8001b64:	f7ff fe6b 	bl	800183e <ParseNumber>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8001b72:	e00a      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8001b74:	2100      	movs	r1, #0
 8001b76:	68b8      	ldr	r0, [r7, #8]
 8001b78:	f7ff fe61 	bl	800183e <ParseNumber>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001b86:	e000      	b.n	8001b8a <AT_ParseConnSettings+0x12a>

    default:
      break;
 8001b88:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001b8a:	490c      	ldr	r1, [pc, #48]	; (8001bbc <AT_ParseConnSettings+0x15c>)
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f00c fbd9 	bl	800e344 <strtok>
 8001b92:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <AT_ParseConnSettings+0x14a>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b2c      	cmp	r3, #44	; 0x2c
 8001ba2:	d102      	bne.n	8001baa <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f47f af66 	bne.w	8001a7e <AT_ParseConnSettings+0x1e>
    }
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08010500 	.word	0x08010500

08001bc0 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3302      	adds	r3, #2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b31      	cmp	r3, #49	; 0x31
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	701a      	strb	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001c06:	68b8      	ldr	r0, [r7, #8]
 8001c08:	f7fe fae2 	bl	80001d0 <strlen>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b299      	uxth	r1, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001c16:	461a      	mov	r2, r3
 8001c18:	68b8      	ldr	r0, [r7, #8]
 8001c1a:	47a0      	blx	r4
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dd3e      	ble.n	8001ca4 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001c32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001c3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	dd27      	ble.n	8001c96 <AT_ExecuteCommand+0xaa>
 8001c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c4a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c4e:	dc22      	bgt.n	8001c96 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001c50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c58:	d105      	bne.n	8001c66 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8001c5a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001c66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8001c72:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <AT_ExecuteCommand+0xc4>)
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f00c fb4d 	bl	800e314 <strstr>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e010      	b.n	8001ca6 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001c84:	490b      	ldr	r1, [pc, #44]	; (8001cb4 <AT_ExecuteCommand+0xc8>)
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f00c fb44 	bl	800e314 <strstr>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001c92:	2305      	movs	r3, #5
 8001c94:	e007      	b.n	8001ca6 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001c96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c9a:	f113 0f04 	cmn.w	r3, #4
 8001c9e:	d101      	bne.n	8001ca4 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	e000      	b.n	8001ca6 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001ca4:	2304      	movs	r3, #4
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08010514 	.word	0x08010514
 8001cb4:	08010520 	.word	0x08010520

08001cb8 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	f7fe fa7c 	bl	80001d0 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001cdc:	8a7b      	ldrh	r3, [r7, #18]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <AT_RequestSendData+0x32>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e053      	b.n	8001d92 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001cf6:	8a79      	ldrh	r1, [r7, #18]
 8001cf8:	68b8      	ldr	r0, [r7, #8]
 8001cfa:	4798      	blx	r3
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001d00:	8a3a      	ldrh	r2, [r7, #16]
 8001d02:	8a7b      	ldrh	r3, [r7, #18]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d143      	bne.n	8001d90 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001d14:	8879      	ldrh	r1, [r7, #2]
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001d1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d131      	bne.n	8001d8c <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001d34:	2100      	movs	r1, #0
 8001d36:	6a38      	ldr	r0, [r7, #32]
 8001d38:	4798      	blx	r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001d3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dd19      	ble.n	8001d7a <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8001d46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d4a:	6a3a      	ldr	r2, [r7, #32]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001d52:	4912      	ldr	r1, [pc, #72]	; (8001d9c <AT_RequestSendData+0xe4>)
 8001d54:	6a38      	ldr	r0, [r7, #32]
 8001d56:	f00c fadd 	bl	800e314 <strstr>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e016      	b.n	8001d92 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <AT_RequestSendData+0xe8>)
 8001d66:	6a38      	ldr	r0, [r7, #32]
 8001d68:	f00c fad4 	bl	800e314 <strstr>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001d72:	2305      	movs	r3, #5
 8001d74:	e00d      	b.n	8001d92 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001d76:	2302      	movs	r3, #2
 8001d78:	e00b      	b.n	8001d92 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001d7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d7e:	f113 0f04 	cmn.w	r3, #4
 8001d82:	d101      	bne.n	8001d88 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001d84:	2306      	movs	r3, #6
 8001d86:	e004      	b.n	8001d92 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e002      	b.n	8001d92 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e000      	b.n	8001d92 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8001d90:	2304      	movs	r3, #4
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08010514 	.word	0x08010514
 8001da0:	08010520 	.word	0x08010520

08001da4 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001dac:	2302      	movs	r3, #2
 8001dae:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f247 5230 	movw	r2, #30000	; 0x7530
 8001db6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	4798      	blx	r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d113      	bne.n	8001df2 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	490a      	ldr	r1, [pc, #40]	; (8001dfc <ES_WIFI_Init+0x58>)
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff09 	bl	8001bec <AT_ExecuteCommand>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fdc1 	bl	8001974 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	08010530 	.word	0x08010530

08001e00 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00b      	beq.n	8001e2c <ES_WIFI_RegisterBusIO+0x2c>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d008      	beq.n	8001e2c <ES_WIFI_RegisterBusIO+0x2c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <ES_WIFI_RegisterBusIO+0x2c>
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <ES_WIFI_RegisterBusIO+0x2c>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e014      	b.n	8001e5a <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4932      	ldr	r1, [pc, #200]	; (8001f48 <ES_WIFI_Connect+0xe0>)
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00c f9d1 	bl	800e228 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e92:	461a      	mov	r2, r3
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f7ff fea9 	bl	8001bec <AT_ExecuteCommand>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d14b      	bne.n	8001f3c <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4927      	ldr	r1, [pc, #156]	; (8001f4c <ES_WIFI_Connect+0xe4>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f00c f9ba 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff fe92 	bl	8001bec <AT_ExecuteCommand>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d134      	bne.n	8001f3c <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	491b      	ldr	r1, [pc, #108]	; (8001f50 <ES_WIFI_Connect+0xe8>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f00c f99f 	bl	800e228 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff fe77 	bl	8001bec <AT_ExecuteCommand>
 8001efe:	4603      	mov	r3, r0
 8001f00:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d119      	bne.n	8001f3c <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f0e:	4911      	ldr	r1, [pc, #68]	; (8001f54 <ES_WIFI_Connect+0xec>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00c f989 	bl	800e228 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f22:	461a      	mov	r2, r3
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f7ff fe61 	bl	8001bec <AT_ExecuteCommand>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	08010548 	.word	0x08010548
 8001f4c:	08010550 	.word	0x08010550
 8001f50:	08010558 	.word	0x08010558
 8001f54:	08010560 	.word	0x08010560

08001f58 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f66:	4911      	ldr	r1, [pc, #68]	; (8001fac <ES_WIFI_IsConnected+0x54>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00c f95d 	bl	800e228 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fe35 	bl	8001bec <AT_ExecuteCommand>
 8001f82:	4603      	mov	r3, r0
 8001f84:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d108      	bne.n	8001f9e <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	33d2      	adds	r3, #210	; 0xd2
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f7ff fe11 	bl	8001bc0 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	08010564 	.word	0x08010564

08001fb0 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fbe:	4910      	ldr	r1, [pc, #64]	; (8002000 <ES_WIFI_GetNetworkSettings+0x50>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00c f931 	bl	800e228 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fe09 	bl	8001bec <AT_ExecuteCommand>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d108      	bne.n	8001ff6 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	338d      	adds	r3, #141	; 0x8d
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f7ff fd35 	bl	8001a60 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	0801056c 	.word	0x0801056c

08002004 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002014:	4912      	ldr	r1, [pc, #72]	; (8002060 <ES_WIFI_GetMACAddress+0x5c>)
 8002016:	4618      	mov	r0, r3
 8002018:	f00c f906 	bl	800e228 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002028:	461a      	mov	r2, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fdde 	bl	8001bec <AT_ExecuteCommand>
 8002030:	4603      	mov	r3, r0
 8002032:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10c      	bne.n	8002054 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002040:	3302      	adds	r3, #2
 8002042:	4908      	ldr	r1, [pc, #32]	; (8002064 <ES_WIFI_GetMACAddress+0x60>)
 8002044:	4618      	mov	r0, r3
 8002046:	f00c f97d 	bl	800e344 <strtok>
 800204a:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	68b8      	ldr	r0, [r7, #8]
 8002050:	f7ff fc39 	bl	80018c6 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	080105bc 	.word	0x080105bc
 8002064:	080105c0 	.word	0x080105c0

08002068 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b087      	sub	sp, #28
 800206c:	af02      	add	r7, sp, #8
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <ES_WIFI_StartClientConnection+0x1e>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d105      	bne.n	8002092 <ES_WIFI_StartClientConnection+0x2a>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	885b      	ldrh	r3, [r3, #2]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <ES_WIFI_StartClientConnection+0x2a>
 800208e:	2302      	movs	r3, #2
 8002090:	e0c1      	b.n	8002216 <ES_WIFI_StartClientConnection+0x1ae>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	461a      	mov	r2, r3
 800209e:	4960      	ldr	r1, [pc, #384]	; (8002220 <ES_WIFI_StartClientConnection+0x1b8>)
 80020a0:	f00c f8c2 	bl	800e228 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020b0:	461a      	mov	r2, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fd9a 	bl	8001bec <AT_ExecuteCommand>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d114      	bne.n	80020ec <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4955      	ldr	r1, [pc, #340]	; (8002224 <ES_WIFI_StartClientConnection+0x1bc>)
 80020d0:	f00c f8aa 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020e0:	461a      	mov	r2, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fd82 	bl	8001bec <AT_ExecuteCommand>
 80020e8:	4603      	mov	r3, r0
 80020ea:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d114      	bne.n	800211c <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	889b      	ldrh	r3, [r3, #4]
 80020fc:	461a      	mov	r2, r3
 80020fe:	494a      	ldr	r1, [pc, #296]	; (8002228 <ES_WIFI_StartClientConnection+0x1c0>)
 8002100:	f00c f892 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002110:	461a      	mov	r2, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fd6a 	bl	8001bec <AT_ExecuteCommand>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d11c      	bne.n	800215c <ES_WIFI_StartClientConnection+0xf4>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <ES_WIFI_StartClientConnection+0xca>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d114      	bne.n	800215c <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	885b      	ldrh	r3, [r3, #2]
 800213c:	461a      	mov	r2, r3
 800213e:	493b      	ldr	r1, [pc, #236]	; (800222c <ES_WIFI_StartClientConnection+0x1c4>)
 8002140:	f00c f872 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002150:	461a      	mov	r2, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff fd4a 	bl	8001bec <AT_ExecuteCommand>
 8002158:	4603      	mov	r3, r0
 800215a:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d128      	bne.n	80021b4 <ES_WIFI_StartClientConnection+0x14c>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <ES_WIFI_StartClientConnection+0x10a>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d120      	bne.n	80021b4 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	799b      	ldrb	r3, [r3, #6]
 800217c:	4619      	mov	r1, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	79db      	ldrb	r3, [r3, #7]
 8002182:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8002188:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	9200      	str	r2, [sp, #0]
 8002192:	4623      	mov	r3, r4
 8002194:	460a      	mov	r2, r1
 8002196:	4926      	ldr	r1, [pc, #152]	; (8002230 <ES_WIFI_StartClientConnection+0x1c8>)
 8002198:	f00c f846 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021a8:	461a      	mov	r2, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fd1e 	bl	8001bec <AT_ExecuteCommand>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <ES_WIFI_StartClientConnection+0x180>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d112      	bne.n	80021e8 <ES_WIFI_StartClientConnection+0x180>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021c8:	491a      	ldr	r1, [pc, #104]	; (8002234 <ES_WIFI_StartClientConnection+0x1cc>)
 80021ca:	4618      	mov	r0, r3
 80021cc:	f00c f82c 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021dc:	461a      	mov	r2, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fd04 	bl	8001bec <AT_ExecuteCommand>
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d112      	bne.n	8002214 <ES_WIFI_StartClientConnection+0x1ac>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021f4:	4910      	ldr	r1, [pc, #64]	; (8002238 <ES_WIFI_StartClientConnection+0x1d0>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00c f816 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002208:	461a      	mov	r2, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fcee 	bl	8001bec <AT_ExecuteCommand>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bd90      	pop	{r4, r7, pc}
 800221e:	bf00      	nop
 8002220:	08010624 	.word	0x08010624
 8002224:	0801062c 	.word	0x0801062c
 8002228:	08010634 	.word	0x08010634
 800222c:	0801063c 	.word	0x0801063c
 8002230:	08010644 	.word	0x08010644
 8002234:	08010654 	.word	0x08010654
 8002238:	0801065c 	.word	0x0801065c

0800223c <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f503 7094 	add.w	r0, r3, #296	; 0x128
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	461a      	mov	r2, r3
 8002252:	4915      	ldr	r1, [pc, #84]	; (80022a8 <ES_WIFI_StopClientConnection+0x6c>)
 8002254:	f00b ffe8 	bl	800e228 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002264:	461a      	mov	r2, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fcc0 	bl	8001bec <AT_ExecuteCommand>
 800226c:	4603      	mov	r3, r0
 800226e:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d112      	bne.n	800229c <ES_WIFI_StopClientConnection+0x60>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800227c:	490b      	ldr	r1, [pc, #44]	; (80022ac <ES_WIFI_StopClientConnection+0x70>)
 800227e:	4618      	mov	r0, r3
 8002280:	f00b ffd2 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002290:	461a      	mov	r2, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fcaa 	bl	8001bec <AT_ExecuteCommand>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
  }
  UNLOCK_WIFI();
  return ret;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	08010624 	.word	0x08010624
 80022ac:	08010664 	.word	0x08010664

080022b0 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	460b      	mov	r3, r1
 80022be:	72fb      	strb	r3, [r7, #11]
 80022c0:	4613      	mov	r3, r2
 80022c2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80022c4:	2302      	movs	r3, #2
 80022c6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 80022ce:	2301      	movs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	e001      	b.n	80022d8 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 80022d8:	893b      	ldrh	r3, [r7, #8]
 80022da:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80022de:	d302      	bcc.n	80022e6 <ES_WIFI_SendData+0x36>
 80022e0:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80022e4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022f2:	7afa      	ldrb	r2, [r7, #11]
 80022f4:	4942      	ldr	r1, [pc, #264]	; (8002400 <ES_WIFI_SendData+0x150>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00b ff96 	bl	800e228 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002308:	461a      	mov	r2, r3
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff fc6e 	bl	8001bec <AT_ExecuteCommand>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d15e      	bne.n	80023d8 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4938      	ldr	r1, [pc, #224]	; (8002404 <ES_WIFI_SendData+0x154>)
 8002324:	4618      	mov	r0, r3
 8002326:	f00b ff7f 	bl	800e228 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002336:	461a      	mov	r2, r3
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7ff fc57 	bl	8001bec <AT_ExecuteCommand>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d13d      	bne.n	80023c4 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800234e:	893a      	ldrh	r2, [r7, #8]
 8002350:	492d      	ldr	r1, [pc, #180]	; (8002408 <ES_WIFI_SendData+0x158>)
 8002352:	4618      	mov	r0, r3
 8002354:	f00b ff68 	bl	800e228 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002364:	893a      	ldrh	r2, [r7, #8]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7ff fca3 	bl	8001cb8 <AT_RequestSendData>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d119      	bne.n	80023b0 <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002382:	4922      	ldr	r1, [pc, #136]	; (800240c <ES_WIFI_SendData+0x15c>)
 8002384:	4618      	mov	r0, r3
 8002386:	f00b ffc5 	bl	800e314 <strstr>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d02c      	beq.n	80023ea <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002390:	f640 0267 	movw	r2, #2151	; 0x867
 8002394:	491e      	ldr	r1, [pc, #120]	; (8002410 <ES_WIFI_SendData+0x160>)
 8002396:	481f      	ldr	r0, [pc, #124]	; (8002414 <ES_WIFI_SendData+0x164>)
 8002398:	f00b fe3e 	bl	800e018 <iprintf>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023a2:	4619      	mov	r1, r3
 80023a4:	481c      	ldr	r0, [pc, #112]	; (8002418 <ES_WIFI_SendData+0x168>)
 80023a6:	f00b fe37 	bl	800e018 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80023aa:	2302      	movs	r3, #2
 80023ac:	74fb      	strb	r3, [r7, #19]
 80023ae:	e01c      	b.n	80023ea <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80023b0:	f640 026d 	movw	r2, #2157	; 0x86d
 80023b4:	4916      	ldr	r1, [pc, #88]	; (8002410 <ES_WIFI_SendData+0x160>)
 80023b6:	4817      	ldr	r0, [pc, #92]	; (8002414 <ES_WIFI_SendData+0x164>)
 80023b8:	f00b fe2e 	bl	800e018 <iprintf>
 80023bc:	4817      	ldr	r0, [pc, #92]	; (800241c <ES_WIFI_SendData+0x16c>)
 80023be:	f00b feb1 	bl	800e124 <puts>
 80023c2:	e012      	b.n	80023ea <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 80023c4:	f640 0272 	movw	r2, #2162	; 0x872
 80023c8:	4911      	ldr	r1, [pc, #68]	; (8002410 <ES_WIFI_SendData+0x160>)
 80023ca:	4812      	ldr	r0, [pc, #72]	; (8002414 <ES_WIFI_SendData+0x164>)
 80023cc:	f00b fe24 	bl	800e018 <iprintf>
 80023d0:	4813      	ldr	r0, [pc, #76]	; (8002420 <ES_WIFI_SendData+0x170>)
 80023d2:	f00b fea7 	bl	800e124 <puts>
 80023d6:	e008      	b.n	80023ea <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 80023d8:	f640 0277 	movw	r2, #2167	; 0x877
 80023dc:	490c      	ldr	r1, [pc, #48]	; (8002410 <ES_WIFI_SendData+0x160>)
 80023de:	480d      	ldr	r0, [pc, #52]	; (8002414 <ES_WIFI_SendData+0x164>)
 80023e0:	f00b fe1a 	bl	800e018 <iprintf>
 80023e4:	480f      	ldr	r0, [pc, #60]	; (8002424 <ES_WIFI_SendData+0x174>)
 80023e6:	f00b fe9d 	bl	800e124 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d102      	bne.n	80023f6 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2200      	movs	r2, #0
 80023f4:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	08010624 	.word	0x08010624
 8002404:	080107d8 	.word	0x080107d8
 8002408:	080107e0 	.word	0x080107e0
 800240c:	080107ec 	.word	0x080107ec
 8002410:	080106b4 	.word	0x080106b4
 8002414:	080106cc 	.word	0x080106cc
 8002418:	080107f4 	.word	0x080107f4
 800241c:	08010810 	.word	0x08010810
 8002420:	0801082c 	.word	0x0801082c
 8002424:	08010840 	.word	0x08010840

08002428 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08c      	sub	sp, #48	; 0x30
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8002430:	4b56      	ldr	r3, [pc, #344]	; (800258c <SPI_WIFI_MspInit+0x164>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002434:	4a55      	ldr	r2, [pc, #340]	; (800258c <SPI_WIFI_MspInit+0x164>)
 8002436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243a:	6593      	str	r3, [r2, #88]	; 0x58
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <SPI_WIFI_MspInit+0x164>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b50      	ldr	r3, [pc, #320]	; (800258c <SPI_WIFI_MspInit+0x164>)
 800244a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244c:	4a4f      	ldr	r2, [pc, #316]	; (800258c <SPI_WIFI_MspInit+0x164>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002454:	4b4d      	ldr	r3, [pc, #308]	; (800258c <SPI_WIFI_MspInit+0x164>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002460:	4b4a      	ldr	r3, [pc, #296]	; (800258c <SPI_WIFI_MspInit+0x164>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	4a49      	ldr	r2, [pc, #292]	; (800258c <SPI_WIFI_MspInit+0x164>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <SPI_WIFI_MspInit+0x164>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002478:	4b44      	ldr	r3, [pc, #272]	; (800258c <SPI_WIFI_MspInit+0x164>)
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	4a43      	ldr	r2, [pc, #268]	; (800258c <SPI_WIFI_MspInit+0x164>)
 800247e:	f043 0310 	orr.w	r3, r3, #16
 8002482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002484:	4b41      	ldr	r3, [pc, #260]	; (800258c <SPI_WIFI_MspInit+0x164>)
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002496:	483e      	ldr	r0, [pc, #248]	; (8002590 <SPI_WIFI_MspInit+0x168>)
 8002498:	f003 fb86 	bl	8005ba8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800249c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80024ae:	f107 031c 	add.w	r3, r7, #28
 80024b2:	4619      	mov	r1, r3
 80024b4:	4836      	ldr	r0, [pc, #216]	; (8002590 <SPI_WIFI_MspInit+0x168>)
 80024b6:	f003 f8c1 	bl	800563c <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <SPI_WIFI_MspInit+0x16c>)
 80024c0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	4619      	mov	r1, r3
 80024d0:	4831      	ldr	r0, [pc, #196]	; (8002598 <SPI_WIFI_MspInit+0x170>)
 80024d2:	f003 f8b3 	bl	800563c <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80024d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024da:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024dc:	2301      	movs	r3, #1
 80024de:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	4829      	ldr	r0, [pc, #164]	; (8002598 <SPI_WIFI_MspInit+0x170>)
 80024f4:	f003 f8a2 	bl	800563c <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80024f8:	2201      	movs	r2, #1
 80024fa:	2101      	movs	r1, #1
 80024fc:	4826      	ldr	r0, [pc, #152]	; (8002598 <SPI_WIFI_MspInit+0x170>)
 80024fe:	f003 fb53 	bl	8005ba8 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8002502:	2301      	movs	r3, #1
 8002504:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002506:	2301      	movs	r3, #1
 8002508:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800250e:	2301      	movs	r3, #1
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	481f      	ldr	r0, [pc, #124]	; (8002598 <SPI_WIFI_MspInit+0x170>)
 800251a:	f003 f88f 	bl	800563c <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800251e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002522:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800252c:	2301      	movs	r3, #1
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002530:	2306      	movs	r3, #6
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	4619      	mov	r1, r3
 800253a:	4818      	ldr	r0, [pc, #96]	; (800259c <SPI_WIFI_MspInit+0x174>)
 800253c:	f003 f87e 	bl	800563c <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8002540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002544:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800254e:	2301      	movs	r3, #1
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002552:	2306      	movs	r3, #6
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002556:	f107 031c 	add.w	r3, r7, #28
 800255a:	4619      	mov	r1, r3
 800255c:	480f      	ldr	r0, [pc, #60]	; (800259c <SPI_WIFI_MspInit+0x174>)
 800255e:	f003 f86d 	bl	800563c <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002562:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800256c:	2301      	movs	r3, #1
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002570:	2301      	movs	r3, #1
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002574:	2306      	movs	r3, #6
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4619      	mov	r1, r3
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <SPI_WIFI_MspInit+0x174>)
 8002580:	f003 f85c 	bl	800563c <HAL_GPIO_Init>
}
 8002584:	bf00      	nop
 8002586:	3730      	adds	r7, #48	; 0x30
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	48000400 	.word	0x48000400
 8002594:	10110000 	.word	0x10110000
 8002598:	48001000 	.word	0x48001000
 800259c:	48000800 	.word	0x48000800

080025a0 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d145      	bne.n	8002640 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025b6:	4a28      	ldr	r2, [pc, #160]	; (8002658 <SPI_WIFI_Init+0xb8>)
 80025b8:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80025ba:	4826      	ldr	r0, [pc, #152]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025bc:	f7ff ff34 	bl	8002428 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025c2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c6:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80025c8:	4b22      	ldr	r3, [pc, #136]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025d0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80025d4:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025e8:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025ec:	2210      	movs	r2, #16
 80025ee:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <SPI_WIFI_Init+0xb4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <SPI_WIFI_Init+0xb4>)
 8002604:	2200      	movs	r2, #0
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002608:	4812      	ldr	r0, [pc, #72]	; (8002654 <SPI_WIFI_Init+0xb4>)
 800260a:	f005 fbaf 	bl	8007d6c <HAL_SPI_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
 8002618:	e018      	b.n	800264c <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2007      	movs	r0, #7
 8002620:	f002 ffa0 	bl	8005564 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8002624:	2007      	movs	r0, #7
 8002626:	f002 ffb9 	bl	800559c <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2033      	movs	r0, #51	; 0x33
 8002630:	f002 ff98 	bl	8005564 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002634:	2033      	movs	r0, #51	; 0x33
 8002636:	f002 ffb1 	bl	800559c <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 800263a:	200a      	movs	r0, #10
 800263c:	f000 f9fe 	bl	8002a3c <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8002640:	f000 f80c 	bl	800265c <SPI_WIFI_ResetModule>
 8002644:	4603      	mov	r3, r0
 8002646:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20002a38 	.word	0x20002a38
 8002658:	40003c00 	.word	0x40003c00

0800265c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8002662:	f002 fe97 	bl	8005394 <HAL_GetTick>
 8002666:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800266c:	2200      	movs	r2, #0
 800266e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002672:	4830      	ldr	r0, [pc, #192]	; (8002734 <SPI_WIFI_ResetModule+0xd8>)
 8002674:	f003 fa98 	bl	8005ba8 <HAL_GPIO_WritePin>
 8002678:	200a      	movs	r0, #10
 800267a:	f002 fe97 	bl	80053ac <HAL_Delay>
 800267e:	2201      	movs	r2, #1
 8002680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002684:	482b      	ldr	r0, [pc, #172]	; (8002734 <SPI_WIFI_ResetModule+0xd8>)
 8002686:	f003 fa8f 	bl	8005ba8 <HAL_GPIO_WritePin>
 800268a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800268e:	f002 fe8d 	bl	80053ac <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8002692:	2200      	movs	r2, #0
 8002694:	2101      	movs	r1, #1
 8002696:	4827      	ldr	r0, [pc, #156]	; (8002734 <SPI_WIFI_ResetModule+0xd8>)
 8002698:	f003 fa86 	bl	8005ba8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800269c:	200f      	movs	r0, #15
 800269e:	f000 f9cd 	bl	8002a3c <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 80026a2:	e020      	b.n	80026e6 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	463a      	mov	r2, r7
 80026a8:	18d1      	adds	r1, r2, r3
 80026aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ae:	2201      	movs	r2, #1
 80026b0:	4821      	ldr	r0, [pc, #132]	; (8002738 <SPI_WIFI_ResetModule+0xdc>)
 80026b2:	f005 fc4f 	bl	8007f54 <HAL_SPI_Receive>
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	3302      	adds	r3, #2
 80026be:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80026c0:	f002 fe68 	bl	8005394 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d202      	bcs.n	80026d6 <SPI_WIFI_ResetModule+0x7a>
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80026d6:	2201      	movs	r2, #1
 80026d8:	2101      	movs	r1, #1
 80026da:	4816      	ldr	r0, [pc, #88]	; (8002734 <SPI_WIFI_ResetModule+0xd8>)
 80026dc:	f003 fa64 	bl	8005ba8 <HAL_GPIO_WritePin>
      return -1;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	e021      	b.n	800272a <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80026e6:	2102      	movs	r1, #2
 80026e8:	4812      	ldr	r0, [pc, #72]	; (8002734 <SPI_WIFI_ResetModule+0xd8>)
 80026ea:	f003 fa45 	bl	8005b78 <HAL_GPIO_ReadPin>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d0d7      	beq.n	80026a4 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80026f4:	2201      	movs	r2, #1
 80026f6:	2101      	movs	r1, #1
 80026f8:	480e      	ldr	r0, [pc, #56]	; (8002734 <SPI_WIFI_ResetModule+0xd8>)
 80026fa:	f003 fa55 	bl	8005ba8 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80026fe:	783b      	ldrb	r3, [r7, #0]
 8002700:	2b15      	cmp	r3, #21
 8002702:	d10e      	bne.n	8002722 <SPI_WIFI_ResetModule+0xc6>
 8002704:	787b      	ldrb	r3, [r7, #1]
 8002706:	2b15      	cmp	r3, #21
 8002708:	d10b      	bne.n	8002722 <SPI_WIFI_ResetModule+0xc6>
 800270a:	78bb      	ldrb	r3, [r7, #2]
 800270c:	2b0d      	cmp	r3, #13
 800270e:	d108      	bne.n	8002722 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8002710:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8002712:	2b0a      	cmp	r3, #10
 8002714:	d105      	bne.n	8002722 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8002716:	793b      	ldrb	r3, [r7, #4]
 8002718:	2b3e      	cmp	r3, #62	; 0x3e
 800271a:	d102      	bne.n	8002722 <SPI_WIFI_ResetModule+0xc6>
 800271c:	797b      	ldrb	r3, [r7, #5]
 800271e:	2b20      	cmp	r3, #32
 8002720:	d002      	beq.n	8002728 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	e000      	b.n	800272a <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	48001000 	.word	0x48001000
 8002738:	20002a38 	.word	0x20002a38

0800273c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <SPI_WIFI_DeInit+0x10>)
 8002742:	f005 fbdf 	bl	8007f04 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20002a38 	.word	0x20002a38

08002750 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002758:	f002 fe1c 	bl	8005394 <HAL_GetTick>
 800275c:	4603      	mov	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8002760:	e00a      	b.n	8002778 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002762:	f002 fe17 	bl	8005394 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d902      	bls.n	8002778 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
 8002776:	e007      	b.n	8002788 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8002778:	2102      	movs	r1, #2
 800277a:	4805      	ldr	r0, [pc, #20]	; (8002790 <wait_cmddata_rdy_high+0x40>)
 800277c:	f003 f9fc 	bl	8005b78 <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d1ed      	bne.n	8002762 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	48001000 	.word	0x48001000

08002794 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800279c:	f002 fdfa 	bl	8005394 <HAL_GetTick>
 80027a0:	4603      	mov	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 80027a4:	e00a      	b.n	80027bc <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80027a6:	f002 fdf5 	bl	8005394 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad2      	subs	r2, r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d902      	bls.n	80027bc <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e004      	b.n	80027c6 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <wait_cmddata_rdy_rising_event+0x3c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d0f0      	beq.n	80027a6 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80027c4:	2300      	movs	r3, #0
#endif
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200002d8 	.word	0x200002d8

080027d4 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80027dc:	f002 fdda 	bl	8005394 <HAL_GetTick>
 80027e0:	4603      	mov	r3, r0
 80027e2:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 80027e4:	e00a      	b.n	80027fc <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80027e6:	f002 fdd5 	bl	8005394 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad2      	subs	r2, r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d902      	bls.n	80027fc <wait_spi_rx_event+0x28>
    {
      return -1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	e004      	b.n	8002806 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <wait_spi_rx_event+0x3c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d0f0      	beq.n	80027e6 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 8002804:	2300      	movs	r3, #0
#endif
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200002d0 	.word	0x200002d0

08002814 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800281c:	f002 fdba 	bl	8005394 <HAL_GetTick>
 8002820:	4603      	mov	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8002824:	e00a      	b.n	800283c <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002826:	f002 fdb5 	bl	8005394 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d902      	bls.n	800283c <wait_spi_tx_event+0x28>
    {
      return -1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	e004      	b.n	8002846 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <wait_spi_tx_event+0x3c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d0f0      	beq.n	8002826 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002844:	2300      	movs	r3, #0
#endif
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200002d4 	.word	0x200002d4

08002854 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	460b      	mov	r3, r1
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8002866:	2201      	movs	r2, #1
 8002868:	2101      	movs	r1, #1
 800286a:	4834      	ldr	r0, [pc, #208]	; (800293c <SPI_WIFI_ReceiveData+0xe8>)
 800286c:	f003 f99c 	bl	8005ba8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002870:	2003      	movs	r0, #3
 8002872:	f000 f8e3 	bl	8002a3c <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff8b 	bl	8002794 <wait_cmddata_rdy_rising_event>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	da02      	bge.n	800288a <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002884:	f06f 0302 	mvn.w	r3, #2
 8002888:	e054      	b.n	8002934 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	482b      	ldr	r0, [pc, #172]	; (800293c <SPI_WIFI_ReceiveData+0xe8>)
 8002890:	f003 f98a 	bl	8005ba8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002894:	200f      	movs	r0, #15
 8002896:	f000 f8d1 	bl	8002a3c <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800289a:	e03d      	b.n	8002918 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800289c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80028a0:	897b      	ldrh	r3, [r7, #10]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	db02      	blt.n	80028ac <SPI_WIFI_ReceiveData+0x58>
 80028a6:	897b      	ldrh	r3, [r7, #10]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d13c      	bne.n	8002926 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <SPI_WIFI_ReceiveData+0xec>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	2201      	movs	r2, #1
 80028b8:	4619      	mov	r1, r3
 80028ba:	4822      	ldr	r0, [pc, #136]	; (8002944 <SPI_WIFI_ReceiveData+0xf0>)
 80028bc:	f006 f8ac 	bl	8008a18 <HAL_SPI_Receive_IT>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80028c6:	2201      	movs	r2, #1
 80028c8:	2101      	movs	r1, #1
 80028ca:	481c      	ldr	r0, [pc, #112]	; (800293c <SPI_WIFI_ReceiveData+0xe8>)
 80028cc:	f003 f96c 	bl	8005ba8 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	e02e      	b.n	8002934 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff7b 	bl	80027d4 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80028de:	7d3a      	ldrb	r2, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3301      	adds	r3, #1
 80028e8:	7d7a      	ldrb	r2, [r7, #21]
 80028ea:	701a      	strb	r2, [r3, #0]
      length += 2;
 80028ec:	8afb      	ldrh	r3, [r7, #22]
 80028ee:	3302      	adds	r3, #2
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3302      	adds	r3, #2
 80028f8:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 80028fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002902:	db09      	blt.n	8002918 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 8002904:	2201      	movs	r2, #1
 8002906:	2101      	movs	r1, #1
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <SPI_WIFI_ReceiveData+0xe8>)
 800290a:	f003 f94d 	bl	8005ba8 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 800290e:	f7ff fea5 	bl	800265c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8002912:	f06f 0303 	mvn.w	r3, #3
 8002916:	e00d      	b.n	8002934 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002918:	2102      	movs	r1, #2
 800291a:	4808      	ldr	r0, [pc, #32]	; (800293c <SPI_WIFI_ReceiveData+0xe8>)
 800291c:	f003 f92c 	bl	8005b78 <HAL_GPIO_ReadPin>
 8002920:	4603      	mov	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d0ba      	beq.n	800289c <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8002926:	2201      	movs	r2, #1
 8002928:	2101      	movs	r1, #1
 800292a:	4804      	ldr	r0, [pc, #16]	; (800293c <SPI_WIFI_ReceiveData+0xe8>)
 800292c:	f003 f93c 	bl	8005ba8 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002930:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	48001000 	.word	0x48001000
 8002940:	200002d0 	.word	0x200002d0
 8002944:	20002a38 	.word	0x20002a38

08002948 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	460b      	mov	r3, r1
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fef9 	bl	8002750 <wait_cmddata_rdy_high>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	da02      	bge.n	800296a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	e04f      	b.n	8002a0a <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <SPI_WIFI_SendData+0xcc>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002970:	2200      	movs	r2, #0
 8002972:	2101      	movs	r1, #1
 8002974:	4828      	ldr	r0, [pc, #160]	; (8002a18 <SPI_WIFI_SendData+0xd0>)
 8002976:	f003 f917 	bl	8005ba8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800297a:	200f      	movs	r0, #15
 800297c:	f000 f85e 	bl	8002a3c <SPI_WIFI_DelayUs>
  if (len > 1)
 8002980:	897b      	ldrh	r3, [r7, #10]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d919      	bls.n	80029ba <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8002986:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <SPI_WIFI_SendData+0xd4>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800298c:	897b      	ldrh	r3, [r7, #10]
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	68f9      	ldr	r1, [r7, #12]
 8002996:	4822      	ldr	r0, [pc, #136]	; (8002a20 <SPI_WIFI_SendData+0xd8>)
 8002998:	f005 ff9c 	bl	80088d4 <HAL_SPI_Transmit_IT>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 80029a2:	2201      	movs	r2, #1
 80029a4:	2101      	movs	r1, #1
 80029a6:	481c      	ldr	r0, [pc, #112]	; (8002a18 <SPI_WIFI_SendData+0xd0>)
 80029a8:	f003 f8fe 	bl	8005ba8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	e02b      	b.n	8002a0a <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff2d 	bl	8002814 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 80029c4:	897b      	ldrh	r3, [r7, #10]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4413      	add	r3, r2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80029d0:	230a      	movs	r3, #10
 80029d2:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <SPI_WIFI_SendData+0xd4>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	2201      	movs	r2, #1
 80029e0:	4619      	mov	r1, r3
 80029e2:	480f      	ldr	r0, [pc, #60]	; (8002a20 <SPI_WIFI_SendData+0xd8>)
 80029e4:	f005 ff76 	bl	80088d4 <HAL_SPI_Transmit_IT>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80029ee:	2201      	movs	r2, #1
 80029f0:	2101      	movs	r1, #1
 80029f2:	4809      	ldr	r0, [pc, #36]	; (8002a18 <SPI_WIFI_SendData+0xd0>)
 80029f4:	f003 f8d8 	bl	8005ba8 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	e005      	b.n	8002a0a <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff07 	bl	8002814 <wait_spi_tx_event>
    
  }
  return len;
 8002a06:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200002d8 	.word	0x200002d8
 8002a18:	48001000 	.word	0x48001000
 8002a1c:	200002d4 	.word	0x200002d4
 8002a20:	20002a38 	.word	0x20002a38

08002a24 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f002 fcbd 	bl	80053ac <HAL_Delay>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <SPI_WIFI_DelayUs+0x94>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d122      	bne.n	8002a9a <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8002a54:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <SPI_WIFI_DelayUs+0x98>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <SPI_WIFI_DelayUs+0x9c>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002a6a:	f002 fc93 	bl	8005394 <HAL_GetTick>
 8002a6e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002a70:	e002      	b.n	8002a78 <SPI_WIFI_DelayUs+0x3c>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f9      	bne.n	8002a72 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8002a7e:	f002 fc89 	bl	8005394 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <SPI_WIFI_DelayUs+0x94>)
 8002a8a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <SPI_WIFI_DelayUs+0x94>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <SPI_WIFI_DelayUs+0x5e>
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <SPI_WIFI_DelayUs+0x94>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <SPI_WIFI_DelayUs+0x98>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <SPI_WIFI_DelayUs+0xa0>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	0c9a      	lsrs	r2, r3, #18
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <SPI_WIFI_DelayUs+0x94>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002aba:	e002      	b.n	8002ac2 <SPI_WIFI_DelayUs+0x86>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f9      	bne.n	8002abc <SPI_WIFI_DelayUs+0x80>
  return;
 8002ac8:	bf00      	nop
}
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200002dc 	.word	0x200002dc
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	10624dd3 	.word	0x10624dd3
 8002adc:	431bde83 	.word	0x431bde83

08002ae0 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_SPI_RxCpltCallback+0x24>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <HAL_SPI_RxCpltCallback+0x24>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
  }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	200002d0 	.word	0x200002d0

08002b08 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_SPI_TxCpltCallback+0x24>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_SPI_TxCpltCallback+0x24>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	200002d4 	.word	0x200002d4

08002b30 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <SPI_WIFI_ISR+0x1c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <SPI_WIFI_ISR+0x1c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
   }
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	200002d8 	.word	0x200002d8

08002b50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8002b60:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4a06      	ldr	r2, [pc, #24]	; (8002b80 <vApplicationGetIdleTaskMemory+0x30>)
 8002b66:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200002e0 	.word	0x200002e0
 8002b80:	20000394 	.word	0x20000394

08002b84 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8002b84:	b5b0      	push	{r4, r5, r7, lr}
 8002b86:	b0b8      	sub	sp, #224	; 0xe0
 8002b88:	af00      	add	r7, sp, #0

	/* definition and creation of defaultTask */


	/* Create mempool for use with msg queue */
	osPoolDef(MemPool, 15, MEM_BLOCK_t);
 8002b8a:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <MX_FREERTOS_Init+0x150>)
 8002b8c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//osPoolId(memPool_Id);
	memPool_Id = osPoolCreate(osPool(MemPool));
 8002b96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f008 f87e 	bl	800ac9c <osPoolCreate>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <MX_FREERTOS_Init+0x154>)
 8002ba4:	6013      	str	r3, [r2, #0]
		// Pool created
	}

	/* definition and creation of usart1_msgQHandle */
	// create msg queue of 10 'strings' (uint8_t pointers)
	osMessageQDef(msg_queue, 8, MEM_BLOCK_t*);
 8002ba6:	4b4d      	ldr	r3, [pc, #308]	; (8002cdc <MX_FREERTOS_Init+0x158>)
 8002ba8:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8002bac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//osMessageQId(usart1_msgQHandle);
	msg_queue_Id = osMessageCreate(osMessageQ(msg_queue), NULL);
 8002bb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f008 f96f 	bl	800ae9c <osMessageCreate>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4a47      	ldr	r2, [pc, #284]	; (8002ce0 <MX_FREERTOS_Init+0x15c>)
 8002bc2:	6013      	str	r3, [r2, #0]


//	osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
//	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

	osThreadDef(temperatureTask, StartTemperatureTask, osPriorityIdle, 0, 128);
 8002bc4:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <MX_FREERTOS_Init+0x160>)
 8002bc6:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8002bca:	461d      	mov	r5, r3
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	temperatureTaskHandle = osThreadCreate(osThread(temperatureTask), NULL);
 8002bd8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f007 fffc 	bl	800abdc <osThreadCreate>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <MX_FREERTOS_Init+0x164>)
 8002be8:	6013      	str	r3, [r2, #0]

	osThreadDef(humidityTask, StartHumidityTask, osPriorityIdle, 0, 128);
 8002bea:	4b40      	ldr	r3, [pc, #256]	; (8002cec <MX_FREERTOS_Init+0x168>)
 8002bec:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8002bf0:	461d      	mov	r5, r3
 8002bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	humidityTaskHandle = osThreadCreate(osThread(humidityTask), NULL);
 8002bfe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f007 ffe9 	bl	800abdc <osThreadCreate>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4a38      	ldr	r2, [pc, #224]	; (8002cf0 <MX_FREERTOS_Init+0x16c>)
 8002c0e:	6013      	str	r3, [r2, #0]

	osThreadDef(pressureTask, StartPressureTask, osPriorityIdle, 0, 128);
 8002c10:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <MX_FREERTOS_Init+0x170>)
 8002c12:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002c16:	461d      	mov	r5, r3
 8002c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	pressureTaskHandle = osThreadCreate(osThread(pressureTask), NULL);
 8002c24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f007 ffd6 	bl	800abdc <osThreadCreate>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4a31      	ldr	r2, [pc, #196]	; (8002cf8 <MX_FREERTOS_Init+0x174>)
 8002c34:	6013      	str	r3, [r2, #0]

	osThreadDef(magnetoTask, StartMagnetoTask, osPriorityIdle, 0, 128);
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <MX_FREERTOS_Init+0x178>)
 8002c38:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002c3c:	461d      	mov	r5, r3
 8002c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	magnetoTaskHandle = osThreadCreate(osThread(magnetoTask), NULL);
 8002c4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f007 ffc3 	bl	800abdc <osThreadCreate>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <MX_FREERTOS_Init+0x17c>)
 8002c5a:	6013      	str	r3, [r2, #0]

	osThreadDef(gyroTask, StartGyroTask, osPriorityIdle, 0, 128);
 8002c5c:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <MX_FREERTOS_Init+0x180>)
 8002c5e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002c62:	461d      	mov	r5, r3
 8002c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gyroTaskHandle = osThreadCreate(osThread(gyroTask), NULL);
 8002c70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f007 ffb0 	bl	800abdc <osThreadCreate>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <MX_FREERTOS_Init+0x184>)
 8002c80:	6013      	str	r3, [r2, #0]

	osThreadDef(acceleroTask, StartAcceleroTask, osPriorityIdle, 0, 128);
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <MX_FREERTOS_Init+0x188>)
 8002c84:	f107 041c 	add.w	r4, r7, #28
 8002c88:	461d      	mov	r5, r3
 8002c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	acceleroTaskHandle = osThreadCreate(osThread(acceleroTask), NULL);
 8002c96:	f107 031c 	add.w	r3, r7, #28
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f007 ff9d 	bl	800abdc <osThreadCreate>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4a1a      	ldr	r2, [pc, #104]	; (8002d10 <MX_FREERTOS_Init+0x18c>)
 8002ca6:	6013      	str	r3, [r2, #0]

	osThreadDef(sendMsgTask, StartSendMsgTask, osPriorityIdle, 0, 128);
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <MX_FREERTOS_Init+0x190>)
 8002caa:	463c      	mov	r4, r7
 8002cac:	461d      	mov	r5, r3
 8002cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sendMsgTaskHandle = osThreadCreate(osThread(sendMsgTask), NULL);
 8002cba:	463b      	mov	r3, r7
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f007 ff8c 	bl	800abdc <osThreadCreate>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <MX_FREERTOS_Init+0x194>)
 8002cc8:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 8002cca:	bf00      	nop
 8002ccc:	37e0      	adds	r7, #224	; 0xe0
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	080109e8 	.word	0x080109e8
 8002cd8:	20002ac0 	.word	0x20002ac0
 8002cdc:	080109f4 	.word	0x080109f4
 8002ce0:	20002aa4 	.word	0x20002aa4
 8002ce4:	08010a04 	.word	0x08010a04
 8002ce8:	20002ad4 	.word	0x20002ad4
 8002cec:	08010a20 	.word	0x08010a20
 8002cf0:	20002aac 	.word	0x20002aac
 8002cf4:	08010a3c 	.word	0x08010a3c
 8002cf8:	20002aa8 	.word	0x20002aa8
 8002cfc:	08010a58 	.word	0x08010a58
 8002d00:	20002ad0 	.word	0x20002ad0
 8002d04:	08010a74 	.word	0x08010a74
 8002d08:	20002acc 	.word	0x20002acc
 8002d0c:	08010a90 	.word	0x08010a90
 8002d10:	20002ac4 	.word	0x20002ac4
 8002d14:	08010aac 	.word	0x08010aac
 8002d18:	20002ac8 	.word	0x20002ac8

08002d1c <StartTemperatureTask>:
 * @brief Function implementing the myTask02_button thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTemperatureTask(void const *argument) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	//BSP_TSENSOR_Init();
	uint32_t prevWakeTime;
	prevWakeTime = osKernelSysTick();
 8002d24:	f007 ff4a 	bl	800abbc <osKernelSysTick>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		temperatureTask_Profiler++;
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <StartTemperatureTask+0x30>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <StartTemperatureTask+0x30>)
 8002d34:	6013      	str	r3, [r2, #0]
		RTOSGetTemperature(argument);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8a2 	bl	8002e80 <RTOSGetTemperature>
		osDelayUntil(&prevWakeTime, SENSOR_PERIOD);
 8002d3c:	f107 030c 	add.w	r3, r7, #12
 8002d40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d44:	4618      	mov	r0, r3
 8002d46:	f008 f985 	bl	800b054 <osDelayUntil>
		temperatureTask_Profiler++;
 8002d4a:	e7ef      	b.n	8002d2c <StartTemperatureTask+0x10>
 8002d4c:	20002ab8 	.word	0x20002ab8

08002d50 <StartHumidityTask>:
 * @brief Function implementing the myTask03_LED thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartHumidityTask(void const *argument) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	//BSP_HSENSOR_Init();
	uint32_t prevWakeTime;
	prevWakeTime = osKernelSysTick();
 8002d58:	f007 ff30 	bl	800abbc <osKernelSysTick>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		humidityTask_Profiler++;
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <StartHumidityTask+0x30>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	4a06      	ldr	r2, [pc, #24]	; (8002d80 <StartHumidityTask+0x30>)
 8002d68:	6013      	str	r3, [r2, #0]
		RTOSGetHumidity(argument);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f89e 	bl	8002eac <RTOSGetHumidity>
		osDelayUntil(&prevWakeTime, SENSOR_PERIOD);
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f008 f96b 	bl	800b054 <osDelayUntil>
		humidityTask_Profiler++;
 8002d7e:	e7ef      	b.n	8002d60 <StartHumidityTask+0x10>
 8002d80:	20002aa0 	.word	0x20002aa0

08002d84 <StartPressureTask>:
/**
 * @brief Function implementing the myTask03_LED thread.
 * @param argument: Not used
 * @retval None
 */
void StartPressureTask(void const *argument) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	//BSP_PSENSOR_Init();
	uint32_t prevWakeTime;
	prevWakeTime = osKernelSysTick();
 8002d8c:	f007 ff16 	bl	800abbc <osKernelSysTick>
 8002d90:	4603      	mov	r3, r0
 8002d92:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		pressureTask_Profiler++;
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <StartPressureTask+0x30>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <StartPressureTask+0x30>)
 8002d9c:	6013      	str	r3, [r2, #0]
		RTOSGetPressure(argument);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f89a 	bl	8002ed8 <RTOSGetPressure>
		osDelayUntil(&prevWakeTime, SENSOR_PERIOD);
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002dac:	4618      	mov	r0, r3
 8002dae:	f008 f951 	bl	800b054 <osDelayUntil>
		pressureTask_Profiler++;
 8002db2:	e7ef      	b.n	8002d94 <StartPressureTask+0x10>
 8002db4:	20002ab0 	.word	0x20002ab0

08002db8 <StartMagnetoTask>:
/**
 * @brief Function implementing the myTask03_LED thread.
 * @param argument: Not used
 * @retval None
 */
void StartMagnetoTask(void const *argument) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	//BSP_MAGNETO_Init();
	uint32_t prevWakeTime;
	prevWakeTime = osKernelSysTick();
 8002dc0:	f007 fefc 	bl	800abbc <osKernelSysTick>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		magnetoTask_Profiler++;
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <StartMagnetoTask+0x30>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <StartMagnetoTask+0x30>)
 8002dd0:	6013      	str	r3, [r2, #0]
		RTOSGetMagneto(argument);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f896 	bl	8002f04 <RTOSGetMagneto>
		osDelayUntil(&prevWakeTime, SENSOR_PERIOD);
 8002dd8:	f107 030c 	add.w	r3, r7, #12
 8002ddc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002de0:	4618      	mov	r0, r3
 8002de2:	f008 f937 	bl	800b054 <osDelayUntil>
		magnetoTask_Profiler++;
 8002de6:	e7ef      	b.n	8002dc8 <StartMagnetoTask+0x10>
 8002de8:	20002abc 	.word	0x20002abc

08002dec <StartGyroTask>:
/**
 * @brief Function implementing the myTask03_LED thread.
 * @param argument: Not used
 * @retval None
 */
void StartGyroTask(void const *argument) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	//BSP_GYRO_Init();
	uint32_t prevWakeTime;
	prevWakeTime = osKernelSysTick();
 8002df4:	f007 fee2 	bl	800abbc <osKernelSysTick>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for (;;) {
		gyroTask_Profiler++;
 8002dfc:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <StartGyroTask+0x30>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3301      	adds	r3, #1
 8002e02:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <StartGyroTask+0x30>)
 8002e04:	6013      	str	r3, [r2, #0]
		RTOSGetGyro(argument);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f89c 	bl	8002f44 <RTOSGetGyro>
		osDelayUntil(&prevWakeTime, SENSOR_PERIOD);
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e14:	4618      	mov	r0, r3
 8002e16:	f008 f91d 	bl	800b054 <osDelayUntil>
		gyroTask_Profiler++;
 8002e1a:	e7ef      	b.n	8002dfc <StartGyroTask+0x10>
 8002e1c:	20002ab4 	.word	0x20002ab4

08002e20 <StartAcceleroTask>:
/**
 * @brief Function implementing the myTask03_LED thread.
 * @param argument: Not used
 * @retval None
 */
void StartAcceleroTask(void const *argument) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	//BSP_ACCELERO_Init();
	/* Infinite loop */
	uint32_t prevWakeTime;
	prevWakeTime = osKernelSysTick();
 8002e28:	f007 fec8 	bl	800abbc <osKernelSysTick>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]
	for (;;) {
		acceleroTask_Profiler++;
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <StartAcceleroTask+0x30>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <StartAcceleroTask+0x30>)
 8002e38:	6013      	str	r3, [r2, #0]
		RTOSGetAccelero(argument);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f8a6 	bl	8002f8c <RTOSGetAccelero>
		osDelayUntil(&prevWakeTime, SENSOR_PERIOD);
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f008 f903 	bl	800b054 <osDelayUntil>
		acceleroTask_Profiler++;
 8002e4e:	e7ef      	b.n	8002e30 <StartAcceleroTask+0x10>
 8002e50:	20002ad8 	.word	0x20002ad8

08002e54 <StartSendMsgTask>:
/**
 * @brief Function implementing the myTask03_LED thread.
 * @param argument: Not used
 * @retval None
 */
void StartSendMsgTask(void const *argument) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	//start_connection_to_server();
	connect_wifi();
 8002e5c:	f000 fc56 	bl	800370c <connect_wifi>
	/* Infinite loop */
	for (;;) {
		sendMsgTask_Profiler++;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <StartSendMsgTask+0x28>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	4a05      	ldr	r2, [pc, #20]	; (8002e7c <StartSendMsgTask+0x28>)
 8002e68:	6013      	str	r3, [r2, #0]
		RTOSSendMsg(argument);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f8ae 	bl	8002fcc <RTOSSendMsg>
		osDelay(WIFI_DELAY);
 8002e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e74:	f007 fefe 	bl	800ac74 <osDelay>
		sendMsgTask_Profiler++;
 8002e78:	e7f2      	b.n	8002e60 <StartSendMsgTask+0xc>
 8002e7a:	bf00      	nop
 8002e7c:	20002adc 	.word	0x20002adc

08002e80 <RTOSGetTemperature>:


/*
 * works
 */
void RTOSGetTemperature(void const *argument) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	  float temp_value = 0;
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
	  temp_value = BSP_TSENSOR_ReadTemp();
 8002e8e:	f001 fcc3 	bl	8004818 <BSP_TSENSOR_ReadTemp>
 8002e92:	ed87 0a03 	vstr	s0, [r7, #12]
	  packFloat("temp", temp_value);
 8002e96:	ed97 0a03 	vldr	s0, [r7, #12]
 8002e9a:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <RTOSGetTemperature+0x28>)
 8002e9c:	f000 f8ca 	bl	8003034 <packFloat>

} // RTOSGetTemperature
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	08010ac8 	.word	0x08010ac8

08002eac <RTOSGetHumidity>:

/*
 * works
 */
void RTOSGetHumidity(void const *argument) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	float humidity_value = 0;
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
	//BSP_HSENSOR_Init();
	humidity_value = BSP_HSENSOR_ReadHumidity();
 8002eba:	f001 fbfd 	bl	80046b8 <BSP_HSENSOR_ReadHumidity>
 8002ebe:	ed87 0a03 	vstr	s0, [r7, #12]

	packFloat("humid", humidity_value);
 8002ec2:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ec6:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <RTOSGetHumidity+0x28>)
 8002ec8:	f000 f8b4 	bl	8003034 <packFloat>
	//printf("HUMIDITY is = %.2f %%\n", humidity_value);
} // RTOSGetHumidity
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	08010ad0 	.word	0x08010ad0

08002ed8 <RTOSGetPressure>:

/*
 * Not getting init not working (test again tho)
 */
void RTOSGetPressure(void const *argument) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	float press_value = 0;
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
	press_value = BSP_PSENSOR_ReadPressure();
 8002ee6:	f001 fc6d 	bl	80047c4 <BSP_PSENSOR_ReadPressure>
 8002eea:	ed87 0a03 	vstr	s0, [r7, #12]
	packFloat("press", press_value);
 8002eee:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ef2:	4803      	ldr	r0, [pc, #12]	; (8002f00 <RTOSGetPressure+0x28>)
 8002ef4:	f000 f89e 	bl	8003034 <packFloat>
	 //printf("PRESSURE is = %.2f mBar \n", press_value);
} // RTOSGetPressure
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	08010ad8 	.word	0x08010ad8

08002f04 <RTOSGetMagneto>:

/*
 * works
 */
void RTOSGetMagneto(void const *argument) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	int16_t pDataXYZ[3] = {0};
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	809a      	strh	r2, [r3, #4]
	BSP_MAGNETO_GetXYZ(pDataXYZ);
 8002f16:	f107 0308 	add.w	r3, r7, #8
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 fc1a 	bl	8004754 <BSP_MAGNETO_GetXYZ>
	pack316T("mag", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8002f20:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f24:	b299      	uxth	r1, r3
 8002f26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4803      	ldr	r0, [pc, #12]	; (8002f40 <RTOSGetMagneto+0x3c>)
 8002f34:	f000 f8d6 	bl	80030e4 <pack316T>
   // printf("MAGNETO_X = %d \n", pDataXYZ[0]);
    //printf("MAGNETO_Y = %d \n", pDataXYZ[1]);
    //printf("MAGNETO_Z = %d \n", pDataXYZ[2]);
} // RTOSGetMagneto
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	08010ae0 	.word	0x08010ae0

08002f44 <RTOSGetGyro>:

/*
 * works
 */
void RTOSGetGyro(void const *argument) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	float pGyroDataXYZ[3] = {0};
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
	BSP_GYRO_GetXYZ(pGyroDataXYZ);
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fb73 	bl	8004648 <BSP_GYRO_GetXYZ>
	pack3float("gyro", pGyroDataXYZ[0], pGyroDataXYZ[1], pGyroDataXYZ[2]);
 8002f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f66:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f6a:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f6e:	eeb0 1a66 	vmov.f32	s2, s13
 8002f72:	eef0 0a47 	vmov.f32	s1, s14
 8002f76:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7a:	4803      	ldr	r0, [pc, #12]	; (8002f88 <RTOSGetGyro+0x44>)
 8002f7c:	f000 f934 	bl	80031e8 <pack3float>
   // printf("GYRO_X = %.2f \n", pGyroDataXYZ[0]);
    //printf("GYRO_Y = %.2f \n", pGyroDataXYZ[1]);
    //printf("GYRO_Z = %.2f \n", pGyroDataXYZ[2]);
} // RTOSGetGyro
 8002f80:	bf00      	nop
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	08010ae4 	.word	0x08010ae4

08002f8c <RTOSGetAccelero>:

/*
 * Not working!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */
void RTOSGetAccelero(void const *argument) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	int16_t pDataXYZ[3] = {0};
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8002f9e:	f107 0308 	add.w	r3, r7, #8
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 fae2 	bl	800456c <BSP_ACCELERO_AccGetXYZ>
	pack316T("accel", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8002fa8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fac:	b299      	uxth	r1, r3
 8002fae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4803      	ldr	r0, [pc, #12]	; (8002fc8 <RTOSGetAccelero+0x3c>)
 8002fbc:	f000 f892 	bl	80030e4 <pack316T>
    //printf("ACCELERO_X = %d \n", pDataXYZ[0]);
    //printf("ACCELERO_Y = %d \n", pDataXYZ[1]);
    //printf("ACCELERO_Z = %d \n", pDataXYZ[2]);
} // RTOSGetAccelero
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	08010aec 	.word	0x08010aec

08002fcc <RTOSSendMsg>:

/*
 * Will only run when data is available in msg_queue
 * otherwise task will be blocked and other tasks can use cpu
 */
void RTOSSendMsg(void const *argument) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	osEvent evt = osMessageGet(msg_queue_Id, osWaitForever);
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <RTOSSendMsg+0x60>)
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	f107 0308 	add.w	r3, r7, #8
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f007 ffc3 	bl	800af6c <osMessageGet>

	if(evt.status == osEventMessage){
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d11b      	bne.n	8003024 <RTOSSendMsg+0x58>
		// transmit the message
		MEM_BLOCK_t *rptr;

		rptr = evt.value.p;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	617b      	str	r3, [r7, #20]

		if(start_connection_to_server() == 0){
 8002ff0:	f000 fb9a 	bl	8003728 <start_connection_to_server>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10e      	bne.n	8003018 <RTOSSendMsg+0x4c>
			taskENTER_CRITICAL();
 8002ffa:	f009 ff03 	bl	800ce04 <vPortEnterCritical>
			send_data_to_server(rptr->buffer, rptr->len);
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8003006:	b29b      	uxth	r3, r3
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f000 fbd8 	bl	80037c0 <send_data_to_server>
			end_connection_to_server();
 8003010:	f000 fbce 	bl	80037b0 <end_connection_to_server>
			taskEXIT_CRITICAL();
 8003014:	f009 ff26 	bl	800ce64 <vPortExitCritical>
		}

		osPoolFree(memPool_Id, rptr);
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <RTOSSendMsg+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6979      	ldr	r1, [r7, #20]
 800301e:	4618      	mov	r0, r3
 8003020:	f007 fefb 	bl	800ae1a <osPoolFree>
	}
} // RTOSSendMsg
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20002aa4 	.word	0x20002aa4
 8003030:	20002ac0 	.word	0x20002ac0

08003034 <packFloat>:
	mptr->len = len;
	// put buffer in queue so can be sent
	osMessagePut(msg_queue_Id, (uint32_t)mptr, osWaitForever);
} // packInt16T

void packFloat(const char *label, float val) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	ed87 0a00 	vstr	s0, [r7]
	// allocate memory for message
	MEM_BLOCK_t *mptr;
	mptr = (MEM_BLOCK_t*) osPoolAlloc(memPool_Id);
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <packFloat+0xa0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f007 fe86 	bl	800ad56 <osPoolAlloc>
 800304a:	62f8      	str	r0, [r7, #44]	; 0x2c
	// pack the msg into the buffer
	cw_pack_context pc;
	cw_pack_context_init(&pc, mptr->buffer, PACK_BUFFER_SIZE, 0);
 800304c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800304e:	f107 0008 	add.w	r0, r7, #8
 8003052:	2300      	movs	r3, #0
 8003054:	2264      	movs	r2, #100	; 0x64
 8003056:	f7fd ff3b 	bl	8000ed0 <cw_pack_context_init>
	cw_pack_map_size(&pc, 2);
 800305a:	f107 0308 	add.w	r3, r7, #8
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe f990 	bl	8001386 <cw_pack_map_size>

	cw_pack_str(&pc, "lbl", 3);
 8003066:	f107 0308 	add.w	r3, r7, #8
 800306a:	2203      	movs	r2, #3
 800306c:	491a      	ldr	r1, [pc, #104]	; (80030d8 <packFloat+0xa4>)
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fa44 	bl	80014fc <cw_pack_str>
	cw_pack_str(&pc, label, strlen(label));
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fd f8ab 	bl	80001d0 <strlen>
 800307a:	4602      	mov	r2, r0
 800307c:	f107 0308 	add.w	r3, r7, #8
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fa3a 	bl	80014fc <cw_pack_str>

	cw_pack_str(&pc, "val", 3);
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	2203      	movs	r2, #3
 800308e:	4913      	ldr	r1, [pc, #76]	; (80030dc <packFloat+0xa8>)
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fa33 	bl	80014fc <cw_pack_str>
	cw_pack_float(&pc, val);
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	ed97 0a00 	vldr	s0, [r7]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f91f 	bl	80012e2 <cw_pack_float>

	if (pc.return_code == CWP_RC_OK){
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d110      	bne.n	80030cc <packFloat+0x98>
		uint16_t len =  pc.current - pc.start;
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	857b      	strh	r3, [r7, #42]	; 0x2a
		mptr->len = len;
 80030b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		// put buffer in queue so can be sent
		osMessagePut(msg_queue_Id, (uint32_t)mptr, osWaitForever);
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <packFloat+0xac>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030c2:	f04f 32ff 	mov.w	r2, #4294967295
 80030c6:	4618      	mov	r0, r3
 80030c8:	f007 ff10 	bl	800aeec <osMessagePut>
	}
}
 80030cc:	bf00      	nop
 80030ce:	3730      	adds	r7, #48	; 0x30
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20002ac0 	.word	0x20002ac0
 80030d8:	08010af4 	.word	0x08010af4
 80030dc:	08010af8 	.word	0x08010af8
 80030e0:	20002aa4 	.word	0x20002aa4

080030e4 <pack316T>:

void pack316T(char *label, uint16_t val1, uint16_t val2, uint16_t val3) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	460b      	mov	r3, r1
 80030f8:	813b      	strh	r3, [r7, #8]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
	// allocate memory for message
	MEM_BLOCK_t *mptr;
	mptr = (MEM_BLOCK_t*) osPoolAlloc(memPool_Id);
 80030fe:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <pack316T+0xec>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f007 fe27 	bl	800ad56 <osPoolAlloc>
 8003108:	6378      	str	r0, [r7, #52]	; 0x34
	// pack the msg into the buffer
	cw_pack_context pc;
	cw_pack_context_init(&pc, mptr->buffer, PACK_BUFFER_SIZE, 0);
 800310a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800310c:	f107 0010 	add.w	r0, r7, #16
 8003110:	2300      	movs	r3, #0
 8003112:	2264      	movs	r2, #100	; 0x64
 8003114:	f7fd fedc 	bl	8000ed0 <cw_pack_context_init>
	cw_pack_map_size(&pc, 4);
 8003118:	f107 0310 	add.w	r3, r7, #16
 800311c:	2104      	movs	r1, #4
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe f931 	bl	8001386 <cw_pack_map_size>

	cw_pack_str(&pc, "lbl", 3);
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	2203      	movs	r2, #3
 800312a:	492a      	ldr	r1, [pc, #168]	; (80031d4 <pack316T+0xf0>)
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe f9e5 	bl	80014fc <cw_pack_str>
	cw_pack_str(&pc, label, strlen(label));
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7fd f84c 	bl	80001d0 <strlen>
 8003138:	4602      	mov	r2, r0
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe f9db 	bl	80014fc <cw_pack_str>

	cw_pack_str(&pc, "val1", 4);
 8003146:	f107 0310 	add.w	r3, r7, #16
 800314a:	2204      	movs	r2, #4
 800314c:	4922      	ldr	r1, [pc, #136]	; (80031d8 <pack316T+0xf4>)
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe f9d4 	bl	80014fc <cw_pack_str>
	cw_pack_unsigned(&pc, (uint64_t)val1);
 8003154:	897a      	ldrh	r2, [r7, #10]
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f107 0110 	add.w	r1, r7, #16
 800315e:	4608      	mov	r0, r1
 8003160:	f7fd fee1 	bl	8000f26 <cw_pack_unsigned>

	cw_pack_str(&pc, "val2", 4);
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	2204      	movs	r2, #4
 800316a:	491c      	ldr	r1, [pc, #112]	; (80031dc <pack316T+0xf8>)
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe f9c5 	bl	80014fc <cw_pack_str>
	cw_pack_unsigned(&pc, (uint64_t)val2);
 8003172:	893a      	ldrh	r2, [r7, #8]
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	f107 0110 	add.w	r1, r7, #16
 800317c:	4608      	mov	r0, r1
 800317e:	f7fd fed2 	bl	8000f26 <cw_pack_unsigned>

	cw_pack_str(&pc, "val3", 4);
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	2204      	movs	r2, #4
 8003188:	4915      	ldr	r1, [pc, #84]	; (80031e0 <pack316T+0xfc>)
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe f9b6 	bl	80014fc <cw_pack_str>
	cw_pack_unsigned(&pc, (uint64_t)val3);
 8003190:	88fa      	ldrh	r2, [r7, #6]
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	f107 0110 	add.w	r1, r7, #16
 800319a:	4608      	mov	r0, r1
 800319c:	f7fd fec3 	bl	8000f26 <cw_pack_unsigned>

	if (pc.return_code == CWP_RC_OK){
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d110      	bne.n	80031c8 <pack316T+0xe4>
		uint16_t len =  pc.current - pc.start;
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	867b      	strh	r3, [r7, #50]	; 0x32
		mptr->len = len;
 80031ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		// put buffer in queue so can be sent
		osMessagePut(msg_queue_Id, (uint32_t)mptr, osWaitForever);
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <pack316T+0x100>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031be:	f04f 32ff 	mov.w	r2, #4294967295
 80031c2:	4618      	mov	r0, r3
 80031c4:	f007 fe92 	bl	800aeec <osMessagePut>
	}
}
 80031c8:	bf00      	nop
 80031ca:	3738      	adds	r7, #56	; 0x38
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20002ac0 	.word	0x20002ac0
 80031d4:	08010af4 	.word	0x08010af4
 80031d8:	08010afc 	.word	0x08010afc
 80031dc:	08010b04 	.word	0x08010b04
 80031e0:	08010b0c 	.word	0x08010b0c
 80031e4:	20002aa4 	.word	0x20002aa4

080031e8 <pack3float>:

void pack3float(char *label, float val1, float val2, float val3) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08e      	sub	sp, #56	; 0x38
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80031f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80031f8:	ed87 1a00 	vstr	s2, [r7]
	// allocate memory for message
	MEM_BLOCK_t *mptr;
	mptr = (MEM_BLOCK_t*) osPoolAlloc(memPool_Id);
 80031fc:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <pack3float+0xe0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f007 fda8 	bl	800ad56 <osPoolAlloc>
 8003206:	6378      	str	r0, [r7, #52]	; 0x34
	// pack the msg into the buffer
	cw_pack_context pc;
	cw_pack_context_init (&pc, mptr->buffer, PACK_BUFFER_SIZE, 0);
 8003208:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800320a:	f107 0010 	add.w	r0, r7, #16
 800320e:	2300      	movs	r3, #0
 8003210:	2264      	movs	r2, #100	; 0x64
 8003212:	f7fd fe5d 	bl	8000ed0 <cw_pack_context_init>
	cw_pack_map_size (&pc, 4);
 8003216:	f107 0310 	add.w	r3, r7, #16
 800321a:	2104      	movs	r1, #4
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe f8b2 	bl	8001386 <cw_pack_map_size>

	cw_pack_str(&pc, "lbl", 3);
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	2203      	movs	r2, #3
 8003228:	4928      	ldr	r1, [pc, #160]	; (80032cc <pack3float+0xe4>)
 800322a:	4618      	mov	r0, r3
 800322c:	f7fe f966 	bl	80014fc <cw_pack_str>
	cw_pack_str(&pc, label, strlen(label));
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7fc ffcd 	bl	80001d0 <strlen>
 8003236:	4602      	mov	r2, r0
 8003238:	f107 0310 	add.w	r3, r7, #16
 800323c:	68f9      	ldr	r1, [r7, #12]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe f95c 	bl	80014fc <cw_pack_str>

	cw_pack_str(&pc, "val1", 4);
 8003244:	f107 0310 	add.w	r3, r7, #16
 8003248:	2204      	movs	r2, #4
 800324a:	4921      	ldr	r1, [pc, #132]	; (80032d0 <pack3float+0xe8>)
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe f955 	bl	80014fc <cw_pack_str>
	cw_pack_float (&pc, val1);
 8003252:	f107 0310 	add.w	r3, r7, #16
 8003256:	ed97 0a02 	vldr	s0, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f841 	bl	80012e2 <cw_pack_float>

	cw_pack_str(&pc, "val2", 4);
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	2204      	movs	r2, #4
 8003266:	491b      	ldr	r1, [pc, #108]	; (80032d4 <pack3float+0xec>)
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe f947 	bl	80014fc <cw_pack_str>
	cw_pack_float(&pc, val2);
 800326e:	f107 0310 	add.w	r3, r7, #16
 8003272:	ed97 0a01 	vldr	s0, [r7, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f833 	bl	80012e2 <cw_pack_float>

	cw_pack_str(&pc, "val3", 4);
 800327c:	f107 0310 	add.w	r3, r7, #16
 8003280:	2204      	movs	r2, #4
 8003282:	4915      	ldr	r1, [pc, #84]	; (80032d8 <pack3float+0xf0>)
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe f939 	bl	80014fc <cw_pack_str>
	cw_pack_float(&pc, val3);
 800328a:	f107 0310 	add.w	r3, r7, #16
 800328e:	ed97 0a00 	vldr	s0, [r7]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe f825 	bl	80012e2 <cw_pack_float>

	if (pc.return_code == CWP_RC_OK){
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d110      	bne.n	80032c0 <pack3float+0xd8>
		uint16_t len =  pc.current - pc.start;
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	867b      	strh	r3, [r7, #50]	; 0x32
		mptr->len = len;
 80032a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		// put buffer in queue so can be sent
		osMessagePut(msg_queue_Id, (uint32_t)mptr, osWaitForever);
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <pack3float+0xf4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032b6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ba:	4618      	mov	r0, r3
 80032bc:	f007 fe16 	bl	800aeec <osMessagePut>
	}
}
 80032c0:	bf00      	nop
 80032c2:	3738      	adds	r7, #56	; 0x38
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20002ac0 	.word	0x20002ac0
 80032cc:	08010af4 	.word	0x08010af4
 80032d0:	08010afc 	.word	0x08010afc
 80032d4:	08010b04 	.word	0x08010b04
 80032d8:	08010b0c 	.word	0x08010b0c
 80032dc:	20002aa4 	.word	0x20002aa4

080032e0 <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b0ac      	sub	sp, #176	; 0xb0
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2288      	movs	r2, #136	; 0x88
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f00a f9bc 	bl	800d67e <memset>
  if(i2cHandle->Instance==I2C2)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a21      	ldr	r2, [pc, #132]	; (8003390 <HAL_I2C_MspInit+0xb0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d13b      	bne.n	8003388 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003314:	2300      	movs	r3, #0
 8003316:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4618      	mov	r0, r3
 800331e:	f004 f859 	bl	80073d4 <HAL_RCCEx_PeriphCLKConfig>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003328:	f000 fb42 	bl	80039b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_I2C_MspInit+0xb4>)
 800332e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_I2C_MspInit+0xb4>)
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003338:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_I2C_MspInit+0xb4>)
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003344:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800334c:	2312      	movs	r3, #18
 800334e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003352:	2301      	movs	r3, #1
 8003354:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800335e:	2304      	movs	r3, #4
 8003360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003364:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003368:	4619      	mov	r1, r3
 800336a:	480b      	ldr	r0, [pc, #44]	; (8003398 <HAL_I2C_MspInit+0xb8>)
 800336c:	f002 f966 	bl	800563c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_I2C_MspInit+0xb4>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	4a07      	ldr	r2, [pc, #28]	; (8003394 <HAL_I2C_MspInit+0xb4>)
 8003376:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800337a:	6593      	str	r3, [r2, #88]	; 0x58
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_I2C_MspInit+0xb4>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003388:	bf00      	nop
 800338a:	37b0      	adds	r7, #176	; 0xb0
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40005800 	.word	0x40005800
 8003394:	40021000 	.word	0x40021000
 8003398:	48000400 	.word	0x48000400

0800339c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <HAL_I2C_MspDeInit+0x3c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10f      	bne.n	80033ce <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_I2C_MspDeInit+0x40>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <HAL_I2C_MspDeInit+0x40>)
 80033b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80033b8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80033ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033be:	4808      	ldr	r0, [pc, #32]	; (80033e0 <HAL_I2C_MspDeInit+0x44>)
 80033c0:	f002 fae6 	bl	8005990 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80033c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033c8:	4805      	ldr	r0, [pc, #20]	; (80033e0 <HAL_I2C_MspDeInit+0x44>)
 80033ca:	f002 fae1 	bl	8005990 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40005800 	.word	0x40005800
 80033dc:	40021000 	.word	0x40021000
 80033e0:	48000400 	.word	0x48000400

080033e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80033e8:	f001 ffa8 	bl	800533c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80033ec:	f000 f8fe 	bl	80035ec <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80033f0:	f000 f95e 	bl	80036b0 <PeriphCommonClock_Config>

	/* USER CODE BEGIN SysInit */
#if defined (TERMINAL_USE)
	/* Initialize all configured peripherals */
	hDiscoUart.Instance = DISCOVERY_COM1;
 80033f4:	4b17      	ldr	r3, [pc, #92]	; (8003454 <main+0x70>)
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <main+0x74>)
 80033f8:	601a      	str	r2, [r3, #0]
	hDiscoUart.Init.BaudRate = 115200;
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <main+0x70>)
 80033fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003400:	605a      	str	r2, [r3, #4]
	hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <main+0x70>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
	hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <main+0x70>)
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
	hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <main+0x70>)
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
	hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <main+0x70>)
 8003416:	220c      	movs	r2, #12
 8003418:	615a      	str	r2, [r3, #20]
	hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <main+0x70>)
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
	hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <main+0x70>)
 8003422:	2200      	movs	r2, #0
 8003424:	61da      	str	r2, [r3, #28]
	hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <main+0x70>)
 8003428:	2200      	movs	r2, #0
 800342a:	621a      	str	r2, [r3, #32]
	hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <main+0x70>)
 800342e:	2200      	movs	r2, #0
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

	BSP_COM_Init(COM1, &hDiscoUart);
 8003432:	4908      	ldr	r1, [pc, #32]	; (8003454 <main+0x70>)
 8003434:	2000      	movs	r0, #0
 8003436:	f000 fe8b 	bl	8004150 <BSP_COM_Init>
	//BSP_TSENSOR_Init();

	printf("****** Wifi Client ****** \n\n");
 800343a:	4808      	ldr	r0, [pc, #32]	; (800345c <main+0x78>)
 800343c:	f00a fe72 	bl	800e124 <puts>

#endif /* TERMINAL_USE */
	test_values();
 8003440:	f000 f81e 	bl	8003480 <test_values>
	init_BSP();
 8003444:	f000 f80c 	bl	8003460 <init_BSP>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003448:	f7ff fb9c 	bl	8002b84 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 800344c:	f007 fbaf 	bl	800abae <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003450:	e7fe      	b.n	8003450 <main+0x6c>
 8003452:	bf00      	nop
 8003454:	20003430 	.word	0x20003430
 8003458:	40013800 	.word	0x40013800
 800345c:	08010b14 	.word	0x08010b14

08003460 <init_BSP>:
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

void init_BSP() {
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	//BSP_ACCELERO_DeInit();


	BSP_ACCELERO_Init();
 8003464:	f001 f830 	bl	80044c8 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8003468:	f001 f898 	bl	800459c <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 800346c:	f001 f932 	bl	80046d4 <BSP_MAGNETO_Init>
	BSP_PSENSOR_Init();
 8003470:	f001 f988 	bl	8004784 <BSP_PSENSOR_Init>
	BSP_HSENSOR_Init();
 8003474:	f001 f900 	bl	8004678 <BSP_HSENSOR_Init>
	BSP_TSENSOR_Init();
 8003478:	f001 f9b2 	bl	80047e0 <BSP_TSENSOR_Init>
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}

08003480 <test_values>:

void test_values() {
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0

	int16_t pDataXYZ[3] = {0};
 8003486:	f107 030c 	add.w	r3, r7, #12
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	809a      	strh	r2, [r3, #4]
	float pGyroDataXYZ[3] = {0};
 8003490:	463b      	mov	r3, r7
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	609a      	str	r2, [r3, #8]

	BSP_ACCELERO_Init();
 800349a:	f001 f815 	bl	80044c8 <BSP_ACCELERO_Init>
	BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800349e:	f107 030c 	add.w	r3, r7, #12
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 f862 	bl	800456c <BSP_ACCELERO_AccGetXYZ>
	printf("ACCELERO_X = %d \n", pDataXYZ[0]);
 80034a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034ac:	4619      	mov	r1, r3
 80034ae:	4843      	ldr	r0, [pc, #268]	; (80035bc <test_values+0x13c>)
 80034b0:	f00a fdb2 	bl	800e018 <iprintf>
	printf("ACCELERO_Y = %d \n", pDataXYZ[1]);
 80034b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034b8:	4619      	mov	r1, r3
 80034ba:	4841      	ldr	r0, [pc, #260]	; (80035c0 <test_values+0x140>)
 80034bc:	f00a fdac 	bl	800e018 <iprintf>
	printf("ACCELERO_Z = %d \n", pDataXYZ[2]);
 80034c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80034c4:	4619      	mov	r1, r3
 80034c6:	483f      	ldr	r0, [pc, #252]	; (80035c4 <test_values+0x144>)
 80034c8:	f00a fda6 	bl	800e018 <iprintf>
	BSP_ACCELERO_DeInit();
 80034cc:	f001 f83a 	bl	8004544 <BSP_ACCELERO_DeInit>

	BSP_GYRO_Init();
 80034d0:	f001 f864 	bl	800459c <BSP_GYRO_Init>
	BSP_GYRO_GetXYZ(pGyroDataXYZ);
 80034d4:	463b      	mov	r3, r7
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 f8b6 	bl	8004648 <BSP_GYRO_GetXYZ>
    printf("GYRO_X = %.2f \n", pGyroDataXYZ[0]);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f832 	bl	8000548 <__aeabi_f2d>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4837      	ldr	r0, [pc, #220]	; (80035c8 <test_values+0x148>)
 80034ea:	f00a fd95 	bl	800e018 <iprintf>
    printf("GYRO_Y = %.2f \n", pGyroDataXYZ[1]);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd f829 	bl	8000548 <__aeabi_f2d>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4834      	ldr	r0, [pc, #208]	; (80035cc <test_values+0x14c>)
 80034fc:	f00a fd8c 	bl	800e018 <iprintf>
    printf("GYRO_Z = %.2f \n", pGyroDataXYZ[2]);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f820 	bl	8000548 <__aeabi_f2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4830      	ldr	r0, [pc, #192]	; (80035d0 <test_values+0x150>)
 800350e:	f00a fd83 	bl	800e018 <iprintf>
	BSP_GYRO_DeInit();
 8003512:	f001 f885 	bl	8004620 <BSP_GYRO_DeInit>

	BSP_MAGNETO_Init();
 8003516:	f001 f8dd 	bl	80046d4 <BSP_MAGNETO_Init>
	BSP_MAGNETO_GetXYZ(pDataXYZ);
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	4618      	mov	r0, r3
 8003520:	f001 f918 	bl	8004754 <BSP_MAGNETO_GetXYZ>
    printf("MAGNETO_X = %d \n", pDataXYZ[0]);
 8003524:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003528:	4619      	mov	r1, r3
 800352a:	482a      	ldr	r0, [pc, #168]	; (80035d4 <test_values+0x154>)
 800352c:	f00a fd74 	bl	800e018 <iprintf>
    printf("MAGNETO_Y = %d \n", pDataXYZ[1]);
 8003530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003534:	4619      	mov	r1, r3
 8003536:	4828      	ldr	r0, [pc, #160]	; (80035d8 <test_values+0x158>)
 8003538:	f00a fd6e 	bl	800e018 <iprintf>
    printf("MAGNETO_Z = %d \n", pDataXYZ[2]);
 800353c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003540:	4619      	mov	r1, r3
 8003542:	4826      	ldr	r0, [pc, #152]	; (80035dc <test_values+0x15c>)
 8003544:	f00a fd68 	bl	800e018 <iprintf>
    BSP_MAGNETO_DeInit();
 8003548:	f001 f8f0 	bl	800472c <BSP_MAGNETO_DeInit>

	BSP_PSENSOR_Init();
 800354c:	f001 f91a 	bl	8004784 <BSP_PSENSOR_Init>
	float press_value = 0;
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
	press_value = BSP_PSENSOR_ReadPressure();
 8003556:	f001 f935 	bl	80047c4 <BSP_PSENSOR_ReadPressure>
 800355a:	ed87 0a07 	vstr	s0, [r7, #28]
	printf("PRESSURE is = %.2f mBar \n", press_value);
 800355e:	69f8      	ldr	r0, [r7, #28]
 8003560:	f7fc fff2 	bl	8000548 <__aeabi_f2d>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	481d      	ldr	r0, [pc, #116]	; (80035e0 <test_values+0x160>)
 800356a:	f00a fd55 	bl	800e018 <iprintf>

	BSP_HSENSOR_Init();
 800356e:	f001 f883 	bl	8004678 <BSP_HSENSOR_Init>
	 float humidity_value = 0;
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
	humidity_value = BSP_HSENSOR_ReadHumidity();
 8003578:	f001 f89e 	bl	80046b8 <BSP_HSENSOR_ReadHumidity>
 800357c:	ed87 0a06 	vstr	s0, [r7, #24]
	printf("HUMIDITY is = %.2f %%\n", humidity_value);
 8003580:	69b8      	ldr	r0, [r7, #24]
 8003582:	f7fc ffe1 	bl	8000548 <__aeabi_f2d>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4816      	ldr	r0, [pc, #88]	; (80035e4 <test_values+0x164>)
 800358c:	f00a fd44 	bl	800e018 <iprintf>

	BSP_TSENSOR_Init();
 8003590:	f001 f926 	bl	80047e0 <BSP_TSENSOR_Init>
	float temp_value = 0;
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
	temp_value = BSP_TSENSOR_ReadTemp();
 800359a:	f001 f93d 	bl	8004818 <BSP_TSENSOR_ReadTemp>
 800359e:	ed87 0a05 	vstr	s0, [r7, #20]
	printf("TEMPERATURE is = %.2f �C\n", temp_value);
 80035a2:	6978      	ldr	r0, [r7, #20]
 80035a4:	f7fc ffd0 	bl	8000548 <__aeabi_f2d>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	480e      	ldr	r0, [pc, #56]	; (80035e8 <test_values+0x168>)
 80035ae:	f00a fd33 	bl	800e018 <iprintf>

}
 80035b2:	bf00      	nop
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	08010b30 	.word	0x08010b30
 80035c0:	08010b44 	.word	0x08010b44
 80035c4:	08010b58 	.word	0x08010b58
 80035c8:	08010b6c 	.word	0x08010b6c
 80035cc:	08010b7c 	.word	0x08010b7c
 80035d0:	08010b8c 	.word	0x08010b8c
 80035d4:	08010b9c 	.word	0x08010b9c
 80035d8:	08010bb0 	.word	0x08010bb0
 80035dc:	08010bc4 	.word	0x08010bc4
 80035e0:	08010bd8 	.word	0x08010bd8
 80035e4:	08010bf4 	.word	0x08010bf4
 80035e8:	08010c0c 	.word	0x08010c0c

080035ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b096      	sub	sp, #88	; 0x58
 80035f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	2244      	movs	r2, #68	; 0x44
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f00a f83f 	bl	800d67e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003600:	463b      	mov	r3, r7
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800360e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003612:	f003 f86b 	bl	80066ec <HAL_PWREx_ControlVoltageScaling>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800361c:	f000 f9c8 	bl	80039b0 <Error_Handler>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8003620:	f003 f846 	bl	80066b0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <SystemClock_Config+0xc0>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	4a20      	ldr	r2, [pc, #128]	; (80036ac <SystemClock_Config+0xc0>)
 800362c:	f023 0318 	bic.w	r3, r3, #24
 8003630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8003634:	2314      	movs	r3, #20
 8003636:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003638:	2301      	movs	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800363c:	2301      	movs	r3, #1
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003644:	2360      	movs	r3, #96	; 0x60
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003648:	2302      	movs	r3, #2
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800364c:	2301      	movs	r3, #1
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8003650:	2301      	movs	r3, #1
 8003652:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8003654:	2328      	movs	r3, #40	; 0x28
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003658:	2307      	movs	r3, #7
 800365a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800365c:	2302      	movs	r3, #2
 800365e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003660:	2302      	movs	r3, #2
 8003662:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4618      	mov	r0, r3
 800366a:	f003 f895 	bl	8006798 <HAL_RCC_OscConfig>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <SystemClock_Config+0x8c>
		Error_Handler();
 8003674:	f000 f99c 	bl	80039b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003678:	230f      	movs	r3, #15
 800367a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800367c:	2303      	movs	r3, #3
 800367e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800368c:	463b      	mov	r3, r7
 800368e:	2104      	movs	r1, #4
 8003690:	4618      	mov	r0, r3
 8003692:	f003 fc67 	bl	8006f64 <HAL_RCC_ClockConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <SystemClock_Config+0xb4>
		Error_Handler();
 800369c:	f000 f988 	bl	80039b0 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80036a0:	f004 f982 	bl	80079a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80036a4:	bf00      	nop
 80036a6:	3758      	adds	r7, #88	; 0x58
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000

080036b0 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0a2      	sub	sp, #136	; 0x88
 80036b4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80036b6:	463b      	mov	r3, r7
 80036b8:	2288      	movs	r2, #136	; 0x88
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f009 ffde 	bl	800d67e <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
 80036c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80036c6:	603b      	str	r3, [r7, #0]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80036c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036cc:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80036ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80036d4:	2301      	movs	r3, #1
 80036d6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80036d8:	2301      	movs	r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80036dc:	2318      	movs	r3, #24
 80036de:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80036e0:	2307      	movs	r3, #7
 80036e2:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80036e4:	2302      	movs	r3, #2
 80036e6:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80036e8:	2302      	movs	r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK
 80036ec:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80036f0:	61fb      	str	r3, [r7, #28]
			| RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80036f2:	463b      	mov	r3, r7
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 fe6d 	bl	80073d4 <HAL_RCCEx_PeriphCLKConfig>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <PeriphCommonClock_Config+0x54>
		Error_Handler();
 8003700:	f000 f956 	bl	80039b0 <Error_Handler>
	}
}
 8003704:	bf00      	nop
 8003706:	3788      	adds	r7, #136	; 0x88
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <connect_wifi>:
 */
void start_app() {
	start_connection_to_server();
} //void start_app()

int connect_wifi() {
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
	// Attempt to connect to selected access point
	if (wifi_connect() != 0)
 8003710:	f000 f8ae 	bl	8003870 <wifi_connect>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <connect_wifi+0x14>
		return -1;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	e000      	b.n	8003722 <connect_wifi+0x16>
	return 0;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <start_connection_to_server>:
/*
 * int start_connection_to_server(void)
 */
int start_connection_to_server(void) {
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b083      	sub	sp, #12
 800372c:	af02      	add	r7, sp, #8
	// Attempt to connect to selected access point
	//if (wifi_connect() != 0)
	//	return -1;

	// blocking connect to server
	while (WIFI_STATUS_OK
 800372e:	e00f      	b.n	8003750 <start_connection_to_server+0x28>
			!= WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "",
					host_ip_addr, HOSTPORT, LOCALPORT)) {
		LOG(
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <start_connection_to_server+0x78>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <start_connection_to_server+0x78>)
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	461a      	mov	r2, r3
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <start_connection_to_server+0x78>)
 800373e:	789b      	ldrb	r3, [r3, #2]
 8003740:	4618      	mov	r0, r3
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <start_connection_to_server+0x78>)
 8003744:	78db      	ldrb	r3, [r3, #3]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	4603      	mov	r3, r0
 800374a:	4816      	ldr	r0, [pc, #88]	; (80037a4 <start_connection_to_server+0x7c>)
 800374c:	f00a fc64 	bl	800e018 <iprintf>
			!= WIFI_OpenClientConnection(SOCKET, WIFI_TCP_PROTOCOL, "",
 8003750:	f241 339d 	movw	r3, #5021	; 0x139d
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	f641 3358 	movw	r3, #7000	; 0x1b58
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <start_connection_to_server+0x78>)
 800375e:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <start_connection_to_server+0x80>)
 8003760:	2100      	movs	r1, #0
 8003762:	2000      	movs	r0, #0
 8003764:	f000 fc52 	bl	800400c <WIFI_OpenClientConnection>
 8003768:	4603      	mov	r3, r0
	while (WIFI_STATUS_OK
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e0      	bne.n	8003730 <start_connection_to_server+0x8>
				("Waiting connection to  %d.%d.%d.%d\n",host_ip_addr[0],host_ip_addr[1],host_ip_addr[2],host_ip_addr[3]));
	}

	LOG(
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <start_connection_to_server+0x78>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <start_connection_to_server+0x78>)
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	4618      	mov	r0, r3
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <start_connection_to_server+0x78>)
 800377c:	789b      	ldrb	r3, [r3, #2]
 800377e:	461c      	mov	r4, r3
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <start_connection_to_server+0x78>)
 8003782:	78db      	ldrb	r3, [r3, #3]
 8003784:	461a      	mov	r2, r3
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <start_connection_to_server+0x78>)
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	9200      	str	r2, [sp, #0]
 800378c:	4623      	mov	r3, r4
 800378e:	4602      	mov	r2, r0
 8003790:	4806      	ldr	r0, [pc, #24]	; (80037ac <start_connection_to_server+0x84>)
 8003792:	f00a fc41 	bl	800e018 <iprintf>

	// test send
	//send_data_to_server();

	//end_connection_to_server();
	return 0;
 8003796:	2300      	movs	r3, #0
} // init_connection_to_server(void)
 8003798:	4618      	mov	r0, r3
 800379a:	3704      	adds	r7, #4
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	20000000 	.word	0x20000000
 80037a4:	08010c28 	.word	0x08010c28
 80037a8:	08010c4c 	.word	0x08010c4c
 80037ac:	08010c50 	.word	0x08010c50

080037b0 <end_connection_to_server>:

/*
 * int end_connection_to_server(void)
 */
int end_connection_to_server(void) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
	WIFI_CloseClientConnection(SOCKET);
 80037b4:	2000      	movs	r0, #0
 80037b6:	f000 fc63 	bl	8004080 <WIFI_CloseClientConnection>
} // int end_connection_to_server(void)
 80037ba:	bf00      	nop
 80037bc:	4618      	mov	r0, r3
 80037be:	bd80      	pop	{r7, pc}

080037c0 <send_data_to_server>:

/*
 * int send_data_to_server()
 */
int send_data_to_server(uint8_t *data, uint16_t len) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
	uint16_t SentDataLength;
	WIFI_Status_t ret;

	//strcpy((char*) http, (char*) "Hello Server\r\n");

	ret = WIFI_SendData(SOCKET, data, len, &SentDataLength,
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	887a      	ldrh	r2, [r7, #2]
 80037d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80037d6:	9100      	str	r1, [sp, #0]
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	2000      	movs	r0, #0
 80037dc:	f000 fc6c 	bl	80040b8 <WIFI_SendData>
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]
			WIFI_WRITE_TIMEOUT);

	if ((ret == WIFI_STATUS_OK) && (SentDataLength != len)) {
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <send_data_to_server+0x36>
 80037ea:	89bb      	ldrh	r3, [r7, #12]
 80037ec:	887a      	ldrh	r2, [r7, #2]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d001      	beq.n	80037f6 <send_data_to_server+0x36>
		ret = WIFI_STATUS_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
} // int send_data_to_server()
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <wifi_start>:

/**
 * static int wifi_start(void)
 * initializes this devices WIFI module
 */
static int wifi_start(void) {
 8003800:	b5b0      	push	{r4, r5, r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af04      	add	r7, sp, #16
	uint8_t MAC_Addr[6];

	/*Initialize and use WIFI module */
	if (WIFI_Init() == WIFI_STATUS_OK) {
 8003806:	f000 fb81 	bl	8003f0c <WIFI_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d123      	bne.n	8003858 <wifi_start+0x58>
		LOG(("ES-WIFI Initialized.\n"));
 8003810:	4814      	ldr	r0, [pc, #80]	; (8003864 <wifi_start+0x64>)
 8003812:	f00a fc87 	bl	800e124 <puts>
		if (WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK) {
 8003816:	463b      	mov	r3, r7
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fbc5 	bl	8003fa8 <WIFI_GetMAC_Address>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d113      	bne.n	800384c <wifi_start+0x4c>
			LOG(
 8003824:	783b      	ldrb	r3, [r7, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	787b      	ldrb	r3, [r7, #1]
 800382a:	461c      	mov	r4, r3
 800382c:	78bb      	ldrb	r3, [r7, #2]
 800382e:	461d      	mov	r5, r3
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	793a      	ldrb	r2, [r7, #4]
 8003834:	7979      	ldrb	r1, [r7, #5]
 8003836:	9102      	str	r1, [sp, #8]
 8003838:	9201      	str	r2, [sp, #4]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	462b      	mov	r3, r5
 800383e:	4622      	mov	r2, r4
 8003840:	4601      	mov	r1, r0
 8003842:	4809      	ldr	r0, [pc, #36]	; (8003868 <wifi_start+0x68>)
 8003844:	f00a fbe8 	bl	800e018 <iprintf>
			return -1;
		}
	} else {
		return -1;
	}
	return 0;
 8003848:	2300      	movs	r3, #0
 800384a:	e007      	b.n	800385c <wifi_start+0x5c>
			LOG(("> ERROR : CANNOT get MAC address\n"));
 800384c:	4807      	ldr	r0, [pc, #28]	; (800386c <wifi_start+0x6c>)
 800384e:	f00a fc69 	bl	800e124 <puts>
			return -1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e001      	b.n	800385c <wifi_start+0x5c>
		return -1;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
} // static int wifi_start(void)
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bdb0      	pop	{r4, r5, r7, pc}
 8003864:	08010c7c 	.word	0x08010c7c
 8003868:	08010c94 	.word	0x08010c94
 800386c:	08010cd4 	.word	0x08010cd4

08003870 <wifi_connect>:

/*
 * int wifi_connect(void)
 * Connect device to Network using SSID and PASSWORD
 */
int wifi_connect(void) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af02      	add	r7, sp, #8

	wifi_start();
 8003876:	f7ff ffc3 	bl	8003800 <wifi_start>

	LOG(("\nConnecting to %s , %s\n","SSID","PASSWORD"));
 800387a:	4a19      	ldr	r2, [pc, #100]	; (80038e0 <wifi_connect+0x70>)
 800387c:	4919      	ldr	r1, [pc, #100]	; (80038e4 <wifi_connect+0x74>)
 800387e:	481a      	ldr	r0, [pc, #104]	; (80038e8 <wifi_connect+0x78>)
 8003880:	f00a fbca 	bl	800e018 <iprintf>
	if (WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK) {
 8003884:	2203      	movs	r2, #3
 8003886:	4919      	ldr	r1, [pc, #100]	; (80038ec <wifi_connect+0x7c>)
 8003888:	4819      	ldr	r0, [pc, #100]	; (80038f0 <wifi_connect+0x80>)
 800388a:	f000 fb6b 	bl	8003f64 <WIFI_Connect>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d11d      	bne.n	80038d0 <wifi_connect+0x60>
		if (WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK) {
 8003894:	4817      	ldr	r0, [pc, #92]	; (80038f4 <wifi_connect+0x84>)
 8003896:	f000 fb9d 	bl	8003fd4 <WIFI_GetIP_Address>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d111      	bne.n	80038c4 <wifi_connect+0x54>
			LOG(
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <wifi_connect+0x84>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <wifi_connect+0x84>)
 80038a8:	785b      	ldrb	r3, [r3, #1]
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <wifi_connect+0x84>)
 80038ae:	789b      	ldrb	r3, [r3, #2]
 80038b0:	4618      	mov	r0, r3
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <wifi_connect+0x84>)
 80038b4:	78db      	ldrb	r3, [r3, #3]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4603      	mov	r3, r0
 80038ba:	480f      	ldr	r0, [pc, #60]	; (80038f8 <wifi_connect+0x88>)
 80038bc:	f00a fbac 	bl	800e018 <iprintf>
		}
	} else {
		LOG(("ERROR : es-wifi module NOT connected\n"));
		return -1;
	}
	return 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e00a      	b.n	80038da <wifi_connect+0x6a>
			LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 80038c4:	480d      	ldr	r0, [pc, #52]	; (80038fc <wifi_connect+0x8c>)
 80038c6:	f00a fc2d 	bl	800e124 <puts>
			return -1;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	e004      	b.n	80038da <wifi_connect+0x6a>
		LOG(("ERROR : es-wifi module NOT connected\n"));
 80038d0:	480b      	ldr	r0, [pc, #44]	; (8003900 <wifi_connect+0x90>)
 80038d2:	f00a fc27 	bl	800e124 <puts>
		return -1;
 80038d6:	f04f 33ff 	mov.w	r3, #4294967295
} // int wifi_connect(void)
 80038da:	4618      	mov	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	08010cf8 	.word	0x08010cf8
 80038e4:	08010d04 	.word	0x08010d04
 80038e8:	08010d0c 	.word	0x08010d0c
 80038ec:	08010d24 	.word	0x08010d24
 80038f0:	08010d30 	.word	0x08010d30
 80038f4:	20000594 	.word	0x20000594
 80038f8:	08010d40 	.word	0x08010d40
 80038fc:	08010d7c 	.word	0x08010d7c
 8003900:	08010dac 	.word	0x08010dac

08003904 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&hDiscoUart, (uint8_t*) &ch, 1, 0xFFFF);
 800390c:	1d39      	adds	r1, r7, #4
 800390e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003912:	2201      	movs	r2, #1
 8003914:	4803      	ldr	r0, [pc, #12]	; (8003924 <__io_putchar+0x20>)
 8003916:	f006 fbc9 	bl	800a0ac <HAL_UART_Transmit>

	return ch;
 800391a:	687b      	ldr	r3, [r7, #4]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20003430 	.word	0x20003430

08003928 <__io_getchar>:
/**
 * @brief Retargets the C library scanf function to the USART.
 * @param None
 * @retval None
 */
GETCHAR_PROTOTYPE {
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
	/* Place your implementation of fgetc here */
	/* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
	uint8_t ch = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	71fb      	strb	r3, [r7, #7]
	while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t*) &ch, 1, 30000)) {
 8003932:	bf00      	nop
 8003934:	1df9      	adds	r1, r7, #7
 8003936:	f247 5330 	movw	r3, #30000	; 0x7530
 800393a:	2201      	movs	r2, #1
 800393c:	4805      	ldr	r0, [pc, #20]	; (8003954 <__io_getchar+0x2c>)
 800393e:	f006 fc49 	bl	800a1d4 <HAL_UART_Receive>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f5      	bne.n	8003934 <__io_getchar+0xc>
		;
	}
	return ch;
 8003948:	79fb      	ldrb	r3, [r7, #7]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20003430 	.word	0x20003430

08003958 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callback.
 * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d102      	bne.n	800396e <HAL_GPIO_EXTI_Callback+0x16>
	case (GPIO_PIN_1): {
		SPI_WIFI_ISR();
 8003968:	f7ff f8e2 	bl	8002b30 <SPI_WIFI_ISR>
		break;
 800396c:	e000      	b.n	8003970 <HAL_GPIO_EXTI_Callback+0x18>
	}
	default: {
		break;
 800396e:	bf00      	nop
	}
	}
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <SPI3_IRQHandler>:
/**
 * @brief  SPI3 line detection callback.
 * @param  None
 * @retval None
 */
void SPI3_IRQHandler(void) {
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi);
 800397c:	4802      	ldr	r0, [pc, #8]	; (8003988 <SPI3_IRQHandler+0x10>)
 800397e:	f005 f9fb 	bl	8008d78 <HAL_SPI_IRQHandler>
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20002a38 	.word	0x20002a38

0800398c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800399e:	f001 fce5 	bl	800536c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40014800 	.word	0x40014800

080039b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039b4:	b672      	cpsid	i
}
 80039b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80039b8:	e7fe      	b.n	80039b8 <Error_Handler+0x8>
	...

080039bc <HAL_SPI_MspInit>:
  /* USER CODE END SPI3_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	609a      	str	r2, [r3, #8]
 80039d0:	60da      	str	r2, [r3, #12]
 80039d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <HAL_SPI_MspInit+0x7c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d128      	bne.n	8003a30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_SPI_MspInit+0x80>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_SPI_MspInit+0x80>)
 80039e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e8:	6593      	str	r3, [r2, #88]	; 0x58
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <HAL_SPI_MspInit+0x80>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_SPI_MspInit+0x80>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <HAL_SPI_MspInit+0x80>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_SPI_MspInit+0x80>)
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003a0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a20:	2306      	movs	r3, #6
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <HAL_SPI_MspInit+0x84>)
 8003a2c:	f001 fe06 	bl	800563c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003a30:	bf00      	nop
 8003a32:	3728      	adds	r7, #40	; 0x28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40003c00 	.word	0x40003c00
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	48000800 	.word	0x48000800

08003a44 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a08      	ldr	r2, [pc, #32]	; (8003a74 <HAL_SPI_MspDeInit+0x30>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10a      	bne.n	8003a6c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_SPI_MspDeInit+0x34>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <HAL_SPI_MspDeInit+0x34>)
 8003a5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a60:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8003a62:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8003a66:	4805      	ldr	r0, [pc, #20]	; (8003a7c <HAL_SPI_MspDeInit+0x38>)
 8003a68:	f001 ff92 	bl	8005990 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40003c00 	.word	0x40003c00
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	48000800 	.word	0x48000800

08003a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	4b11      	ldr	r3, [pc, #68]	; (8003acc <HAL_MspInit+0x4c>)
 8003a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <HAL_MspInit+0x4c>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6613      	str	r3, [r2, #96]	; 0x60
 8003a92:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <HAL_MspInit+0x4c>)
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_MspInit+0x4c>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <HAL_MspInit+0x4c>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_MspInit+0x4c>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	210f      	movs	r1, #15
 8003aba:	f06f 0001 	mvn.w	r0, #1
 8003abe:	f001 fd51 	bl	8005564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000

08003ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	201a      	movs	r0, #26
 8003ae6:	f001 fd3d 	bl	8005564 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8003aea:	201a      	movs	r0, #26
 8003aec:	f001 fd56 	bl	800559c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_InitTick+0x9c>)
 8003af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_InitTick+0x9c>)
 8003af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afa:	6613      	str	r3, [r2, #96]	; 0x60
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_InitTick+0x9c>)
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b08:	f107 0210 	add.w	r2, r7, #16
 8003b0c:	f107 0314 	add.w	r3, r7, #20
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f003 fbcc 	bl	80072b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b18:	f003 fbb4 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 8003b1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <HAL_InitTick+0xa0>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0c9b      	lsrs	r3, r3, #18
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_InitTick+0xa4>)
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <HAL_InitTick+0xa8>)
 8003b30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_InitTick+0xa4>)
 8003b34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b38:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <HAL_InitTick+0xa4>)
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_InitTick+0xa4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_InitTick+0xa4>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8003b4c:	4809      	ldr	r0, [pc, #36]	; (8003b74 <HAL_InitTick+0xa4>)
 8003b4e:	f005 ff8e 	bl	8009a6e <HAL_TIM_Base_Init>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8003b58:	4806      	ldr	r0, [pc, #24]	; (8003b74 <HAL_InitTick+0xa4>)
 8003b5a:	f005 ffe9 	bl	8009b30 <HAL_TIM_Base_Start_IT>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	e000      	b.n	8003b64 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3730      	adds	r7, #48	; 0x30
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	431bde83 	.word	0x431bde83
 8003b74:	20002ae4 	.word	0x20002ae4
 8003b78:	40014800 	.word	0x40014800

08003b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b80:	e7fe      	b.n	8003b80 <NMI_Handler+0x4>

08003b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b86:	e7fe      	b.n	8003b86 <HardFault_Handler+0x4>

08003b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b8c:	e7fe      	b.n	8003b8c <MemManage_Handler+0x4>

08003b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <BusFault_Handler+0x4>

08003b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b98:	e7fe      	b.n	8003b98 <UsageFault_Handler+0x4>

08003b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003bac:	2020      	movs	r0, #32
 8003bae:	f002 f813 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003bb2:	2040      	movs	r0, #64	; 0x40
 8003bb4:	f002 f810 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D11_Pin);
 8003bb8:	2080      	movs	r0, #128	; 0x80
 8003bba:	f002 f80d 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ISM43362_RST_Pin);
 8003bbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bc2:	f002 f809 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8003bd2:	f006 f81d 	bl	8009c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20002ae4 	.word	0x20002ae4

08003be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_CLK_Pin);
 8003be4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003be8:	f001 fff6 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUADSPI_NCS_Pin);
 8003bec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003bf0:	f001 fff2 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO2_Pin);
 8003bf4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003bf8:	f001 ffee 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(QUAD_SPI_BK1_IO3_Pin);
 8003bfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c00:	f001 ffea 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f001 ffe3 	bl	8005bd8 <HAL_GPIO_EXTI_IRQHandler>
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
	return 1;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_kill>:

int _kill(int pid, int sig)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c30:	f009 fbf4 	bl	800d41c <__errno>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2216      	movs	r2, #22
 8003c38:	601a      	str	r2, [r3, #0]
	return -1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_exit>:

void _exit (int status)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffe7 	bl	8003c26 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c58:	e7fe      	b.n	8003c58 <_exit+0x12>

08003c5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e00a      	b.n	8003c82 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c6c:	f7ff fe5c 	bl	8003928 <__io_getchar>
 8003c70:	4601      	mov	r1, r0
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	60ba      	str	r2, [r7, #8]
 8003c78:	b2ca      	uxtb	r2, r1
 8003c7a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	dbf0      	blt.n	8003c6c <_read+0x12>
	}

return len;
 8003c8a:	687b      	ldr	r3, [r7, #4]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e009      	b.n	8003cba <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	60ba      	str	r2, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fe28 	bl	8003904 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	dbf1      	blt.n	8003ca6 <_write+0x12>
	}
	return len;
 8003cc2:	687b      	ldr	r3, [r7, #4]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_close>:

int _close(int file)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	return -1;
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cf4:	605a      	str	r2, [r3, #4]
	return 0;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_isatty>:

int _isatty(int file)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	return 1;
 8003d0c:	2301      	movs	r3, #1
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
	return 0;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d3c:	4a14      	ldr	r2, [pc, #80]	; (8003d90 <_sbrk+0x5c>)
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <_sbrk+0x60>)
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d48:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <_sbrk+0x64>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <_sbrk+0x64>)
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <_sbrk+0x68>)
 8003d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <_sbrk+0x64>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d207      	bcs.n	8003d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d64:	f009 fb5a 	bl	800d41c <__errno>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	220c      	movs	r2, #12
 8003d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d72:	e009      	b.n	8003d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <_sbrk+0x64>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <_sbrk+0x64>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <_sbrk+0x64>)
 8003d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d86:	68fb      	ldr	r3, [r7, #12]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20018000 	.word	0x20018000
 8003d94:	00000400 	.word	0x00000400
 8003d98:	20000598 	.word	0x20000598
 8003d9c:	20003518 	.word	0x20003518

08003da0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <SystemInit+0x20>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <SystemInit+0x20>)
 8003dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b0ae      	sub	sp, #184	; 0xb8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ddc:	f107 031c 	add.w	r3, r7, #28
 8003de0:	2288      	movs	r2, #136	; 0x88
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f009 fc4a 	bl	800d67e <memset>
  if(uartHandle->Instance==USART1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a42      	ldr	r2, [pc, #264]	; (8003ef8 <HAL_UART_MspInit+0x134>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d13b      	bne.n	8003e6c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003df4:	2301      	movs	r3, #1
 8003df6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	4618      	mov	r0, r3
 8003e02:	f003 fae7 	bl	80073d4 <HAL_RCCEx_PeriphCLKConfig>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e0c:	f7ff fdd0 	bl	80039b0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e10:	4b3a      	ldr	r3, [pc, #232]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e14:	4a39      	ldr	r2, [pc, #228]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e1a:	6613      	str	r3, [r2, #96]	; 0x60
 8003e1c:	4b37      	ldr	r3, [pc, #220]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e28:	4b34      	ldr	r3, [pc, #208]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2c:	4a33      	ldr	r2, [pc, #204]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e34:	4b31      	ldr	r3, [pc, #196]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003e40:	23c0      	movs	r3, #192	; 0xc0
 8003e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e46:	2302      	movs	r3, #2
 8003e48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e52:	2303      	movs	r3, #3
 8003e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e58:	2307      	movs	r3, #7
 8003e5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4826      	ldr	r0, [pc, #152]	; (8003f00 <HAL_UART_MspInit+0x13c>)
 8003e66:	f001 fbe9 	bl	800563c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003e6a:	e040      	b.n	8003eee <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <HAL_UART_MspInit+0x140>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d13b      	bne.n	8003eee <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003e76:	2304      	movs	r3, #4
 8003e78:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e7e:	f107 031c 	add.w	r3, r7, #28
 8003e82:	4618      	mov	r0, r3
 8003e84:	f003 faa6 	bl	80073d4 <HAL_RCCEx_PeriphCLKConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8003e8e:	f7ff fd8f 	bl	80039b0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e92:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	4a19      	ldr	r2, [pc, #100]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9e:	4b17      	ldr	r3, [pc, #92]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003eb0:	f043 0308 	orr.w	r3, r3, #8
 8003eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <HAL_UART_MspInit+0x138>)
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003edc:	2307      	movs	r3, #7
 8003ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ee2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4807      	ldr	r0, [pc, #28]	; (8003f08 <HAL_UART_MspInit+0x144>)
 8003eea:	f001 fba7 	bl	800563c <HAL_GPIO_Init>
}
 8003eee:	bf00      	nop
 8003ef0:	37b8      	adds	r7, #184	; 0xb8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40013800 	.word	0x40013800
 8003efc:	40021000 	.word	0x40021000
 8003f00:	48000400 	.word	0x48000400
 8003f04:	40004800 	.word	0x40004800
 8003f08:	48000c00 	.word	0x48000c00

08003f0c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8003f16:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <WIFI_Init+0x40>)
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <WIFI_Init+0x44>)
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <WIFI_Init+0x48>)
 8003f20:	4a0d      	ldr	r2, [pc, #52]	; (8003f58 <WIFI_Init+0x4c>)
 8003f22:	490e      	ldr	r1, [pc, #56]	; (8003f5c <WIFI_Init+0x50>)
 8003f24:	480e      	ldr	r0, [pc, #56]	; (8003f60 <WIFI_Init+0x54>)
 8003f26:	f7fd ff6b 	bl	8001e00 <ES_WIFI_RegisterBusIO>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003f30:	480b      	ldr	r0, [pc, #44]	; (8003f60 <WIFI_Init+0x54>)
 8003f32:	f7fd ff37 	bl	8001da4 <ES_WIFI_Init>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8003f40:	79fb      	ldrb	r3, [r7, #7]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	08002855 	.word	0x08002855
 8003f50:	08002949 	.word	0x08002949
 8003f54:	08002a25 	.word	0x08002a25
 8003f58:	0800273d 	.word	0x0800273d
 8003f5c:	080025a1 	.word	0x080025a1
 8003f60:	20002b30 	.word	0x20002b30

08003f64 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	4809      	ldr	r0, [pc, #36]	; (8003fa4 <WIFI_Connect+0x40>)
 8003f7e:	f7fd ff73 	bl	8001e68 <ES_WIFI_Connect>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003f88:	4806      	ldr	r0, [pc, #24]	; (8003fa4 <WIFI_Connect+0x40>)
 8003f8a:	f7fe f811 	bl	8001fb0 <ES_WIFI_GetNetworkSettings>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20002b30 	.word	0x20002b30

08003fa8 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4806      	ldr	r0, [pc, #24]	; (8003fd0 <WIFI_GetMAC_Address+0x28>)
 8003fb8:	f7fe f824 	bl	8002004 <ES_WIFI_GetMACAddress>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20002b30 	.word	0x20002b30

08003fd4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8003fe0:	4809      	ldr	r0, [pc, #36]	; (8004008 <WIFI_GetIP_Address+0x34>)
 8003fe2:	f7fd ffb9 	bl	8001f58 <ES_WIFI_IsConnected>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d107      	bne.n	8003ffc <WIFI_GetIP_Address+0x28>
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <WIFI_GetIP_Address+0x34>)
 8003fee:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8003ff2:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20002b30 	.word	0x20002b30

0800400c <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	460b      	mov	r3, r1
 800401a:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 8004028:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800402a:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800402c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800402e:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004030:	7afb      	ldrb	r3, [r7, #11]
 8004032:	2b00      	cmp	r3, #0
 8004034:	bf14      	ite	ne
 8004036:	2301      	movne	r3, #1
 8004038:	2300      	moveq	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	785b      	ldrb	r3, [r3, #1]
 8004048:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	789b      	ldrb	r3, [r3, #2]
 800404e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	78db      	ldrb	r3, [r3, #3]
 8004054:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004056:	f107 0310 	add.w	r3, r7, #16
 800405a:	4619      	mov	r1, r3
 800405c:	4807      	ldr	r0, [pc, #28]	; (800407c <WIFI_OpenClientConnection+0x70>)
 800405e:	f7fe f803 	bl	8002068 <ES_WIFI_StartClientConnection>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800406e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004072:	4618      	mov	r0, r3
 8004074:	3728      	adds	r7, #40	; 0x28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20002b30 	.word	0x20002b30

08004080 <WIFI_CloseClientConnection>:
/**
  * @brief  Close client connection
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	727b      	strb	r3, [r7, #9]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004092:	f107 0308 	add.w	r3, r7, #8
 8004096:	4619      	mov	r1, r3
 8004098:	4806      	ldr	r0, [pc, #24]	; (80040b4 <WIFI_CloseClientConnection+0x34>)
 800409a:	f7fe f8cf 	bl	800223c <ES_WIFI_StopClientConnection>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 80040a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20002b30 	.word	0x20002b30

080040b8 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
 80040c6:	4613      	mov	r3, r2
 80040c8:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80040ce:	89ba      	ldrh	r2, [r7, #12]
 80040d0:	7bf9      	ldrb	r1, [r7, #15]
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	9301      	str	r3, [sp, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	4806      	ldr	r0, [pc, #24]	; (80040f8 <WIFI_SendData+0x40>)
 80040e0:	f7fe f8e6 	bl	80022b0 <ES_WIFI_SendData>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20002b30 	.word	0x20002b30

080040fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80040fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004134 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004100:	f7ff fe4e 	bl	8003da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004104:	480c      	ldr	r0, [pc, #48]	; (8004138 <LoopForever+0x6>)
  ldr r1, =_edata
 8004106:	490d      	ldr	r1, [pc, #52]	; (800413c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004108:	4a0d      	ldr	r2, [pc, #52]	; (8004140 <LoopForever+0xe>)
  movs r3, #0
 800410a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800410c:	e002      	b.n	8004114 <LoopCopyDataInit>

0800410e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800410e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004112:	3304      	adds	r3, #4

08004114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004118:	d3f9      	bcc.n	800410e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800411a:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800411c:	4c0a      	ldr	r4, [pc, #40]	; (8004148 <LoopForever+0x16>)
  movs r3, #0
 800411e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004120:	e001      	b.n	8004126 <LoopFillZerobss>

08004122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004124:	3204      	adds	r2, #4

08004126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004128:	d3fb      	bcc.n	8004122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800412a:	f009 fa73 	bl	800d614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800412e:	f7ff f959 	bl	80033e4 <main>

08004132 <LoopForever>:

LoopForever:
    b LoopForever
 8004132:	e7fe      	b.n	8004132 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004134:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800413c:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8004140:	080112b0 	.word	0x080112b0
  ldr r2, =_sbss
 8004144:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8004148:	20003514 	.word	0x20003514

0800414c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800414c:	e7fe      	b.n	800414c <ADC1_2_IRQHandler>
	...

08004150 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	6039      	str	r1, [r7, #0]
 800415a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <BSP_COM_Init+0x2a>
 8004162:	4b2d      	ldr	r3, [pc, #180]	; (8004218 <BSP_COM_Init+0xc8>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4a2c      	ldr	r2, [pc, #176]	; (8004218 <BSP_COM_Init+0xc8>)
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <BSP_COM_Init+0xc8>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 800417a:	79fb      	ldrb	r3, [r7, #7]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10b      	bne.n	8004198 <BSP_COM_Init+0x48>
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <BSP_COM_Init+0xc8>)
 8004182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004184:	4a24      	ldr	r2, [pc, #144]	; (8004218 <BSP_COM_Init+0xc8>)
 8004186:	f043 0302 	orr.w	r3, r3, #2
 800418a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <BSP_COM_Init+0xc8>)
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <BSP_COM_Init+0x66>
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <BSP_COM_Init+0xc8>)
 80041a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <BSP_COM_Init+0xc8>)
 80041a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a8:	6613      	str	r3, [r2, #96]	; 0x60
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <BSP_COM_Init+0xc8>)
 80041ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 80041b6:	2340      	movs	r3, #64	; 0x40
 80041b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80041be:	2302      	movs	r3, #2
 80041c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 80041c6:	2307      	movs	r3, #7
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	4a13      	ldr	r2, [pc, #76]	; (800421c <BSP_COM_Init+0xcc>)
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	f107 0214 	add.w	r2, r7, #20
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 fa2f 	bl	800563c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80041e2:	2302      	movs	r3, #2
 80041e4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 80041e6:	2307      	movs	r3, #7
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	4a0c      	ldr	r2, [pc, #48]	; (8004220 <BSP_COM_Init+0xd0>)
 80041ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f2:	f107 0214 	add.w	r2, r7, #20
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 fa1f 	bl	800563c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <BSP_COM_Init+0xd4>)
 8004202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800420a:	6838      	ldr	r0, [r7, #0]
 800420c:	f005 ff00 	bl	800a010 <HAL_UART_Init>
}
 8004210:	bf00      	nop
 8004212:	3728      	adds	r7, #40	; 0x28
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000
 800421c:	2000000c 	.word	0x2000000c
 8004220:	20000010 	.word	0x20000010
 8004224:	20000008 	.word	0x20000008

08004228 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <I2Cx_MspInit+0xa8>)
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <I2Cx_MspInit+0xa8>)
 8004236:	f043 0302 	orr.w	r3, r3, #2
 800423a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <I2Cx_MspInit+0xa8>)
 800423e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8004248:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800424c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800424e:	2312      	movs	r3, #18
 8004250:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8004252:	2301      	movs	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004256:	2303      	movs	r3, #3
 8004258:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800425a:	2304      	movs	r3, #4
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	4619      	mov	r1, r3
 8004264:	481b      	ldr	r0, [pc, #108]	; (80042d4 <I2Cx_MspInit+0xac>)
 8004266:	f001 f9e9 	bl	800563c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4619      	mov	r1, r3
 8004270:	4818      	ldr	r0, [pc, #96]	; (80042d4 <I2Cx_MspInit+0xac>)
 8004272:	f001 f9e3 	bl	800563c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <I2Cx_MspInit+0xa8>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <I2Cx_MspInit+0xa8>)
 800427c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004280:	6593      	str	r3, [r2, #88]	; 0x58
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <I2Cx_MspInit+0xa8>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <I2Cx_MspInit+0xa8>)
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <I2Cx_MspInit+0xa8>)
 8004294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004298:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <I2Cx_MspInit+0xa8>)
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <I2Cx_MspInit+0xa8>)
 80042a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80042a6:	2200      	movs	r2, #0
 80042a8:	210f      	movs	r1, #15
 80042aa:	2021      	movs	r0, #33	; 0x21
 80042ac:	f001 f95a 	bl	8005564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80042b0:	2021      	movs	r0, #33	; 0x21
 80042b2:	f001 f973 	bl	800559c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80042b6:	2200      	movs	r2, #0
 80042b8:	210f      	movs	r1, #15
 80042ba:	2022      	movs	r0, #34	; 0x22
 80042bc:	f001 f952 	bl	8005564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80042c0:	2022      	movs	r0, #34	; 0x22
 80042c2:	f001 f96b 	bl	800559c <HAL_NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3728      	adds	r7, #40	; 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	48000400 	.word	0x48000400

080042d8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <I2Cx_Init+0x54>)
 80042e4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a11      	ldr	r2, [pc, #68]	; (8004330 <I2Cx_Init+0x58>)
 80042ea:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff89 	bl	8004228 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 fc76 	bl	8005c08 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800431c:	2100      	movs	r1, #0
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f002 f97a 	bl	8006618 <HAL_I2CEx_ConfigAnalogFilter>
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40005800 	.word	0x40005800
 8004330:	00702681 	.word	0x00702681

08004334 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af04      	add	r7, sp, #16
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	72fb      	strb	r3, [r7, #11]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004352:	7afb      	ldrb	r3, [r7, #11]
 8004354:	b299      	uxth	r1, r3
 8004356:	88f8      	ldrh	r0, [r7, #6]
 8004358:	893a      	ldrh	r2, [r7, #8]
 800435a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800435e:	9302      	str	r3, [sp, #8]
 8004360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	4603      	mov	r3, r0
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f001 fe1e 	bl	8005fac <HAL_I2C_Mem_Read>
 8004370:	4603      	mov	r3, r0
 8004372:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800437a:	7afb      	ldrb	r3, [r7, #11]
 800437c:	4619      	mov	r1, r3
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f832 	bl	80043e8 <I2Cx_Error>
  }
  return status;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b08a      	sub	sp, #40	; 0x28
 8004392:	af04      	add	r7, sp, #16
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	4608      	mov	r0, r1
 8004398:	4611      	mov	r1, r2
 800439a:	461a      	mov	r2, r3
 800439c:	4603      	mov	r3, r0
 800439e:	72fb      	strb	r3, [r7, #11]
 80043a0:	460b      	mov	r3, r1
 80043a2:	813b      	strh	r3, [r7, #8]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	b299      	uxth	r1, r3
 80043b0:	88f8      	ldrh	r0, [r7, #6]
 80043b2:	893a      	ldrh	r2, [r7, #8]
 80043b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b8:	9302      	str	r3, [sp, #8]
 80043ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	4603      	mov	r3, r0
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f001 fcdd 	bl	8005d84 <HAL_I2C_Mem_Write>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80043ce:	7dfb      	ldrb	r3, [r7, #23]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	4619      	mov	r1, r3
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f805 	bl	80043e8 <I2Cx_Error>
  }
  return status;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f001 fc96 	bl	8005d26 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff ff6c 	bl	80042d8 <I2Cx_Init>
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800440c:	4802      	ldr	r0, [pc, #8]	; (8004418 <SENSOR_IO_Init+0x10>)
 800440e:	f7ff ff63 	bl	80042d8 <I2Cx_Init>
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200034b4 	.word	0x200034b4

0800441c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af02      	add	r7, sp, #8
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
 8004426:	460b      	mov	r3, r1
 8004428:	71bb      	strb	r3, [r7, #6]
 800442a:	4613      	mov	r3, r2
 800442c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800442e:	79bb      	ldrb	r3, [r7, #6]
 8004430:	b29a      	uxth	r2, r3
 8004432:	79f9      	ldrb	r1, [r7, #7]
 8004434:	2301      	movs	r3, #1
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	1d7b      	adds	r3, r7, #5
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2301      	movs	r3, #1
 800443e:	4803      	ldr	r0, [pc, #12]	; (800444c <SENSOR_IO_Write+0x30>)
 8004440:	f7ff ffa5 	bl	800438e <I2Cx_WriteMultiple>
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	200034b4 	.word	0x200034b4

08004450 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af02      	add	r7, sp, #8
 8004456:	4603      	mov	r3, r0
 8004458:	460a      	mov	r2, r1
 800445a:	71fb      	strb	r3, [r7, #7]
 800445c:	4613      	mov	r3, r2
 800445e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004464:	79bb      	ldrb	r3, [r7, #6]
 8004466:	b29a      	uxth	r2, r3
 8004468:	79f9      	ldrb	r1, [r7, #7]
 800446a:	2301      	movs	r3, #1
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	f107 030f 	add.w	r3, r7, #15
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	2301      	movs	r3, #1
 8004476:	4804      	ldr	r0, [pc, #16]	; (8004488 <SENSOR_IO_Read+0x38>)
 8004478:	f7ff ff5c 	bl	8004334 <I2Cx_ReadMultiple>

  return read_value;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200034b4 	.word	0x200034b4

0800448c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af02      	add	r7, sp, #8
 8004492:	603a      	str	r2, [r7, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
 800449a:	460b      	mov	r3, r1
 800449c:	71bb      	strb	r3, [r7, #6]
 800449e:	4613      	mov	r3, r2
 80044a0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80044a2:	79bb      	ldrb	r3, [r7, #6]
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	79f9      	ldrb	r1, [r7, #7]
 80044a8:	88bb      	ldrh	r3, [r7, #4]
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2301      	movs	r3, #1
 80044b2:	4804      	ldr	r0, [pc, #16]	; (80044c4 <SENSOR_IO_ReadMultiple+0x38>)
 80044b4:	f7ff ff3e 	bl	8004334 <I2Cx_ReadMultiple>
 80044b8:	4603      	mov	r3, r0
 80044ba:	b29b      	uxth	r3, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200034b4 	.word	0x200034b4

080044c8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80044d2:	2300      	movs	r3, #0
 80044d4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <BSP_ACCELERO_Init+0x74>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	4798      	blx	r3
 80044dc:	4603      	mov	r3, r0
 80044de:	2b6a      	cmp	r3, #106	; 0x6a
 80044e0:	d002      	beq.n	80044e8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
 80044e6:	e024      	b.n	8004532 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <BSP_ACCELERO_Init+0x78>)
 80044ea:	4a14      	ldr	r2, [pc, #80]	; (800453c <BSP_ACCELERO_Init+0x74>)
 80044ec:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80044ee:	2330      	movs	r3, #48	; 0x30
 80044f0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80044f6:	2300      	movs	r3, #0
 80044f8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80044fa:	2340      	movs	r3, #64	; 0x40
 80044fc:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8004506:	797a      	ldrb	r2, [r7, #5]
 8004508:	7abb      	ldrb	r3, [r7, #10]
 800450a:	4313      	orrs	r3, r2
 800450c:	b2db      	uxtb	r3, r3
 800450e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004510:	7a3b      	ldrb	r3, [r7, #8]
 8004512:	f043 0304 	orr.w	r3, r3, #4
 8004516:	b2db      	uxtb	r3, r3
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	b21a      	sxth	r2, r3
 800451c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	b21b      	sxth	r3, r3
 8004524:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <BSP_ACCELERO_Init+0x78>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	89ba      	ldrh	r2, [r7, #12]
 800452e:	4610      	mov	r0, r2
 8004530:	4798      	blx	r3
  }  

  return ret;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000070 	.word	0x20000070
 8004540:	2000059c 	.word	0x2000059c

08004544 <BSP_ACCELERO_DeInit>:
/**
  * @brief  DeInitialize the ACCELERO.
  * @retval None.
  */
void BSP_ACCELERO_DeInit(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* DeInitialize the accelerometer IO interfaces */
  if(AccelerometerDrv != NULL)
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <BSP_ACCELERO_DeInit+0x24>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <BSP_ACCELERO_DeInit+0x1e>
  {
    if(AccelerometerDrv->DeInit != NULL)
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <BSP_ACCELERO_DeInit+0x24>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <BSP_ACCELERO_DeInit+0x1e>
    {
      AccelerometerDrv->DeInit();
 800455a:	4b03      	ldr	r3, [pc, #12]	; (8004568 <BSP_ACCELERO_DeInit+0x24>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4798      	blx	r3
    }
  }
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	2000059c 	.word	0x2000059c

0800456c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8004574:	4b08      	ldr	r3, [pc, #32]	; (8004598 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	4798      	blx	r3
    }
  }
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	2000059c 	.word	0x2000059c

0800459c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80045a6:	2300      	movs	r3, #0
 80045a8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80045aa:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <BSP_GYRO_Init+0x7c>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	4798      	blx	r3
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b6a      	cmp	r3, #106	; 0x6a
 80045b4:	d002      	beq.n	80045bc <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e028      	b.n	800460e <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80045bc:	4b17      	ldr	r3, [pc, #92]	; (800461c <BSP_GYRO_Init+0x80>)
 80045be:	4a16      	ldr	r2, [pc, #88]	; (8004618 <BSP_GYRO_Init+0x7c>)
 80045c0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80045c6:	2330      	movs	r3, #48	; 0x30
 80045c8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80045d2:	2340      	movs	r3, #64	; 0x40
 80045d4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80045da:	230c      	movs	r3, #12
 80045dc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80045de:	7aba      	ldrb	r2, [r7, #10]
 80045e0:	797b      	ldrb	r3, [r7, #5]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80045e8:	7a3b      	ldrb	r3, [r7, #8]
 80045ea:	f043 0304 	orr.w	r3, r3, #4
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	b21a      	sxth	r2, r3
 80045f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b21b      	sxth	r3, r3
 80045fc:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <BSP_GYRO_Init+0x80>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	89ba      	ldrh	r2, [r7, #12]
 8004606:	4610      	mov	r0, r2
 8004608:	4798      	blx	r3
    
    ret = GYRO_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	200000a4 	.word	0x200000a4
 800461c:	200005a0 	.word	0x200005a0

08004620 <BSP_GYRO_DeInit>:

/**
  * @brief  DeInitialize Gyroscope.
  */
void BSP_GYRO_DeInit(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* DeInitialize the Gyroscope IO interfaces */
  if(GyroscopeDrv != NULL)
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <BSP_GYRO_DeInit+0x24>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <BSP_GYRO_DeInit+0x1e>
  {
    if(GyroscopeDrv->DeInit!= NULL)
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <BSP_GYRO_DeInit+0x24>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <BSP_GYRO_DeInit+0x1e>
    {
      GyroscopeDrv->DeInit();
 8004636:	4b03      	ldr	r3, [pc, #12]	; (8004644 <BSP_GYRO_DeInit+0x24>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4798      	blx	r3
    }
  }
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200005a0 	.word	0x200005a0

08004648 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <BSP_GYRO_GetXYZ+0x2c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <BSP_GYRO_GetXYZ+0x2c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8004662:	4b04      	ldr	r3, [pc, #16]	; (8004674 <BSP_GYRO_GetXYZ+0x2c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	200005a0 	.word	0x200005a0

08004678 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <BSP_HSENSOR_Init+0x38>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	20be      	movs	r0, #190	; 0xbe
 8004684:	4798      	blx	r3
 8004686:	4603      	mov	r3, r0
 8004688:	2bbc      	cmp	r3, #188	; 0xbc
 800468a:	d002      	beq.n	8004692 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	e009      	b.n	80046a6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <BSP_HSENSOR_Init+0x3c>)
 8004694:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <BSP_HSENSOR_Init+0x38>)
 8004696:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <BSP_HSENSOR_Init+0x3c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	20be      	movs	r0, #190	; 0xbe
 80046a0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80046a6:	687b      	ldr	r3, [r7, #4]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000014 	.word	0x20000014
 80046b4:	200005a4 	.word	0x200005a4

080046b8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <BSP_HSENSOR_ReadHumidity+0x18>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	20be      	movs	r0, #190	; 0xbe
 80046c4:	4798      	blx	r3
 80046c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80046ca:	eeb0 0a67 	vmov.f32	s0, s15
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	200005a4 	.word	0x200005a4

080046d4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <BSP_MAGNETO_Init+0x50>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	4798      	blx	r3
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b3d      	cmp	r3, #61	; 0x3d
 80046e8:	d002      	beq.n	80046f0 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	71fb      	strb	r3, [r7, #7]
 80046ee:	e013      	b.n	8004718 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80046f0:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <BSP_MAGNETO_Init+0x54>)
 80046f2:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <BSP_MAGNETO_Init+0x50>)
 80046f4:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80046f6:	2358      	movs	r3, #88	; 0x58
 80046f8:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80046fa:	2300      	movs	r3, #0
 80046fc:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80046fe:	2300      	movs	r3, #0
 8004700:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8004702:	2308      	movs	r3, #8
 8004704:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8004706:	2340      	movs	r3, #64	; 0x40
 8004708:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <BSP_MAGNETO_Init+0x54>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	463a      	mov	r2, r7
 8004712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004716:	4798      	blx	r3
  } 

  return ret;  
 8004718:	79fb      	ldrb	r3, [r7, #7]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000030 	.word	0x20000030
 8004728:	200005a8 	.word	0x200005a8

0800472c <BSP_MAGNETO_DeInit>:

/**
  * @brief  DeInitialize the MAGNETO.
  */
void BSP_MAGNETO_DeInit(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* DeInitialize the  magnetometer IO interfaces */
  if(MagnetoDrv != NULL)
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <BSP_MAGNETO_DeInit+0x24>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <BSP_MAGNETO_DeInit+0x1e>
  {
    if(MagnetoDrv->DeInit != NULL)
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <BSP_MAGNETO_DeInit+0x24>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <BSP_MAGNETO_DeInit+0x1e>
    {
      MagnetoDrv->DeInit();
 8004742:	4b03      	ldr	r3, [pc, #12]	; (8004750 <BSP_MAGNETO_DeInit+0x24>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4798      	blx	r3
    }
  }
}
 800474a:	bf00      	nop
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	200005a8 	.word	0x200005a8

08004754 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 800475c:	4b08      	ldr	r3, [pc, #32]	; (8004780 <BSP_MAGNETO_GetXYZ+0x2c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8004764:	4b06      	ldr	r3, [pc, #24]	; (8004780 <BSP_MAGNETO_GetXYZ+0x2c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800476e:	4b04      	ldr	r3, [pc, #16]	; (8004780 <BSP_MAGNETO_GetXYZ+0x2c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
    }
  }
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200005a8 	.word	0x200005a8

08004784 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <BSP_PSENSOR_Init+0x38>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	20ba      	movs	r0, #186	; 0xba
 8004790:	4798      	blx	r3
 8004792:	4603      	mov	r3, r0
 8004794:	2bb1      	cmp	r3, #177	; 0xb1
 8004796:	d002      	beq.n	800479e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	607b      	str	r3, [r7, #4]
 800479c:	e009      	b.n	80047b2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800479e:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <BSP_PSENSOR_Init+0x3c>)
 80047a0:	4a06      	ldr	r2, [pc, #24]	; (80047bc <BSP_PSENSOR_Init+0x38>)
 80047a2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <BSP_PSENSOR_Init+0x3c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	20ba      	movs	r0, #186	; 0xba
 80047ac:	4798      	blx	r3
    ret = PSENSOR_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80047b2:	687b      	ldr	r3, [r7, #4]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20000064 	.word	0x20000064
 80047c0:	200005ac 	.word	0x200005ac

080047c4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <BSP_PSENSOR_ReadPressure+0x18>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	20ba      	movs	r0, #186	; 0xba
 80047d0:	4798      	blx	r3
 80047d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80047d6:	eeb0 0a67 	vmov.f32	s0, s15
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	200005ac 	.word	0x200005ac

080047e0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <BSP_TSENSOR_Init+0x30>)
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <BSP_TSENSOR_Init+0x34>)
 80047ee:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80047f0:	f7ff fe0a 	bl	8004408 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <BSP_TSENSOR_Init+0x30>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2100      	movs	r1, #0
 80047fc:	20be      	movs	r0, #190	; 0xbe
 80047fe:	4798      	blx	r3

  ret = TSENSOR_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8004804:	79fb      	ldrb	r3, [r7, #7]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200005b0 	.word	0x200005b0
 8004814:	20000020 	.word	0x20000020

08004818 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800481c:	4b04      	ldr	r3, [pc, #16]	; (8004830 <BSP_TSENSOR_ReadTemp+0x18>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	20be      	movs	r0, #190	; 0xbe
 8004824:	4798      	blx	r3
 8004826:	eef0 7a40 	vmov.f32	s15, s0
}
 800482a:	eeb0 0a67 	vmov.f32	s0, s15
 800482e:	bd80      	pop	{r7, pc}
 8004830:	200005b0 	.word	0x200005b0

08004834 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2120      	movs	r1, #32
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fe03 	bl	8004450 <SENSOR_IO_Read>
 800484a:	4603      	mov	r3, r0
 800484c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	f023 0303 	bic.w	r3, r3, #3
 8004864:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004874:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	2120      	movs	r1, #32
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fdcc 	bl	800441c <SENSOR_IO_Write>
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800489a:	f7ff fdb5 	bl	8004408 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	210f      	movs	r1, #15
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff fdd3 	bl	8004450 <SENSOR_IO_Read>
 80048aa:	4603      	mov	r3, r0
 80048ac:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	b2d8      	uxtb	r0, r3
 80048c6:	f107 020c 	add.w	r2, r7, #12
 80048ca:	2302      	movs	r3, #2
 80048cc:	21b0      	movs	r1, #176	; 0xb0
 80048ce:	f7ff fddd 	bl	800448c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80048d2:	7b3b      	ldrb	r3, [r7, #12]
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80048da:	7b7b      	ldrb	r3, [r7, #13]
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	b2d8      	uxtb	r0, r3
 80048e6:	f107 020c 	add.w	r2, r7, #12
 80048ea:	2302      	movs	r3, #2
 80048ec:	21b6      	movs	r1, #182	; 0xb6
 80048ee:	f7ff fdcd 	bl	800448c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80048f2:	7b7b      	ldrb	r3, [r7, #13]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	b21a      	sxth	r2, r3
 80048f8:	7b3b      	ldrb	r3, [r7, #12]
 80048fa:	b21b      	sxth	r3, r3
 80048fc:	4313      	orrs	r3, r2
 80048fe:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	b2d8      	uxtb	r0, r3
 8004904:	f107 020c 	add.w	r2, r7, #12
 8004908:	2302      	movs	r3, #2
 800490a:	21ba      	movs	r1, #186	; 0xba
 800490c:	f7ff fdbe 	bl	800448c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004910:	7b7b      	ldrb	r3, [r7, #13]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	b21a      	sxth	r2, r3
 8004916:	7b3b      	ldrb	r3, [r7, #12]
 8004918:	b21b      	sxth	r3, r3
 800491a:	4313      	orrs	r3, r2
 800491c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	b2d8      	uxtb	r0, r3
 8004922:	f107 020c 	add.w	r2, r7, #12
 8004926:	2302      	movs	r3, #2
 8004928:	21a8      	movs	r1, #168	; 0xa8
 800492a:	f7ff fdaf 	bl	800448c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800492e:	7b7b      	ldrb	r3, [r7, #13]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	b21a      	sxth	r2, r3
 8004934:	7b3b      	ldrb	r3, [r7, #12]
 8004936:	b21b      	sxth	r3, r3
 8004938:	4313      	orrs	r3, r2
 800493a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800493c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004940:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800494e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004952:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	ee07 3a90 	vmov	s15, r3
 800495c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004960:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004964:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004968:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800498e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004992:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800499a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800499e:	edd7 7a04 	vldr	s15, [r7, #16]
 80049a2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80049e8 <HTS221_H_ReadHumidity+0x130>
 80049a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	dd01      	ble.n	80049b4 <HTS221_H_ReadHumidity+0xfc>
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HTS221_H_ReadHumidity+0x134>)
 80049b2:	e00a      	b.n	80049ca <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80049b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80049b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c0:	d502      	bpl.n	80049c8 <HTS221_H_ReadHumidity+0x110>
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e000      	b.n	80049ca <HTS221_H_ReadHumidity+0x112>
 80049c8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80049ca:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80049cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80049d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80049d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80049d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80049dc:	eeb0 0a67 	vmov.f32	s0, s15
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	447a0000 	.word	0x447a0000
 80049ec:	447a0000 	.word	0x447a0000

080049f0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2120      	movs	r1, #32
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fd24 	bl	8004450 <SENSOR_IO_Read>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	f023 0304 	bic.w	r3, r3, #4
 8004a12:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	f043 0301 	orr.w	r3, r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a32:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	2120      	movs	r1, #32
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fced 	bl	800441c <SENSOR_IO_Write>
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b088      	sub	sp, #32
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	4603      	mov	r3, r0
 8004a52:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	b2d8      	uxtb	r0, r3
 8004a58:	f107 0208 	add.w	r2, r7, #8
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	21b2      	movs	r1, #178	; 0xb2
 8004a60:	f7ff fd14 	bl	800448c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2135      	movs	r1, #53	; 0x35
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fcf0 	bl	8004450 <SENSOR_IO_Read>
 8004a70:	4603      	mov	r3, r0
 8004a72:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8004a74:	7ffb      	ldrb	r3, [r7, #31]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	b21b      	sxth	r3, r3
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	b21a      	sxth	r2, r3
 8004a80:	7a3b      	ldrb	r3, [r7, #8]
 8004a82:	b21b      	sxth	r3, r3
 8004a84:	4313      	orrs	r3, r2
 8004a86:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8004a88:	7ffb      	ldrb	r3, [r7, #31]
 8004a8a:	019b      	lsls	r3, r3, #6
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a92:	b21a      	sxth	r2, r3
 8004a94:	7a7b      	ldrb	r3, [r7, #9]
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8004a9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004aa0:	10db      	asrs	r3, r3, #3
 8004aa2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8004aa4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004aa8:	10db      	asrs	r3, r3, #3
 8004aaa:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	b2d8      	uxtb	r0, r3
 8004ab0:	f107 0208 	add.w	r2, r7, #8
 8004ab4:	2304      	movs	r3, #4
 8004ab6:	21bc      	movs	r1, #188	; 0xbc
 8004ab8:	f7ff fce8 	bl	800448c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004abc:	7a7b      	ldrb	r3, [r7, #9]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	b21a      	sxth	r2, r3
 8004ac2:	7a3b      	ldrb	r3, [r7, #8]
 8004ac4:	b21b      	sxth	r3, r3
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	b21a      	sxth	r2, r3
 8004ad0:	7abb      	ldrb	r3, [r7, #10]
 8004ad2:	b21b      	sxth	r3, r3
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	b2d8      	uxtb	r0, r3
 8004adc:	f107 0208 	add.w	r2, r7, #8
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	21aa      	movs	r1, #170	; 0xaa
 8004ae4:	f7ff fcd2 	bl	800448c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004ae8:	7a7b      	ldrb	r3, [r7, #9]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	b21a      	sxth	r2, r3
 8004aee:	7a3b      	ldrb	r3, [r7, #8]
 8004af0:	b21b      	sxth	r3, r3
 8004af2:	4313      	orrs	r3, r2
 8004af4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8004af6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004afa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004b0c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004b1e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004b22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b44:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	ee07 3a90 	vmov	s15, r3
}
 8004b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	463b      	mov	r3, r7
 8004b60:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8004b64:	783b      	ldrb	r3, [r7, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	2120      	movs	r1, #32
 8004b6a:	203c      	movs	r0, #60	; 0x3c
 8004b6c:	f7ff fc56 	bl	800441c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8004b70:	787b      	ldrb	r3, [r7, #1]
 8004b72:	461a      	mov	r2, r3
 8004b74:	2121      	movs	r1, #33	; 0x21
 8004b76:	203c      	movs	r0, #60	; 0x3c
 8004b78:	f7ff fc50 	bl	800441c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8004b7c:	78bb      	ldrb	r3, [r7, #2]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2122      	movs	r1, #34	; 0x22
 8004b82:	203c      	movs	r0, #60	; 0x3c
 8004b84:	f7ff fc4a 	bl	800441c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	2123      	movs	r1, #35	; 0x23
 8004b8e:	203c      	movs	r0, #60	; 0x3c
 8004b90:	f7ff fc44 	bl	800441c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8004b94:	793b      	ldrb	r3, [r7, #4]
 8004b96:	461a      	mov	r2, r3
 8004b98:	2124      	movs	r1, #36	; 0x24
 8004b9a:	203c      	movs	r0, #60	; 0x3c
 8004b9c:	f7ff fc3e 	bl	800441c <SENSOR_IO_Write>
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8004bb2:	2122      	movs	r1, #34	; 0x22
 8004bb4:	203c      	movs	r0, #60	; 0x3c
 8004bb6:	f7ff fc4b 	bl	8004450 <SENSOR_IO_Read>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	f023 0303 	bic.w	r3, r3, #3
 8004bc4:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	f043 0303 	orr.w	r3, r3, #3
 8004bcc:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2122      	movs	r1, #34	; 0x22
 8004bd4:	203c      	movs	r0, #60	; 0x3c
 8004bd6:	f7ff fc21 	bl	800441c <SENSOR_IO_Write>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004be6:	f7ff fc0f 	bl	8004408 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8004bea:	210f      	movs	r1, #15
 8004bec:	203c      	movs	r0, #60	; 0x3c
 8004bee:	f7ff fc2f 	bl	8004450 <SENSOR_IO_Read>
 8004bf2:	4603      	mov	r3, r0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8004c06:	2122      	movs	r1, #34	; 0x22
 8004c08:	203c      	movs	r0, #60	; 0x3c
 8004c0a:	f7ff fc21 	bl	8004450 <SENSOR_IO_Read>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	f023 0320 	bic.w	r3, r3, #32
 8004c18:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	f043 0320 	orr.w	r3, r3, #32
 8004c26:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2122      	movs	r1, #34	; 0x22
 8004c2e:	203c      	movs	r0, #60	; 0x3c
 8004c30:	f7ff fbf4 	bl	800441c <SENSOR_IO_Write>
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8004c52:	2121      	movs	r1, #33	; 0x21
 8004c54:	203c      	movs	r0, #60	; 0x3c
 8004c56:	f7ff fbfb 	bl	8004450 <SENSOR_IO_Read>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8004c5e:	f107 0208 	add.w	r2, r7, #8
 8004c62:	2306      	movs	r3, #6
 8004c64:	21a8      	movs	r1, #168	; 0xa8
 8004c66:	203c      	movs	r0, #60	; 0x3c
 8004c68:	f7ff fc10 	bl	800448c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e01f      	b.n	8004cb2 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	3301      	adds	r3, #1
 8004c78:	f107 0220 	add.w	r2, r7, #32
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	7ffb      	ldrb	r3, [r7, #31]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	f107 0120 	add.w	r1, r7, #32
 8004c90:	440b      	add	r3, r1
 8004c92:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	7ffb      	ldrb	r3, [r7, #31]
 8004c9e:	b212      	sxth	r2, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	f107 0120 	add.w	r1, r7, #32
 8004ca6:	440b      	add	r3, r1
 8004ca8:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004cac:	7ffb      	ldrb	r3, [r7, #31]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	7ffb      	ldrb	r3, [r7, #31]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d9dc      	bls.n	8004c72 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cbe:	2b60      	cmp	r3, #96	; 0x60
 8004cc0:	d013      	beq.n	8004cea <LIS3MDL_MagReadXYZ+0xae>
 8004cc2:	2b60      	cmp	r3, #96	; 0x60
 8004cc4:	dc14      	bgt.n	8004cf0 <LIS3MDL_MagReadXYZ+0xb4>
 8004cc6:	2b40      	cmp	r3, #64	; 0x40
 8004cc8:	d00c      	beq.n	8004ce4 <LIS3MDL_MagReadXYZ+0xa8>
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	dc10      	bgt.n	8004cf0 <LIS3MDL_MagReadXYZ+0xb4>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <LIS3MDL_MagReadXYZ+0x9c>
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d003      	beq.n	8004cde <LIS3MDL_MagReadXYZ+0xa2>
 8004cd6:	e00b      	b.n	8004cf0 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8004cd8:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <LIS3MDL_MagReadXYZ+0x104>)
 8004cda:	61bb      	str	r3, [r7, #24]
    break;
 8004cdc:	e008      	b.n	8004cf0 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <LIS3MDL_MagReadXYZ+0x108>)
 8004ce0:	61bb      	str	r3, [r7, #24]
    break;
 8004ce2:	e005      	b.n	8004cf0 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8004ce4:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <LIS3MDL_MagReadXYZ+0x10c>)
 8004ce6:	61bb      	str	r3, [r7, #24]
    break;
 8004ce8:	e002      	b.n	8004cf0 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8004cea:	4b18      	ldr	r3, [pc, #96]	; (8004d4c <LIS3MDL_MagReadXYZ+0x110>)
 8004cec:	61bb      	str	r3, [r7, #24]
    break;    
 8004cee:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e01b      	b.n	8004d2e <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004cf6:	7ffb      	ldrb	r3, [r7, #31]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	f107 0220 	add.w	r2, r7, #32
 8004cfe:	4413      	add	r3, r2
 8004d00:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8004d04:	ee07 3a90 	vmov	s15, r3
 8004d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d14:	7ffb      	ldrb	r3, [r7, #31]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d20:	ee17 2a90 	vmov	r2, s15
 8004d24:	b212      	sxth	r2, r2
 8004d26:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8004d28:	7ffb      	ldrb	r3, [r7, #31]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	7ffb      	ldrb	r3, [r7, #31]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d9e0      	bls.n	8004cf6 <LIS3MDL_MagReadXYZ+0xba>
  }
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	3e0f5c29 	.word	0x3e0f5c29
 8004d44:	3e947ae1 	.word	0x3e947ae1
 8004d48:	3edc28f6 	.word	0x3edc28f6
 8004d4c:	3f147ae1 	.word	0x3f147ae1

08004d50 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 f87b 	bl	8004e58 <LPS22HB_Init>
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	4603      	mov	r3, r0
 8004d72:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8004d78:	f7ff fb46 	bl	8004408 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	210f      	movs	r1, #15
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fb64 	bl	8004450 <SENSOR_IO_Read>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	74fb      	strb	r3, [r7, #19]
 8004daa:	e013      	b.n	8004dd4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	3328      	adds	r3, #40	; 0x28
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	7cfc      	ldrb	r4, [r7, #19]
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7ff fb48 	bl	8004450 <SENSOR_IO_Read>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f107 0318 	add.w	r3, r7, #24
 8004dc8:	4423      	add	r3, r4
 8004dca:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	74fb      	strb	r3, [r7, #19]
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d9e8      	bls.n	8004dac <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	74fb      	strb	r3, [r7, #19]
 8004dde:	e010      	b.n	8004e02 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	f107 0218 	add.w	r2, r7, #24
 8004de6:	4413      	add	r3, r2
 8004de8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004dec:	461a      	mov	r2, r3
 8004dee:	7cfb      	ldrb	r3, [r7, #19]
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	74fb      	strb	r3, [r7, #19]
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d9eb      	bls.n	8004de0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e18:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2264      	movs	r2, #100	; 0x64
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da01      	bge.n	8004e2e <LPS22HB_P_ReadPressure+0x96>
 8004e2a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8004e2e:	131b      	asrs	r3, r3, #12
 8004e30:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e3c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004e54 <LPS22HB_P_ReadPressure+0xbc>
 8004e40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e44:	eef0 7a66 	vmov.f32	s15, s13
}
 8004e48:	eeb0 0a67 	vmov.f32	s0, s15
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd90      	pop	{r4, r7, pc}
 8004e52:	bf00      	nop
 8004e54:	42c80000 	.word	0x42c80000

08004e58 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	211a      	movs	r1, #26
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff faf1 	bl	8004450 <SENSOR_IO_Read>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	7bfa      	ldrb	r2, [r7, #15]
 8004e88:	211a      	movs	r1, #26
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fac6 	bl	800441c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2110      	movs	r1, #16
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fada 	bl	8004450 <SENSOR_IO_Read>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004eae:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	f023 0302 	bic.w	r3, r3, #2
 8004eb6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	f043 0302 	orr.w	r3, r3, #2
 8004ebe:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	7bfa      	ldrb	r2, [r7, #15]
 8004ec6:	2110      	movs	r1, #16
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff faa7 	bl	800441c <SENSOR_IO_Write>
}  
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	4603      	mov	r3, r0
 8004ede:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004ee4:	2110      	movs	r1, #16
 8004ee6:	20d4      	movs	r0, #212	; 0xd4
 8004ee8:	f7ff fab2 	bl	8004450 <SENSOR_IO_Read>
 8004eec:	4603      	mov	r3, r0
 8004eee:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004ef4:	7bbb      	ldrb	r3, [r7, #14]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8004efc:	7bba      	ldrb	r2, [r7, #14]
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	461a      	mov	r2, r3
 8004f08:	2110      	movs	r1, #16
 8004f0a:	20d4      	movs	r0, #212	; 0xd4
 8004f0c:	f7ff fa86 	bl	800441c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004f10:	2112      	movs	r1, #18
 8004f12:	20d4      	movs	r0, #212	; 0xd4
 8004f14:	f7ff fa9c 	bl	8004450 <SENSOR_IO_Read>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004f24:	7bbb      	ldrb	r3, [r7, #14]
 8004f26:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8004f2a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004f2c:	7bba      	ldrb	r2, [r7, #14]
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004f34:	7bbb      	ldrb	r3, [r7, #14]
 8004f36:	461a      	mov	r2, r3
 8004f38:	2112      	movs	r1, #18
 8004f3a:	20d4      	movs	r0, #212	; 0xd4
 8004f3c:	f7ff fa6e 	bl	800441c <SENSOR_IO_Write>
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004f52:	2110      	movs	r1, #16
 8004f54:	20d4      	movs	r0, #212	; 0xd4
 8004f56:	f7ff fa7b 	bl	8004450 <SENSOR_IO_Read>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2110      	movs	r1, #16
 8004f6c:	20d4      	movs	r0, #212	; 0xd4
 8004f6e:	f7ff fa55 	bl	800441c <SENSOR_IO_Write>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004f7e:	f7ff fa43 	bl	8004408 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004f82:	210f      	movs	r1, #15
 8004f84:	20d4      	movs	r0, #212	; 0xd4
 8004f86:	f7ff fa63 	bl	8004450 <SENSOR_IO_Read>
 8004f8a:	4603      	mov	r3, r0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004f9e:	2115      	movs	r1, #21
 8004fa0:	20d4      	movs	r0, #212	; 0xd4
 8004fa2:	f7ff fa55 	bl	8004450 <SENSOR_IO_Read>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	f023 0310 	bic.w	r3, r3, #16
 8004fb0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	f043 0310 	orr.w	r3, r3, #16
 8004fbe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2115      	movs	r1, #21
 8004fc6:	20d4      	movs	r0, #212	; 0xd4
 8004fc8:	f7ff fa28 	bl	800441c <SENSOR_IO_Write>
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004fea:	2110      	movs	r1, #16
 8004fec:	20d4      	movs	r0, #212	; 0xd4
 8004fee:	f7ff fa2f 	bl	8004450 <SENSOR_IO_Read>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8004ff6:	f107 0208 	add.w	r2, r7, #8
 8004ffa:	2306      	movs	r3, #6
 8004ffc:	2128      	movs	r1, #40	; 0x28
 8004ffe:	20d4      	movs	r0, #212	; 0xd4
 8005000:	f7ff fa44 	bl	800448c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005004:	2300      	movs	r3, #0
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e01f      	b.n	800504a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800500a:	7ffb      	ldrb	r3, [r7, #31]
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	3301      	adds	r3, #1
 8005010:	f107 0220 	add.w	r2, r7, #32
 8005014:	4413      	add	r3, r2
 8005016:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800501a:	b29b      	uxth	r3, r3
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	b29a      	uxth	r2, r3
 8005020:	7ffb      	ldrb	r3, [r7, #31]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	f107 0120 	add.w	r1, r7, #32
 8005028:	440b      	add	r3, r1
 800502a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800502e:	b29b      	uxth	r3, r3
 8005030:	4413      	add	r3, r2
 8005032:	b29a      	uxth	r2, r3
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	b212      	sxth	r2, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	f107 0120 	add.w	r1, r7, #32
 800503e:	440b      	add	r3, r1
 8005040:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005044:	7ffb      	ldrb	r3, [r7, #31]
 8005046:	3301      	adds	r3, #1
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	7ffb      	ldrb	r3, [r7, #31]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d9dc      	bls.n	800500a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	f003 030c 	and.w	r3, r3, #12
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d828      	bhi.n	80050ac <LSM6DSL_AccReadXYZ+0xd8>
 800505a:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <LSM6DSL_AccReadXYZ+0x8c>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	08005095 	.word	0x08005095
 8005064:	080050ad 	.word	0x080050ad
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050ad 	.word	0x080050ad
 8005070:	080050a7 	.word	0x080050a7
 8005074:	080050ad 	.word	0x080050ad
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080050ad 	.word	0x080050ad
 8005080:	0800509b 	.word	0x0800509b
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050ad 	.word	0x080050ad
 8005090:	080050a1 	.word	0x080050a1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <LSM6DSL_AccReadXYZ+0x128>)
 8005096:	61bb      	str	r3, [r7, #24]
    break;
 8005098:	e008      	b.n	80050ac <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800509a:	4b19      	ldr	r3, [pc, #100]	; (8005100 <LSM6DSL_AccReadXYZ+0x12c>)
 800509c:	61bb      	str	r3, [r7, #24]
    break;
 800509e:	e005      	b.n	80050ac <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80050a0:	4b18      	ldr	r3, [pc, #96]	; (8005104 <LSM6DSL_AccReadXYZ+0x130>)
 80050a2:	61bb      	str	r3, [r7, #24]
    break;
 80050a4:	e002      	b.n	80050ac <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80050a6:	4b18      	ldr	r3, [pc, #96]	; (8005108 <LSM6DSL_AccReadXYZ+0x134>)
 80050a8:	61bb      	str	r3, [r7, #24]
    break;    
 80050aa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e01b      	b.n	80050ea <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80050b2:	7ffb      	ldrb	r3, [r7, #31]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	f107 0220 	add.w	r2, r7, #32
 80050ba:	4413      	add	r3, r2
 80050bc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80050cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d0:	7ffb      	ldrb	r3, [r7, #31]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050dc:	ee17 2a90 	vmov	r2, s15
 80050e0:	b212      	sxth	r2, r2
 80050e2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80050e4:	7ffb      	ldrb	r3, [r7, #31]
 80050e6:	3301      	adds	r3, #1
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	7ffb      	ldrb	r3, [r7, #31]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d9e0      	bls.n	80050b2 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	3d79db23 	.word	0x3d79db23
 8005100:	3df9db23 	.word	0x3df9db23
 8005104:	3e79db23 	.word	0x3e79db23
 8005108:	3ef9db23 	.word	0x3ef9db23

0800510c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800511a:	2111      	movs	r1, #17
 800511c:	20d4      	movs	r0, #212	; 0xd4
 800511e:	f7ff f997 	bl	8004450 <SENSOR_IO_Read>
 8005122:	4603      	mov	r3, r0
 8005124:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800512a:	7bbb      	ldrb	r3, [r7, #14]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8005132:	7bba      	ldrb	r2, [r7, #14]
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	4313      	orrs	r3, r2
 8005138:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800513a:	7bbb      	ldrb	r3, [r7, #14]
 800513c:	461a      	mov	r2, r3
 800513e:	2111      	movs	r1, #17
 8005140:	20d4      	movs	r0, #212	; 0xd4
 8005142:	f7ff f96b 	bl	800441c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8005146:	2112      	movs	r1, #18
 8005148:	20d4      	movs	r0, #212	; 0xd4
 800514a:	f7ff f981 	bl	8004450 <SENSOR_IO_Read>
 800514e:	4603      	mov	r3, r0
 8005150:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	b29b      	uxth	r3, r3
 8005158:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800515a:	7bbb      	ldrb	r3, [r7, #14]
 800515c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8005160:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8005162:	7bba      	ldrb	r2, [r7, #14]
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	4313      	orrs	r3, r2
 8005168:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800516a:	7bbb      	ldrb	r3, [r7, #14]
 800516c:	461a      	mov	r2, r3
 800516e:	2112      	movs	r1, #18
 8005170:	20d4      	movs	r0, #212	; 0xd4
 8005172:	f7ff f953 	bl	800441c <SENSOR_IO_Write>
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005184:	2300      	movs	r3, #0
 8005186:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005188:	2111      	movs	r1, #17
 800518a:	20d4      	movs	r0, #212	; 0xd4
 800518c:	f7ff f960 	bl	8004450 <SENSOR_IO_Read>
 8005190:	4603      	mov	r3, r0
 8005192:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	461a      	mov	r2, r3
 80051a0:	2111      	movs	r1, #17
 80051a2:	20d4      	movs	r0, #212	; 0xd4
 80051a4:	f7ff f93a 	bl	800441c <SENSOR_IO_Write>
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80051b4:	f7ff f928 	bl	8004408 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80051b8:	210f      	movs	r1, #15
 80051ba:	20d4      	movs	r0, #212	; 0xd4
 80051bc:	f7ff f948 	bl	8004450 <SENSOR_IO_Read>
 80051c0:	4603      	mov	r3, r0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	4603      	mov	r3, r0
 80051ce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80051d4:	2116      	movs	r1, #22
 80051d6:	20d4      	movs	r0, #212	; 0xd4
 80051d8:	f7ff f93a 	bl	8004450 <SENSOR_IO_Read>
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051f4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	461a      	mov	r2, r3
 80051fa:	2116      	movs	r1, #22
 80051fc:	20d4      	movs	r0, #212	; 0xd4
 80051fe:	f7ff f90d 	bl	800441c <SENSOR_IO_Write>
}
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8005214:	2300      	movs	r3, #0
 8005216:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8005222:	2111      	movs	r1, #17
 8005224:	20d4      	movs	r0, #212	; 0xd4
 8005226:	f7ff f913 	bl	8004450 <SENSOR_IO_Read>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800522e:	f107 0208 	add.w	r2, r7, #8
 8005232:	2306      	movs	r3, #6
 8005234:	2122      	movs	r1, #34	; 0x22
 8005236:	20d4      	movs	r0, #212	; 0xd4
 8005238:	f7ff f928 	bl	800448c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800523c:	2300      	movs	r3, #0
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e01f      	b.n	8005282 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005242:	7ffb      	ldrb	r3, [r7, #31]
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	3301      	adds	r3, #1
 8005248:	f107 0220 	add.w	r2, r7, #32
 800524c:	4413      	add	r3, r2
 800524e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005252:	b29b      	uxth	r3, r3
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	b29a      	uxth	r2, r3
 8005258:	7ffb      	ldrb	r3, [r7, #31]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	f107 0120 	add.w	r1, r7, #32
 8005260:	440b      	add	r3, r1
 8005262:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005266:	b29b      	uxth	r3, r3
 8005268:	4413      	add	r3, r2
 800526a:	b29a      	uxth	r2, r3
 800526c:	7ffb      	ldrb	r3, [r7, #31]
 800526e:	b212      	sxth	r2, r2
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	f107 0120 	add.w	r1, r7, #32
 8005276:	440b      	add	r3, r1
 8005278:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800527c:	7ffb      	ldrb	r3, [r7, #31]
 800527e:	3301      	adds	r3, #1
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d9dc      	bls.n	8005242 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d828      	bhi.n	80052e4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8005292:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052cd 	.word	0x080052cd
 800529c:	080052e5 	.word	0x080052e5
 80052a0:	080052e5 	.word	0x080052e5
 80052a4:	080052e5 	.word	0x080052e5
 80052a8:	080052d3 	.word	0x080052d3
 80052ac:	080052e5 	.word	0x080052e5
 80052b0:	080052e5 	.word	0x080052e5
 80052b4:	080052e5 	.word	0x080052e5
 80052b8:	080052d9 	.word	0x080052d9
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	080052e5 	.word	0x080052e5
 80052c8:	080052df 	.word	0x080052df
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80052cc:	4b17      	ldr	r3, [pc, #92]	; (800532c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80052ce:	61bb      	str	r3, [r7, #24]
    break;
 80052d0:	e008      	b.n	80052e4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80052d2:	4b17      	ldr	r3, [pc, #92]	; (8005330 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80052d4:	61bb      	str	r3, [r7, #24]
    break;
 80052d6:	e005      	b.n	80052e4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80052d8:	4b16      	ldr	r3, [pc, #88]	; (8005334 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 80052da:	61bb      	str	r3, [r7, #24]
    break;
 80052dc:	e002      	b.n	80052e4 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80052de:	4b16      	ldr	r3, [pc, #88]	; (8005338 <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 80052e0:	61bb      	str	r3, [r7, #24]
    break;    
 80052e2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80052e4:	2300      	movs	r3, #0
 80052e6:	77fb      	strb	r3, [r7, #31]
 80052e8:	e017      	b.n	800531a <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80052ea:	7ffb      	ldrb	r3, [r7, #31]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	f107 0220 	add.w	r2, r7, #32
 80052f2:	4413      	add	r3, r2
 80052f4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80052f8:	ee07 3a90 	vmov	s15, r3
 80052fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005300:	7ffb      	ldrb	r3, [r7, #31]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	4413      	add	r3, r2
 8005308:	edd7 7a06 	vldr	s15, [r7, #24]
 800530c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005310:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8005314:	7ffb      	ldrb	r3, [r7, #31]
 8005316:	3301      	adds	r3, #1
 8005318:	77fb      	strb	r3, [r7, #31]
 800531a:	7ffb      	ldrb	r3, [r7, #31]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d9e4      	bls.n	80052ea <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	410c0000 	.word	0x410c0000
 8005330:	418c0000 	.word	0x418c0000
 8005334:	420c0000 	.word	0x420c0000
 8005338:	428c0000 	.word	0x428c0000

0800533c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005346:	2003      	movs	r0, #3
 8005348:	f000 f901 	bl	800554e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800534c:	200f      	movs	r0, #15
 800534e:	f7fe fbbf 	bl	8003ad0 <HAL_InitTick>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	71fb      	strb	r3, [r7, #7]
 800535c:	e001      	b.n	8005362 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800535e:	f7fe fb8f 	bl	8003a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005362:	79fb      	ldrb	r3, [r7, #7]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005370:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_IncTick+0x20>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_IncTick+0x24>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4413      	add	r3, r2
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_IncTick+0x24>)
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	200000dc 	.word	0x200000dc
 8005390:	20003500 	.word	0x20003500

08005394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return uwTick;
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <HAL_GetTick+0x14>)
 800539a:	681b      	ldr	r3, [r3, #0]
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20003500 	.word	0x20003500

080053ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053b4:	f7ff ffee 	bl	8005394 <HAL_GetTick>
 80053b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d005      	beq.n	80053d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <HAL_Delay+0x44>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053d2:	bf00      	nop
 80053d4:	f7ff ffde 	bl	8005394 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d8f7      	bhi.n	80053d4 <HAL_Delay+0x28>
  {
  }
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	200000dc 	.word	0x200000dc

080053f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005410:	4013      	ands	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800541c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005426:	4a04      	ldr	r2, [pc, #16]	; (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	60d3      	str	r3, [r2, #12]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <__NVIC_GetPriorityGrouping+0x18>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 0307 	and.w	r3, r3, #7
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	2b00      	cmp	r3, #0
 8005468:	db0b      	blt.n	8005482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	f003 021f 	and.w	r2, r3, #31
 8005470:	4907      	ldr	r1, [pc, #28]	; (8005490 <__NVIC_EnableIRQ+0x38>)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2001      	movs	r0, #1
 800547a:	fa00 f202 	lsl.w	r2, r0, r2
 800547e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e100 	.word	0xe000e100

08005494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	db0a      	blt.n	80054be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	490c      	ldr	r1, [pc, #48]	; (80054e0 <__NVIC_SetPriority+0x4c>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	440b      	add	r3, r1
 80054b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054bc:	e00a      	b.n	80054d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4908      	ldr	r1, [pc, #32]	; (80054e4 <__NVIC_SetPriority+0x50>)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	3b04      	subs	r3, #4
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	761a      	strb	r2, [r3, #24]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000e100 	.word	0xe000e100
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f1c3 0307 	rsb	r3, r3, #7
 8005502:	2b04      	cmp	r3, #4
 8005504:	bf28      	it	cs
 8005506:	2304      	movcs	r3, #4
 8005508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3304      	adds	r3, #4
 800550e:	2b06      	cmp	r3, #6
 8005510:	d902      	bls.n	8005518 <NVIC_EncodePriority+0x30>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3b03      	subs	r3, #3
 8005516:	e000      	b.n	800551a <NVIC_EncodePriority+0x32>
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43da      	mvns	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	401a      	ands	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005530:	f04f 31ff 	mov.w	r1, #4294967295
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	43d9      	mvns	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	4313      	orrs	r3, r2
         );
}
 8005542:	4618      	mov	r0, r3
 8005544:	3724      	adds	r7, #36	; 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff4c 	bl	80053f4 <__NVIC_SetPriorityGrouping>
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005576:	f7ff ff61 	bl	800543c <__NVIC_GetPriorityGrouping>
 800557a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	6978      	ldr	r0, [r7, #20]
 8005582:	f7ff ffb1 	bl	80054e8 <NVIC_EncodePriority>
 8005586:	4602      	mov	r2, r0
 8005588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff ff80 	bl	8005494 <__NVIC_SetPriority>
}
 8005594:	bf00      	nop
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ff54 	bl	8005458 <__NVIC_EnableIRQ>
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d005      	beq.n	80055dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2204      	movs	r2, #4
 80055d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
 80055da:	e029      	b.n	8005630 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 020e 	bic.w	r2, r2, #14
 80055ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005600:	f003 021c 	and.w	r2, r3, #28
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f202 	lsl.w	r2, r1, r2
 800560e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
    }
  }
  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800564a:	e17f      	b.n	800594c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	2101      	movs	r1, #1
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 8171 	beq.w	8005946 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d00b      	beq.n	8005684 <HAL_GPIO_Init+0x48>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d007      	beq.n	8005684 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005678:	2b11      	cmp	r3, #17
 800567a:	d003      	beq.n	8005684 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b12      	cmp	r3, #18
 8005682:	d130      	bne.n	80056e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	2203      	movs	r2, #3
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4013      	ands	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ba:	2201      	movs	r2, #1
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43db      	mvns	r3, r3
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	f003 0201 	and.w	r2, r3, #1
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d118      	bne.n	8005724 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80056f8:	2201      	movs	r2, #1
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	43db      	mvns	r3, r3
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4013      	ands	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	08db      	lsrs	r3, r3, #3
 800570e:	f003 0201 	and.w	r2, r3, #1
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	2203      	movs	r2, #3
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4013      	ands	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x128>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b12      	cmp	r3, #18
 8005762:	d123      	bne.n	80057ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	08da      	lsrs	r2, r3, #3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3208      	adds	r2, #8
 800576c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005770:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	220f      	movs	r2, #15
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	43db      	mvns	r3, r3
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	08da      	lsrs	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3208      	adds	r2, #8
 80057a6:	6939      	ldr	r1, [r7, #16]
 80057a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	2203      	movs	r2, #3
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4013      	ands	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 0203 	and.w	r2, r3, #3
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80ac 	beq.w	8005946 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ee:	4b5f      	ldr	r3, [pc, #380]	; (800596c <HAL_GPIO_Init+0x330>)
 80057f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f2:	4a5e      	ldr	r2, [pc, #376]	; (800596c <HAL_GPIO_Init+0x330>)
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	6613      	str	r3, [r2, #96]	; 0x60
 80057fa:	4b5c      	ldr	r3, [pc, #368]	; (800596c <HAL_GPIO_Init+0x330>)
 80057fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005806:	4a5a      	ldr	r2, [pc, #360]	; (8005970 <HAL_GPIO_Init+0x334>)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	3302      	adds	r3, #2
 800580e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005812:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	220f      	movs	r2, #15
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	43db      	mvns	r3, r3
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4013      	ands	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005830:	d025      	beq.n	800587e <HAL_GPIO_Init+0x242>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a4f      	ldr	r2, [pc, #316]	; (8005974 <HAL_GPIO_Init+0x338>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01f      	beq.n	800587a <HAL_GPIO_Init+0x23e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a4e      	ldr	r2, [pc, #312]	; (8005978 <HAL_GPIO_Init+0x33c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d019      	beq.n	8005876 <HAL_GPIO_Init+0x23a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a4d      	ldr	r2, [pc, #308]	; (800597c <HAL_GPIO_Init+0x340>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_GPIO_Init+0x236>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a4c      	ldr	r2, [pc, #304]	; (8005980 <HAL_GPIO_Init+0x344>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00d      	beq.n	800586e <HAL_GPIO_Init+0x232>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a4b      	ldr	r2, [pc, #300]	; (8005984 <HAL_GPIO_Init+0x348>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d007      	beq.n	800586a <HAL_GPIO_Init+0x22e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a4a      	ldr	r2, [pc, #296]	; (8005988 <HAL_GPIO_Init+0x34c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d101      	bne.n	8005866 <HAL_GPIO_Init+0x22a>
 8005862:	2306      	movs	r3, #6
 8005864:	e00c      	b.n	8005880 <HAL_GPIO_Init+0x244>
 8005866:	2307      	movs	r3, #7
 8005868:	e00a      	b.n	8005880 <HAL_GPIO_Init+0x244>
 800586a:	2305      	movs	r3, #5
 800586c:	e008      	b.n	8005880 <HAL_GPIO_Init+0x244>
 800586e:	2304      	movs	r3, #4
 8005870:	e006      	b.n	8005880 <HAL_GPIO_Init+0x244>
 8005872:	2303      	movs	r3, #3
 8005874:	e004      	b.n	8005880 <HAL_GPIO_Init+0x244>
 8005876:	2302      	movs	r3, #2
 8005878:	e002      	b.n	8005880 <HAL_GPIO_Init+0x244>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_GPIO_Init+0x244>
 800587e:	2300      	movs	r3, #0
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	f002 0203 	and.w	r2, r2, #3
 8005886:	0092      	lsls	r2, r2, #2
 8005888:	4093      	lsls	r3, r2
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005890:	4937      	ldr	r1, [pc, #220]	; (8005970 <HAL_GPIO_Init+0x334>)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	089b      	lsrs	r3, r3, #2
 8005896:	3302      	adds	r3, #2
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800589e:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_GPIO_Init+0x350>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4013      	ands	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058c2:	4a32      	ldr	r2, [pc, #200]	; (800598c <HAL_GPIO_Init+0x350>)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80058c8:	4b30      	ldr	r3, [pc, #192]	; (800598c <HAL_GPIO_Init+0x350>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	4013      	ands	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058ec:	4a27      	ldr	r2, [pc, #156]	; (800598c <HAL_GPIO_Init+0x350>)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <HAL_GPIO_Init+0x350>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	43db      	mvns	r3, r3
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005916:	4a1d      	ldr	r2, [pc, #116]	; (800598c <HAL_GPIO_Init+0x350>)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <HAL_GPIO_Init+0x350>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	43db      	mvns	r3, r3
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4013      	ands	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005940:	4a12      	ldr	r2, [pc, #72]	; (800598c <HAL_GPIO_Init+0x350>)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	3301      	adds	r3, #1
 800594a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	f47f ae78 	bne.w	800564c <HAL_GPIO_Init+0x10>
  }
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
 8005970:	40010000 	.word	0x40010000
 8005974:	48000400 	.word	0x48000400
 8005978:	48000800 	.word	0x48000800
 800597c:	48000c00 	.word	0x48000c00
 8005980:	48001000 	.word	0x48001000
 8005984:	48001400 	.word	0x48001400
 8005988:	48001800 	.word	0x48001800
 800598c:	40010400 	.word	0x40010400

08005990 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800599e:	e0cd      	b.n	8005b3c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80059a0:	2201      	movs	r2, #1
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	4013      	ands	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80c0 	beq.w	8005b36 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80059b6:	4a68      	ldr	r2, [pc, #416]	; (8005b58 <HAL_GPIO_DeInit+0x1c8>)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	3302      	adds	r3, #2
 80059be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	220f      	movs	r2, #15
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4013      	ands	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059de:	d025      	beq.n	8005a2c <HAL_GPIO_DeInit+0x9c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a5e      	ldr	r2, [pc, #376]	; (8005b5c <HAL_GPIO_DeInit+0x1cc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01f      	beq.n	8005a28 <HAL_GPIO_DeInit+0x98>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a5d      	ldr	r2, [pc, #372]	; (8005b60 <HAL_GPIO_DeInit+0x1d0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d019      	beq.n	8005a24 <HAL_GPIO_DeInit+0x94>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a5c      	ldr	r2, [pc, #368]	; (8005b64 <HAL_GPIO_DeInit+0x1d4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d013      	beq.n	8005a20 <HAL_GPIO_DeInit+0x90>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a5b      	ldr	r2, [pc, #364]	; (8005b68 <HAL_GPIO_DeInit+0x1d8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00d      	beq.n	8005a1c <HAL_GPIO_DeInit+0x8c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a5a      	ldr	r2, [pc, #360]	; (8005b6c <HAL_GPIO_DeInit+0x1dc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d007      	beq.n	8005a18 <HAL_GPIO_DeInit+0x88>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a59      	ldr	r2, [pc, #356]	; (8005b70 <HAL_GPIO_DeInit+0x1e0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d101      	bne.n	8005a14 <HAL_GPIO_DeInit+0x84>
 8005a10:	2306      	movs	r3, #6
 8005a12:	e00c      	b.n	8005a2e <HAL_GPIO_DeInit+0x9e>
 8005a14:	2307      	movs	r3, #7
 8005a16:	e00a      	b.n	8005a2e <HAL_GPIO_DeInit+0x9e>
 8005a18:	2305      	movs	r3, #5
 8005a1a:	e008      	b.n	8005a2e <HAL_GPIO_DeInit+0x9e>
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	e006      	b.n	8005a2e <HAL_GPIO_DeInit+0x9e>
 8005a20:	2303      	movs	r3, #3
 8005a22:	e004      	b.n	8005a2e <HAL_GPIO_DeInit+0x9e>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e002      	b.n	8005a2e <HAL_GPIO_DeInit+0x9e>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <HAL_GPIO_DeInit+0x9e>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	f002 0203 	and.w	r2, r2, #3
 8005a34:	0092      	lsls	r2, r2, #2
 8005a36:	4093      	lsls	r3, r2
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d132      	bne.n	8005aa4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005a3e:	4b4d      	ldr	r3, [pc, #308]	; (8005b74 <HAL_GPIO_DeInit+0x1e4>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	494b      	ldr	r1, [pc, #300]	; (8005b74 <HAL_GPIO_DeInit+0x1e4>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005a4c:	4b49      	ldr	r3, [pc, #292]	; (8005b74 <HAL_GPIO_DeInit+0x1e4>)
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	43db      	mvns	r3, r3
 8005a54:	4947      	ldr	r1, [pc, #284]	; (8005b74 <HAL_GPIO_DeInit+0x1e4>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005a5a:	4b46      	ldr	r3, [pc, #280]	; (8005b74 <HAL_GPIO_DeInit+0x1e4>)
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	4944      	ldr	r1, [pc, #272]	; (8005b74 <HAL_GPIO_DeInit+0x1e4>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8005a68:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <HAL_GPIO_DeInit+0x1e4>)
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	4940      	ldr	r1, [pc, #256]	; (8005b74 <HAL_GPIO_DeInit+0x1e4>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	220f      	movs	r2, #15
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005a86:	4a34      	ldr	r2, [pc, #208]	; (8005b58 <HAL_GPIO_DeInit+0x1c8>)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	43da      	mvns	r2, r3
 8005a96:	4830      	ldr	r0, [pc, #192]	; (8005b58 <HAL_GPIO_DeInit+0x1c8>)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	089b      	lsrs	r3, r3, #2
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	3302      	adds	r3, #2
 8005aa0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	2103      	movs	r1, #3
 8005aae:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	08da      	lsrs	r2, r3, #3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3208      	adds	r2, #8
 8005ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	220f      	movs	r2, #15
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	08d2      	lsrs	r2, r2, #3
 8005ad8:	4019      	ands	r1, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3208      	adds	r2, #8
 8005ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	2103      	movs	r1, #3
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	401a      	ands	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	2101      	movs	r1, #1
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	fa01 f303 	lsl.w	r3, r1, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	401a      	ands	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	2103      	movs	r1, #3
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	401a      	ands	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	2101      	movs	r1, #1
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	401a      	ands	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f47f af2b 	bne.w	80059a0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	48000400 	.word	0x48000400
 8005b60:	48000800 	.word	0x48000800
 8005b64:	48000c00 	.word	0x48000c00
 8005b68:	48001000 	.word	0x48001000
 8005b6c:	48001400 	.word	0x48001400
 8005b70:	48001800 	.word	0x48001800
 8005b74:	40010400 	.word	0x40010400

08005b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	887b      	ldrh	r3, [r7, #2]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
 8005b94:	e001      	b.n	8005b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b96:	2300      	movs	r3, #0
 8005b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	807b      	strh	r3, [r7, #2]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bb8:	787b      	ldrb	r3, [r7, #1]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bbe:	887a      	ldrh	r2, [r7, #2]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bc4:	e002      	b.n	8005bcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bc6:	887a      	ldrh	r2, [r7, #2]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005be2:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d006      	beq.n	8005bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bee:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bf0:	88fb      	ldrh	r3, [r7, #6]
 8005bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fd feae 	bl	8003958 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40010400 	.word	0x40010400

08005c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e081      	b.n	8005d1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fd fb56 	bl	80032e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2224      	movs	r2, #36	; 0x24
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d107      	bne.n	8005c82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c7e:	609a      	str	r2, [r3, #8]
 8005c80:	e006      	b.n	8005c90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d104      	bne.n	8005ca2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	ea42 0103 	orr.w	r1, r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	021a      	lsls	r2, r3, #8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69d9      	ldr	r1, [r3, #28]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1a      	ldr	r2, [r3, #32]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e021      	b.n	8005d7c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2224      	movs	r2, #36	; 0x24
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0201 	bic.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7fd fb23 	bl	800339c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	460b      	mov	r3, r1
 8005d98:	813b      	strh	r3, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	f040 80f9 	bne.w	8005f9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <HAL_I2C_Mem_Write+0x34>
 8005db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d105      	bne.n	8005dc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0ed      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2C_Mem_Write+0x4e>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0e6      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dda:	f7ff fadb 	bl	8005394 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	2319      	movs	r3, #25
 8005de6:	2201      	movs	r2, #1
 8005de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fac3 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0d1      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2221      	movs	r2, #33	; 0x21
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2240      	movs	r2, #64	; 0x40
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a3a      	ldr	r2, [r7, #32]
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e24:	88f8      	ldrh	r0, [r7, #6]
 8005e26:	893a      	ldrh	r2, [r7, #8]
 8005e28:	8979      	ldrh	r1, [r7, #10]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	4603      	mov	r3, r0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f9d3 	bl	80061e0 <I2C_RequestMemoryWrite>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0a9      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2bff      	cmp	r3, #255	; 0xff
 8005e54:	d90e      	bls.n	8005e74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	22ff      	movs	r2, #255	; 0xff
 8005e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	8979      	ldrh	r1, [r7, #10]
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fba5 	bl	80065bc <I2C_TransferConfig>
 8005e72:	e00f      	b.n	8005e94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	8979      	ldrh	r1, [r7, #10]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fb94 	bl	80065bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 faad 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e07b      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d034      	beq.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d130      	bne.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2180      	movs	r1, #128	; 0x80
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fa3f 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e04d      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2bff      	cmp	r3, #255	; 0xff
 8005f0c:	d90e      	bls.n	8005f2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	22ff      	movs	r2, #255	; 0xff
 8005f12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	8979      	ldrh	r1, [r7, #10]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 fb49 	bl	80065bc <I2C_TransferConfig>
 8005f2a:	e00f      	b.n	8005f4c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	8979      	ldrh	r1, [r7, #10]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fb38 	bl	80065bc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d19e      	bne.n	8005e94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 fa8c 	bl	8006478 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e01a      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <HAL_I2C_Mem_Write+0x224>)
 8005f7e:	400b      	ands	r3, r1
 8005f80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	fe00e800 	.word	0xfe00e800

08005fac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	f040 80fd 	bne.w	80061ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_I2C_Mem_Read+0x34>
 8005fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d105      	bne.n	8005fec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0f1      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2C_Mem_Read+0x4e>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e0ea      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006002:	f7ff f9c7 	bl	8005394 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	2319      	movs	r3, #25
 800600e:	2201      	movs	r2, #1
 8006010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f9af 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0d5      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2222      	movs	r2, #34	; 0x22
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2240      	movs	r2, #64	; 0x40
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800604c:	88f8      	ldrh	r0, [r7, #6]
 800604e:	893a      	ldrh	r2, [r7, #8]
 8006050:	8979      	ldrh	r1, [r7, #10]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4603      	mov	r3, r0
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f913 	bl	8006288 <I2C_RequestMemoryRead>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e0ad      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2bff      	cmp	r3, #255	; 0xff
 800607c:	d90e      	bls.n	800609c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	22ff      	movs	r2, #255	; 0xff
 8006082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006088:	b2da      	uxtb	r2, r3
 800608a:	8979      	ldrh	r1, [r7, #10]
 800608c:	4b52      	ldr	r3, [pc, #328]	; (80061d8 <HAL_I2C_Mem_Read+0x22c>)
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fa91 	bl	80065bc <I2C_TransferConfig>
 800609a:	e00f      	b.n	80060bc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	8979      	ldrh	r1, [r7, #10]
 80060ae:	4b4a      	ldr	r3, [pc, #296]	; (80061d8 <HAL_I2C_Mem_Read+0x22c>)
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fa80 	bl	80065bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	2200      	movs	r2, #0
 80060c4:	2104      	movs	r1, #4
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f956 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e07c      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d034      	beq.n	800617c <HAL_I2C_Mem_Read+0x1d0>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	d130      	bne.n	800617c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	2200      	movs	r2, #0
 8006122:	2180      	movs	r1, #128	; 0x80
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f927 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e04d      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	2bff      	cmp	r3, #255	; 0xff
 800613c:	d90e      	bls.n	800615c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	22ff      	movs	r2, #255	; 0xff
 8006142:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	b2da      	uxtb	r2, r3
 800614a:	8979      	ldrh	r1, [r7, #10]
 800614c:	2300      	movs	r3, #0
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fa31 	bl	80065bc <I2C_TransferConfig>
 800615a:	e00f      	b.n	800617c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616a:	b2da      	uxtb	r2, r3
 800616c:	8979      	ldrh	r1, [r7, #10]
 800616e:	2300      	movs	r3, #0
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fa20 	bl	80065bc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d19a      	bne.n	80060bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f974 	bl	8006478 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e01a      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2220      	movs	r2, #32
 80061a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <HAL_I2C_Mem_Read+0x230>)
 80061ae:	400b      	ands	r3, r1
 80061b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2220      	movs	r2, #32
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80061ce:	2302      	movs	r3, #2
  }
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	80002400 	.word	0x80002400
 80061dc:	fe00e800 	.word	0xfe00e800

080061e0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	4608      	mov	r0, r1
 80061ea:	4611      	mov	r1, r2
 80061ec:	461a      	mov	r2, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	817b      	strh	r3, [r7, #10]
 80061f2:	460b      	mov	r3, r1
 80061f4:	813b      	strh	r3, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	8979      	ldrh	r1, [r7, #10]
 8006200:	4b20      	ldr	r3, [pc, #128]	; (8006284 <I2C_RequestMemoryWrite+0xa4>)
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f9d7 	bl	80065bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	69b9      	ldr	r1, [r7, #24]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f8f0 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e02c      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
 8006232:	e015      	b.n	8006260 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006234:	893b      	ldrh	r3, [r7, #8]
 8006236:	0a1b      	lsrs	r3, r3, #8
 8006238:	b29b      	uxth	r3, r3
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	69b9      	ldr	r1, [r7, #24]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f8d6 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e012      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2200      	movs	r2, #0
 8006268:	2180      	movs	r1, #128	; 0x80
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f884 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	80002000 	.word	0x80002000

08006288 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	461a      	mov	r2, r3
 8006296:	4603      	mov	r3, r0
 8006298:	817b      	strh	r3, [r7, #10]
 800629a:	460b      	mov	r3, r1
 800629c:	813b      	strh	r3, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	8979      	ldrh	r1, [r7, #10]
 80062a8:	4b20      	ldr	r3, [pc, #128]	; (800632c <I2C_RequestMemoryRead+0xa4>)
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	2300      	movs	r3, #0
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f984 	bl	80065bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	69b9      	ldr	r1, [r7, #24]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 f89d 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e02c      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	629a      	str	r2, [r3, #40]	; 0x28
 80062d8:	e015      	b.n	8006306 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b29b      	uxth	r3, r3
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	69b9      	ldr	r1, [r7, #24]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f883 	bl	80063f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e012      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062fc:	893b      	ldrh	r3, [r7, #8]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2200      	movs	r2, #0
 800630e:	2140      	movs	r1, #64	; 0x40
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f831 	bl	8006378 <I2C_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	80002000 	.word	0x80002000

08006330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b02      	cmp	r3, #2
 8006344:	d103      	bne.n	800634e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2200      	movs	r2, #0
 800634c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d007      	beq.n	800636c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	619a      	str	r2, [r3, #24]
  }
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006388:	e022      	b.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d01e      	beq.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fe ffff 	bl	8005394 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d113      	bne.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e00f      	b.n	80063f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4013      	ands	r3, r2
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d0cd      	beq.n	800638a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006404:	e02c      	b.n	8006460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f870 	bl	80064f0 <I2C_IsAcknowledgeFailed>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e02a      	b.n	8006470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d01e      	beq.n	8006460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fe ffb7 	bl	8005394 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d113      	bne.n	8006460 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	f043 0220 	orr.w	r2, r3, #32
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e007      	b.n	8006470 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b02      	cmp	r3, #2
 800646c:	d1cb      	bne.n	8006406 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006484:	e028      	b.n	80064d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f830 	bl	80064f0 <I2C_IsAcknowledgeFailed>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e026      	b.n	80064e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649a:	f7fe ff7b 	bl	8005394 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d302      	bcc.n	80064b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d113      	bne.n	80064d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b4:	f043 0220 	orr.w	r2, r3, #32
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e007      	b.n	80064e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d1cf      	bne.n	8006486 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	2b10      	cmp	r3, #16
 8006508:	d151      	bne.n	80065ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800650a:	e022      	b.n	8006552 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d01e      	beq.n	8006552 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006514:	f7fe ff3e 	bl	8005394 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	429a      	cmp	r2, r3
 8006522:	d302      	bcc.n	800652a <I2C_IsAcknowledgeFailed+0x3a>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d113      	bne.n	8006552 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	f043 0220 	orr.w	r2, r3, #32
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e02e      	b.n	80065b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b20      	cmp	r3, #32
 800655e:	d1d5      	bne.n	800650c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2210      	movs	r2, #16
 8006566:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2220      	movs	r2, #32
 800656e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff fedd 	bl	8006330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6859      	ldr	r1, [r3, #4]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <I2C_IsAcknowledgeFailed+0xc8>)
 8006582:	400b      	ands	r3, r1
 8006584:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658a:	f043 0204 	orr.w	r2, r3, #4
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	fe00e800 	.word	0xfe00e800

080065bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	607b      	str	r3, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	817b      	strh	r3, [r7, #10]
 80065ca:	4613      	mov	r3, r2
 80065cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	0d5b      	lsrs	r3, r3, #21
 80065d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <I2C_TransferConfig+0x58>)
 80065de:	430b      	orrs	r3, r1
 80065e0:	43db      	mvns	r3, r3
 80065e2:	ea02 0103 	and.w	r1, r2, r3
 80065e6:	897b      	ldrh	r3, [r7, #10]
 80065e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065ec:	7a7b      	ldrb	r3, [r7, #9]
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	03ff63ff 	.word	0x03ff63ff

08006618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b20      	cmp	r3, #32
 800662c:	d138      	bne.n	80066a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006638:	2302      	movs	r3, #2
 800663a:	e032      	b.n	80066a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0201 	bic.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800666a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e000      	b.n	80066a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
  }
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
	...

080066b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066be:	6013      	str	r3, [r2, #0]
}
 80066c0:	bf00      	nop
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40007000 	.word	0x40007000

080066d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	40007000 	.word	0x40007000

080066ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066fa:	d130      	bne.n	800675e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80066fc:	4b23      	ldr	r3, [pc, #140]	; (800678c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006708:	d038      	beq.n	800677c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800670a:	4b20      	ldr	r3, [pc, #128]	; (800678c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006712:	4a1e      	ldr	r2, [pc, #120]	; (800678c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006718:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2232      	movs	r2, #50	; 0x32
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006726:	fba2 2303 	umull	r2, r3, r2, r3
 800672a:	0c9b      	lsrs	r3, r3, #18
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006730:	e002      	b.n	8006738 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b01      	subs	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006738:	4b14      	ldr	r3, [pc, #80]	; (800678c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006744:	d102      	bne.n	800674c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1f2      	bne.n	8006732 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800674c:	4b0f      	ldr	r3, [pc, #60]	; (800678c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006758:	d110      	bne.n	800677c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e00f      	b.n	800677e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800676a:	d007      	beq.n	800677c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800676c:	4b07      	ldr	r3, [pc, #28]	; (800678c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006774:	4a05      	ldr	r2, [pc, #20]	; (800678c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800677a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40007000 	.word	0x40007000
 8006790:	20000004 	.word	0x20000004
 8006794:	431bde83 	.word	0x431bde83

08006798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e3d4      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067aa:	4ba1      	ldr	r3, [pc, #644]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 030c 	and.w	r3, r3, #12
 80067b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067b4:	4b9e      	ldr	r3, [pc, #632]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0310 	and.w	r3, r3, #16
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80e4 	beq.w	8006994 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <HAL_RCC_OscConfig+0x4a>
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b0c      	cmp	r3, #12
 80067d6:	f040 808b 	bne.w	80068f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	f040 8087 	bne.w	80068f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067e2:	4b93      	ldr	r3, [pc, #588]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <HAL_RCC_OscConfig+0x62>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e3ac      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1a      	ldr	r2, [r3, #32]
 80067fe:	4b8c      	ldr	r3, [pc, #560]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <HAL_RCC_OscConfig+0x7c>
 800680a:	4b89      	ldr	r3, [pc, #548]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006812:	e005      	b.n	8006820 <HAL_RCC_OscConfig+0x88>
 8006814:	4b86      	ldr	r3, [pc, #536]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006820:	4293      	cmp	r3, r2
 8006822:	d223      	bcs.n	800686c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fd73 	bl	8007314 <RCC_SetFlashLatencyFromMSIRange>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e38d      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006838:	4b7d      	ldr	r3, [pc, #500]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a7c      	ldr	r2, [pc, #496]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800683e:	f043 0308 	orr.w	r3, r3, #8
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	4b7a      	ldr	r3, [pc, #488]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	4977      	ldr	r1, [pc, #476]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006852:	4313      	orrs	r3, r2
 8006854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006856:	4b76      	ldr	r3, [pc, #472]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	4972      	ldr	r1, [pc, #456]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006866:	4313      	orrs	r3, r2
 8006868:	604b      	str	r3, [r1, #4]
 800686a:	e025      	b.n	80068b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800686c:	4b70      	ldr	r3, [pc, #448]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a6f      	ldr	r2, [pc, #444]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006872:	f043 0308 	orr.w	r3, r3, #8
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	4b6d      	ldr	r3, [pc, #436]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	496a      	ldr	r1, [pc, #424]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006886:	4313      	orrs	r3, r2
 8006888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800688a:	4b69      	ldr	r3, [pc, #420]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	4965      	ldr	r1, [pc, #404]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800689a:	4313      	orrs	r3, r2
 800689c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fd33 	bl	8007314 <RCC_SetFlashLatencyFromMSIRange>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e34d      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068b8:	f000 fc36 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 80068bc:	4602      	mov	r2, r0
 80068be:	4b5c      	ldr	r3, [pc, #368]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	091b      	lsrs	r3, r3, #4
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	495a      	ldr	r1, [pc, #360]	; (8006a34 <HAL_RCC_OscConfig+0x29c>)
 80068ca:	5ccb      	ldrb	r3, [r1, r3]
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	fa22 f303 	lsr.w	r3, r2, r3
 80068d4:	4a58      	ldr	r2, [pc, #352]	; (8006a38 <HAL_RCC_OscConfig+0x2a0>)
 80068d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80068d8:	4b58      	ldr	r3, [pc, #352]	; (8006a3c <HAL_RCC_OscConfig+0x2a4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fd f8f7 	bl	8003ad0 <HAL_InitTick>
 80068e2:	4603      	mov	r3, r0
 80068e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d052      	beq.n	8006992 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	e331      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d032      	beq.n	800695e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80068f8:	4b4d      	ldr	r3, [pc, #308]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a4c      	ldr	r2, [pc, #304]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006904:	f7fe fd46 	bl	8005394 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800690c:	f7fe fd42 	bl	8005394 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b02      	cmp	r3, #2
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e31a      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800691e:	4b44      	ldr	r3, [pc, #272]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800692a:	4b41      	ldr	r3, [pc, #260]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a40      	ldr	r2, [pc, #256]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006930:	f043 0308 	orr.w	r3, r3, #8
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	4b3e      	ldr	r3, [pc, #248]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	493b      	ldr	r1, [pc, #236]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006944:	4313      	orrs	r3, r2
 8006946:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006948:	4b39      	ldr	r3, [pc, #228]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	4936      	ldr	r1, [pc, #216]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006958:	4313      	orrs	r3, r2
 800695a:	604b      	str	r3, [r1, #4]
 800695c:	e01a      	b.n	8006994 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800695e:	4b34      	ldr	r3, [pc, #208]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a33      	ldr	r2, [pc, #204]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800696a:	f7fe fd13 	bl	8005394 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006972:	f7fe fd0f 	bl	8005394 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e2e7      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006984:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f0      	bne.n	8006972 <HAL_RCC_OscConfig+0x1da>
 8006990:	e000      	b.n	8006994 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d074      	beq.n	8006a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d005      	beq.n	80069b2 <HAL_RCC_OscConfig+0x21a>
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b0c      	cmp	r3, #12
 80069aa:	d10e      	bne.n	80069ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d10b      	bne.n	80069ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b2:	4b1f      	ldr	r3, [pc, #124]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d064      	beq.n	8006a88 <HAL_RCC_OscConfig+0x2f0>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d160      	bne.n	8006a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e2c4      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d2:	d106      	bne.n	80069e2 <HAL_RCC_OscConfig+0x24a>
 80069d4:	4b16      	ldr	r3, [pc, #88]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80069da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	e01d      	b.n	8006a1e <HAL_RCC_OscConfig+0x286>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ea:	d10c      	bne.n	8006a06 <HAL_RCC_OscConfig+0x26e>
 80069ec:	4b10      	ldr	r3, [pc, #64]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a0f      	ldr	r2, [pc, #60]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80069f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 80069fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	e00b      	b.n	8006a1e <HAL_RCC_OscConfig+0x286>
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a06      	ldr	r2, [pc, #24]	; (8006a30 <HAL_RCC_OscConfig+0x298>)
 8006a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01c      	beq.n	8006a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a26:	f7fe fcb5 	bl	8005394 <HAL_GetTick>
 8006a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a2c:	e011      	b.n	8006a52 <HAL_RCC_OscConfig+0x2ba>
 8006a2e:	bf00      	nop
 8006a30:	40021000 	.word	0x40021000
 8006a34:	08010e14 	.word	0x08010e14
 8006a38:	20000004 	.word	0x20000004
 8006a3c:	200000d8 	.word	0x200000d8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a40:	f7fe fca8 	bl	8005394 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e280      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a52:	4baf      	ldr	r3, [pc, #700]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCC_OscConfig+0x2a8>
 8006a5e:	e014      	b.n	8006a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fe fc98 	bl	8005394 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a68:	f7fe fc94 	bl	8005394 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b64      	cmp	r3, #100	; 0x64
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e26c      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a7a:	4ba5      	ldr	r3, [pc, #660]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f0      	bne.n	8006a68 <HAL_RCC_OscConfig+0x2d0>
 8006a86:	e000      	b.n	8006a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d060      	beq.n	8006b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x310>
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2b0c      	cmp	r3, #12
 8006aa0:	d119      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d116      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aa8:	4b99      	ldr	r3, [pc, #612]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x328>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e249      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ac0:	4b93      	ldr	r3, [pc, #588]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	061b      	lsls	r3, r3, #24
 8006ace:	4990      	ldr	r1, [pc, #576]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ad4:	e040      	b.n	8006b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d023      	beq.n	8006b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ade:	4b8c      	ldr	r3, [pc, #560]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a8b      	ldr	r2, [pc, #556]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aea:	f7fe fc53 	bl	8005394 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006af0:	e008      	b.n	8006b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006af2:	f7fe fc4f 	bl	8005394 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e227      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b04:	4b82      	ldr	r3, [pc, #520]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0f0      	beq.n	8006af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b10:	4b7f      	ldr	r3, [pc, #508]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	061b      	lsls	r3, r3, #24
 8006b1e:	497c      	ldr	r1, [pc, #496]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	604b      	str	r3, [r1, #4]
 8006b24:	e018      	b.n	8006b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b26:	4b7a      	ldr	r3, [pc, #488]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a79      	ldr	r2, [pc, #484]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fe fc2f 	bl	8005394 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b3a:	f7fe fc2b 	bl	8005394 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e203      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b4c:	4b70      	ldr	r3, [pc, #448]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f0      	bne.n	8006b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d03c      	beq.n	8006bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01c      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b6c:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b72:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b74:	f043 0301 	orr.w	r3, r3, #1
 8006b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fe fc0a 	bl	8005394 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b84:	f7fe fc06 	bl	8005394 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e1de      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b96:	4b5e      	ldr	r3, [pc, #376]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0ef      	beq.n	8006b84 <HAL_RCC_OscConfig+0x3ec>
 8006ba4:	e01b      	b.n	8006bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba6:	4b5a      	ldr	r3, [pc, #360]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bac:	4a58      	ldr	r2, [pc, #352]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb6:	f7fe fbed 	bl	8005394 <HAL_GetTick>
 8006bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbe:	f7fe fbe9 	bl	8005394 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e1c1      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bd0:	4b4f      	ldr	r3, [pc, #316]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1ef      	bne.n	8006bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80a6 	beq.w	8006d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bec:	2300      	movs	r3, #0
 8006bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006bf0:	4b47      	ldr	r3, [pc, #284]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10d      	bne.n	8006c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfc:	4b44      	ldr	r3, [pc, #272]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	4a43      	ldr	r2, [pc, #268]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c06:	6593      	str	r3, [r2, #88]	; 0x58
 8006c08:	4b41      	ldr	r3, [pc, #260]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c14:	2301      	movs	r3, #1
 8006c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c18:	4b3e      	ldr	r3, [pc, #248]	; (8006d14 <HAL_RCC_OscConfig+0x57c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d118      	bne.n	8006c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c24:	4b3b      	ldr	r3, [pc, #236]	; (8006d14 <HAL_RCC_OscConfig+0x57c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a3a      	ldr	r2, [pc, #232]	; (8006d14 <HAL_RCC_OscConfig+0x57c>)
 8006c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c30:	f7fe fbb0 	bl	8005394 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c38:	f7fe fbac 	bl	8005394 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e184      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c4a:	4b32      	ldr	r3, [pc, #200]	; (8006d14 <HAL_RCC_OscConfig+0x57c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0f0      	beq.n	8006c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d108      	bne.n	8006c70 <HAL_RCC_OscConfig+0x4d8>
 8006c5e:	4b2c      	ldr	r3, [pc, #176]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c64:	4a2a      	ldr	r2, [pc, #168]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c6e:	e024      	b.n	8006cba <HAL_RCC_OscConfig+0x522>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d110      	bne.n	8006c9a <HAL_RCC_OscConfig+0x502>
 8006c78:	4b25      	ldr	r3, [pc, #148]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	4a24      	ldr	r2, [pc, #144]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c80:	f043 0304 	orr.w	r3, r3, #4
 8006c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c88:	4b21      	ldr	r3, [pc, #132]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8e:	4a20      	ldr	r2, [pc, #128]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c90:	f043 0301 	orr.w	r3, r3, #1
 8006c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c98:	e00f      	b.n	8006cba <HAL_RCC_OscConfig+0x522>
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca0:	4a1b      	ldr	r2, [pc, #108]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006ca2:	f023 0301 	bic.w	r3, r3, #1
 8006ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006caa:	4b19      	ldr	r3, [pc, #100]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb0:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006cb2:	f023 0304 	bic.w	r3, r3, #4
 8006cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d016      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc2:	f7fe fb67 	bl	8005394 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cc8:	e00a      	b.n	8006ce0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cca:	f7fe fb63 	bl	8005394 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e139      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <HAL_RCC_OscConfig+0x578>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0ed      	beq.n	8006cca <HAL_RCC_OscConfig+0x532>
 8006cee:	e01a      	b.n	8006d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf0:	f7fe fb50 	bl	8005394 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cf6:	e00f      	b.n	8006d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf8:	f7fe fb4c 	bl	8005394 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d906      	bls.n	8006d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e122      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
 8006d0e:	bf00      	nop
 8006d10:	40021000 	.word	0x40021000
 8006d14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d18:	4b90      	ldr	r3, [pc, #576]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e8      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d26:	7ffb      	ldrb	r3, [r7, #31]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d2c:	4b8b      	ldr	r3, [pc, #556]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	4a8a      	ldr	r2, [pc, #552]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8108 	beq.w	8006f52 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	f040 80d0 	bne.w	8006eec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d4c:	4b83      	ldr	r3, [pc, #524]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f003 0203 	and.w	r2, r3, #3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d130      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d127      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d11f      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d8c:	2a07      	cmp	r2, #7
 8006d8e:	bf14      	ite	ne
 8006d90:	2201      	movne	r2, #1
 8006d92:	2200      	moveq	r2, #0
 8006d94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d113      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	3b01      	subs	r3, #1
 8006da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d109      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d06e      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b0c      	cmp	r3, #12
 8006dc6:	d069      	beq.n	8006e9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006dc8:	4b64      	ldr	r3, [pc, #400]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0b7      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006de4:	4b5d      	ldr	r3, [pc, #372]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a5c      	ldr	r2, [pc, #368]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006df0:	f7fe fad0 	bl	8005394 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df8:	f7fe facc 	bl	8005394 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e0a4      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e0a:	4b54      	ldr	r3, [pc, #336]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e16:	4b51      	ldr	r3, [pc, #324]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	4b51      	ldr	r3, [pc, #324]	; (8006f60 <HAL_RCC_OscConfig+0x7c8>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e26:	3a01      	subs	r2, #1
 8006e28:	0112      	lsls	r2, r2, #4
 8006e2a:	4311      	orrs	r1, r2
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e30:	0212      	lsls	r2, r2, #8
 8006e32:	4311      	orrs	r1, r2
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e38:	0852      	lsrs	r2, r2, #1
 8006e3a:	3a01      	subs	r2, #1
 8006e3c:	0552      	lsls	r2, r2, #21
 8006e3e:	4311      	orrs	r1, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e44:	0852      	lsrs	r2, r2, #1
 8006e46:	3a01      	subs	r2, #1
 8006e48:	0652      	lsls	r2, r2, #25
 8006e4a:	4311      	orrs	r1, r2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e50:	0912      	lsrs	r2, r2, #4
 8006e52:	0452      	lsls	r2, r2, #17
 8006e54:	430a      	orrs	r2, r1
 8006e56:	4941      	ldr	r1, [pc, #260]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e5c:	4b3f      	ldr	r3, [pc, #252]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a3e      	ldr	r2, [pc, #248]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e68:	4b3c      	ldr	r3, [pc, #240]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4a3b      	ldr	r2, [pc, #236]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e74:	f7fe fa8e 	bl	8005394 <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e7a:	e008      	b.n	8006e8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e7c:	f7fe fa8a 	bl	8005394 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e062      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e8e:	4b33      	ldr	r3, [pc, #204]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f0      	beq.n	8006e7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e9a:	e05a      	b.n	8006f52 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e059      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ea0:	4b2e      	ldr	r3, [pc, #184]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d152      	bne.n	8006f52 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006eac:	4b2b      	ldr	r3, [pc, #172]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2a      	ldr	r2, [pc, #168]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006eb8:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	4a27      	ldr	r2, [pc, #156]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ec4:	f7fe fa66 	bl	8005394 <HAL_GetTick>
 8006ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eca:	e008      	b.n	8006ede <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ecc:	f7fe fa62 	bl	8005394 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e03a      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ede:	4b1f      	ldr	r3, [pc, #124]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0f0      	beq.n	8006ecc <HAL_RCC_OscConfig+0x734>
 8006eea:	e032      	b.n	8006f52 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b0c      	cmp	r3, #12
 8006ef0:	d02d      	beq.n	8006f4e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef2:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a19      	ldr	r2, [pc, #100]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006efc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006efe:	4b17      	ldr	r3, [pc, #92]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f0a:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006f10:	f023 0303 	bic.w	r3, r3, #3
 8006f14:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006f16:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	4a10      	ldr	r2, [pc, #64]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006f1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f26:	f7fe fa35 	bl	8005394 <HAL_GetTick>
 8006f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f2e:	f7fe fa31 	bl	8005394 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e009      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <HAL_RCC_OscConfig+0x7c4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f0      	bne.n	8006f2e <HAL_RCC_OscConfig+0x796>
 8006f4c:	e001      	b.n	8006f52 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3720      	adds	r7, #32
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	f99d808c 	.word	0xf99d808c

08006f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e0c8      	b.n	800710a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f78:	4b66      	ldr	r3, [pc, #408]	; (8007114 <HAL_RCC_ClockConfig+0x1b0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d910      	bls.n	8006fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f86:	4b63      	ldr	r3, [pc, #396]	; (8007114 <HAL_RCC_ClockConfig+0x1b0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f023 0207 	bic.w	r2, r3, #7
 8006f8e:	4961      	ldr	r1, [pc, #388]	; (8007114 <HAL_RCC_ClockConfig+0x1b0>)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f96:	4b5f      	ldr	r3, [pc, #380]	; (8007114 <HAL_RCC_ClockConfig+0x1b0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e0b0      	b.n	800710a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d04c      	beq.n	800704e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d107      	bne.n	8006fcc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fbc:	4b56      	ldr	r3, [pc, #344]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d121      	bne.n	800700c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e09e      	b.n	800710a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d107      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fd4:	4b50      	ldr	r3, [pc, #320]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d115      	bne.n	800700c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e092      	b.n	800710a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d107      	bne.n	8006ffc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fec:	4b4a      	ldr	r3, [pc, #296]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d109      	bne.n	800700c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e086      	b.n	800710a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ffc:	4b46      	ldr	r3, [pc, #280]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e07e      	b.n	800710a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800700c:	4b42      	ldr	r3, [pc, #264]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f023 0203 	bic.w	r2, r3, #3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	493f      	ldr	r1, [pc, #252]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 800701a:	4313      	orrs	r3, r2
 800701c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701e:	f7fe f9b9 	bl	8005394 <HAL_GetTick>
 8007022:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007024:	e00a      	b.n	800703c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007026:	f7fe f9b5 	bl	8005394 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	f241 3288 	movw	r2, #5000	; 0x1388
 8007034:	4293      	cmp	r3, r2
 8007036:	d901      	bls.n	800703c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e066      	b.n	800710a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703c:	4b36      	ldr	r3, [pc, #216]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 020c 	and.w	r2, r3, #12
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	429a      	cmp	r2, r3
 800704c:	d1eb      	bne.n	8007026 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800705a:	4b2f      	ldr	r3, [pc, #188]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	492c      	ldr	r1, [pc, #176]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 8007068:	4313      	orrs	r3, r2
 800706a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800706c:	4b29      	ldr	r3, [pc, #164]	; (8007114 <HAL_RCC_ClockConfig+0x1b0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d210      	bcs.n	800709c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b26      	ldr	r3, [pc, #152]	; (8007114 <HAL_RCC_ClockConfig+0x1b0>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f023 0207 	bic.w	r2, r3, #7
 8007082:	4924      	ldr	r1, [pc, #144]	; (8007114 <HAL_RCC_ClockConfig+0x1b0>)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708a:	4b22      	ldr	r3, [pc, #136]	; (8007114 <HAL_RCC_ClockConfig+0x1b0>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e036      	b.n	800710a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a8:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	4918      	ldr	r1, [pc, #96]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0308 	and.w	r3, r3, #8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4910      	ldr	r1, [pc, #64]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070da:	f000 f825 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 80070de:	4602      	mov	r2, r0
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <HAL_RCC_ClockConfig+0x1b4>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	091b      	lsrs	r3, r3, #4
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	490c      	ldr	r1, [pc, #48]	; (800711c <HAL_RCC_ClockConfig+0x1b8>)
 80070ec:	5ccb      	ldrb	r3, [r1, r3]
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	fa22 f303 	lsr.w	r3, r2, r3
 80070f6:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80070fa:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <HAL_RCC_ClockConfig+0x1c0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fc fce6 	bl	8003ad0 <HAL_InitTick>
 8007104:	4603      	mov	r3, r0
 8007106:	72fb      	strb	r3, [r7, #11]

  return status;
 8007108:	7afb      	ldrb	r3, [r7, #11]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	40022000 	.word	0x40022000
 8007118:	40021000 	.word	0x40021000
 800711c:	08010e14 	.word	0x08010e14
 8007120:	20000004 	.word	0x20000004
 8007124:	200000d8 	.word	0x200000d8

08007128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	; 0x24
 800712c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	2300      	movs	r3, #0
 8007134:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007136:	4b3e      	ldr	r3, [pc, #248]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 030c 	and.w	r3, r3, #12
 800713e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007140:	4b3b      	ldr	r3, [pc, #236]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <HAL_RCC_GetSysClockFreq+0x34>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2b0c      	cmp	r3, #12
 8007154:	d121      	bne.n	800719a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d11e      	bne.n	800719a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800715c:	4b34      	ldr	r3, [pc, #208]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d107      	bne.n	8007178 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007168:	4b31      	ldr	r3, [pc, #196]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 800716a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800716e:	0a1b      	lsrs	r3, r3, #8
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	e005      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007178:	4b2d      	ldr	r3, [pc, #180]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007184:	4a2b      	ldr	r2, [pc, #172]	; (8007234 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10d      	bne.n	80071b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007198:	e00a      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b04      	cmp	r3, #4
 800719e:	d102      	bne.n	80071a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <HAL_RCC_GetSysClockFreq+0x110>)
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e004      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d101      	bne.n	80071b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071ac:	4b23      	ldr	r3, [pc, #140]	; (800723c <HAL_RCC_GetSysClockFreq+0x114>)
 80071ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b0c      	cmp	r3, #12
 80071b4:	d134      	bne.n	8007220 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071b6:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d003      	beq.n	80071ce <HAL_RCC_GetSysClockFreq+0xa6>
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d003      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0xac>
 80071cc:	e005      	b.n	80071da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80071ce:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <HAL_RCC_GetSysClockFreq+0x110>)
 80071d0:	617b      	str	r3, [r7, #20]
      break;
 80071d2:	e005      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80071d4:	4b19      	ldr	r3, [pc, #100]	; (800723c <HAL_RCC_GetSysClockFreq+0x114>)
 80071d6:	617b      	str	r3, [r7, #20]
      break;
 80071d8:	e002      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	617b      	str	r3, [r7, #20]
      break;
 80071de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071e0:	4b13      	ldr	r3, [pc, #76]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	3301      	adds	r3, #1
 80071ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071ee:	4b10      	ldr	r3, [pc, #64]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	fb02 f203 	mul.w	r2, r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	fbb2 f3f3 	udiv	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007206:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	0e5b      	lsrs	r3, r3, #25
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	3301      	adds	r3, #1
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007220:	69bb      	ldr	r3, [r7, #24]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3724      	adds	r7, #36	; 0x24
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40021000 	.word	0x40021000
 8007234:	08010e2c 	.word	0x08010e2c
 8007238:	00f42400 	.word	0x00f42400
 800723c:	007a1200 	.word	0x007a1200

08007240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007244:	4b03      	ldr	r3, [pc, #12]	; (8007254 <HAL_RCC_GetHCLKFreq+0x14>)
 8007246:	681b      	ldr	r3, [r3, #0]
}
 8007248:	4618      	mov	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000004 	.word	0x20000004

08007258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800725c:	f7ff fff0 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8007260:	4602      	mov	r2, r0
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	4904      	ldr	r1, [pc, #16]	; (8007280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800726e:	5ccb      	ldrb	r3, [r1, r3]
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007278:	4618      	mov	r0, r3
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40021000 	.word	0x40021000
 8007280:	08010e24 	.word	0x08010e24

08007284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007288:	f7ff ffda 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 800728c:	4602      	mov	r2, r0
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	0adb      	lsrs	r3, r3, #11
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	4904      	ldr	r1, [pc, #16]	; (80072ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800729a:	5ccb      	ldrb	r3, [r1, r3]
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40021000 	.word	0x40021000
 80072ac:	08010e24 	.word	0x08010e24

080072b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220f      	movs	r2, #15
 80072be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <HAL_RCC_GetClockConfig+0x5c>)
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0203 	and.w	r2, r3, #3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80072cc:	4b0f      	ldr	r3, [pc, #60]	; (800730c <HAL_RCC_GetClockConfig+0x5c>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <HAL_RCC_GetClockConfig+0x5c>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072e4:	4b09      	ldr	r3, [pc, #36]	; (800730c <HAL_RCC_GetClockConfig+0x5c>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	08db      	lsrs	r3, r3, #3
 80072ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072f2:	4b07      	ldr	r3, [pc, #28]	; (8007310 <HAL_RCC_GetClockConfig+0x60>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0207 	and.w	r2, r3, #7
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	601a      	str	r2, [r3, #0]
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40021000 	.word	0x40021000
 8007310:	40022000 	.word	0x40022000

08007314 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800731c:	2300      	movs	r3, #0
 800731e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007320:	4b2a      	ldr	r3, [pc, #168]	; (80073cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800732c:	f7ff f9d0 	bl	80066d0 <HAL_PWREx_GetVoltageRange>
 8007330:	6178      	str	r0, [r7, #20]
 8007332:	e014      	b.n	800735e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007334:	4b25      	ldr	r3, [pc, #148]	; (80073cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007338:	4a24      	ldr	r2, [pc, #144]	; (80073cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800733a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800733e:	6593      	str	r3, [r2, #88]	; 0x58
 8007340:	4b22      	ldr	r3, [pc, #136]	; (80073cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800734c:	f7ff f9c0 	bl	80066d0 <HAL_PWREx_GetVoltageRange>
 8007350:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007352:	4b1e      	ldr	r3, [pc, #120]	; (80073cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007356:	4a1d      	ldr	r2, [pc, #116]	; (80073cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800735c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007364:	d10b      	bne.n	800737e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b80      	cmp	r3, #128	; 0x80
 800736a:	d919      	bls.n	80073a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2ba0      	cmp	r3, #160	; 0xa0
 8007370:	d902      	bls.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007372:	2302      	movs	r3, #2
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	e013      	b.n	80073a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007378:	2301      	movs	r3, #1
 800737a:	613b      	str	r3, [r7, #16]
 800737c:	e010      	b.n	80073a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b80      	cmp	r3, #128	; 0x80
 8007382:	d902      	bls.n	800738a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007384:	2303      	movs	r3, #3
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	e00a      	b.n	80073a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b80      	cmp	r3, #128	; 0x80
 800738e:	d102      	bne.n	8007396 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007390:	2302      	movs	r3, #2
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	e004      	b.n	80073a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b70      	cmp	r3, #112	; 0x70
 800739a:	d101      	bne.n	80073a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800739c:	2301      	movs	r3, #1
 800739e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f023 0207 	bic.w	r2, r3, #7
 80073a8:	4909      	ldr	r1, [pc, #36]	; (80073d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80073b0:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d001      	beq.n	80073c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e000      	b.n	80073c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	40021000 	.word	0x40021000
 80073d0:	40022000 	.word	0x40022000

080073d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073dc:	2300      	movs	r3, #0
 80073de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073e0:	2300      	movs	r3, #0
 80073e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d041      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80073f8:	d02a      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80073fe:	d824      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007400:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007404:	d008      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800740a:	d81e      	bhi.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00a      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007414:	d010      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007416:	e018      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007418:	4b86      	ldr	r3, [pc, #536]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4a85      	ldr	r2, [pc, #532]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800741e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007422:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007424:	e015      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3304      	adds	r3, #4
 800742a:	2100      	movs	r1, #0
 800742c:	4618      	mov	r0, r3
 800742e:	f000 facb 	bl	80079c8 <RCCEx_PLLSAI1_Config>
 8007432:	4603      	mov	r3, r0
 8007434:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007436:	e00c      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3320      	adds	r3, #32
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fbb6 	bl	8007bb0 <RCCEx_PLLSAI2_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007448:	e003      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	74fb      	strb	r3, [r7, #19]
      break;
 800744e:	e000      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007452:	7cfb      	ldrb	r3, [r7, #19]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007458:	4b76      	ldr	r3, [pc, #472]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800745a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007466:	4973      	ldr	r1, [pc, #460]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007468:	4313      	orrs	r3, r2
 800746a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800746e:	e001      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007470:	7cfb      	ldrb	r3, [r7, #19]
 8007472:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d041      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007484:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007488:	d02a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800748a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800748e:	d824      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007494:	d008      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800749a:	d81e      	bhi.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80074a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074a4:	d010      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80074a6:	e018      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074a8:	4b62      	ldr	r3, [pc, #392]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	4a61      	ldr	r2, [pc, #388]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074b4:	e015      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3304      	adds	r3, #4
 80074ba:	2100      	movs	r1, #0
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 fa83 	bl	80079c8 <RCCEx_PLLSAI1_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074c6:	e00c      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3320      	adds	r3, #32
 80074cc:	2100      	movs	r1, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 fb6e 	bl	8007bb0 <RCCEx_PLLSAI2_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074d8:	e003      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	74fb      	strb	r3, [r7, #19]
      break;
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80074e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074e2:	7cfb      	ldrb	r3, [r7, #19]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074e8:	4b52      	ldr	r3, [pc, #328]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f6:	494f      	ldr	r1, [pc, #316]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80074fe:	e001      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007500:	7cfb      	ldrb	r3, [r7, #19]
 8007502:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 80a0 	beq.w	8007652 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007512:	2300      	movs	r3, #0
 8007514:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007516:	4b47      	ldr	r3, [pc, #284]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00d      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800752c:	4b41      	ldr	r3, [pc, #260]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800752e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007530:	4a40      	ldr	r2, [pc, #256]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007536:	6593      	str	r3, [r2, #88]	; 0x58
 8007538:	4b3e      	ldr	r3, [pc, #248]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800753a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800753c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007544:	2301      	movs	r3, #1
 8007546:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007548:	4b3b      	ldr	r3, [pc, #236]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a3a      	ldr	r2, [pc, #232]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800754e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007554:	f7fd ff1e 	bl	8005394 <HAL_GetTick>
 8007558:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800755a:	e009      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755c:	f7fd ff1a 	bl	8005394 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d902      	bls.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	74fb      	strb	r3, [r7, #19]
        break;
 800756e:	e005      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007570:	4b31      	ldr	r3, [pc, #196]	; (8007638 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0ef      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800757c:	7cfb      	ldrb	r3, [r7, #19]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d15c      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007582:	4b2c      	ldr	r3, [pc, #176]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01f      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	429a      	cmp	r2, r3
 800759e:	d019      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075a0:	4b24      	ldr	r3, [pc, #144]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075ac:	4b21      	ldr	r3, [pc, #132]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	4a20      	ldr	r2, [pc, #128]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075bc:	4b1d      	ldr	r3, [pc, #116]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c2:	4a1c      	ldr	r2, [pc, #112]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075cc:	4a19      	ldr	r2, [pc, #100]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d016      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fd fed9 	bl	8005394 <HAL_GetTick>
 80075e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075e4:	e00b      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e6:	f7fd fed5 	bl	8005394 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d902      	bls.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	74fb      	strb	r3, [r7, #19]
            break;
 80075fc:	e006      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075fe:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0ec      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800760c:	7cfb      	ldrb	r3, [r7, #19]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10c      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007612:	4b08      	ldr	r3, [pc, #32]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007622:	4904      	ldr	r1, [pc, #16]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007624:	4313      	orrs	r3, r2
 8007626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800762a:	e009      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800762c:	7cfb      	ldrb	r3, [r7, #19]
 800762e:	74bb      	strb	r3, [r7, #18]
 8007630:	e006      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007632:	bf00      	nop
 8007634:	40021000 	.word	0x40021000
 8007638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	7cfb      	ldrb	r3, [r7, #19]
 800763e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007640:	7c7b      	ldrb	r3, [r7, #17]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d105      	bne.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007646:	4b9e      	ldr	r3, [pc, #632]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764a:	4a9d      	ldr	r2, [pc, #628]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800764c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007650:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800765e:	4b98      	ldr	r3, [pc, #608]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007664:	f023 0203 	bic.w	r2, r3, #3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	4994      	ldr	r1, [pc, #592]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007680:	4b8f      	ldr	r3, [pc, #572]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	f023 020c 	bic.w	r2, r3, #12
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768e:	498c      	ldr	r1, [pc, #560]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007690:	4313      	orrs	r3, r2
 8007692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076a2:	4b87      	ldr	r3, [pc, #540]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	4983      	ldr	r1, [pc, #524]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076c4:	4b7e      	ldr	r3, [pc, #504]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	497b      	ldr	r1, [pc, #492]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0310 	and.w	r3, r3, #16
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076e6:	4b76      	ldr	r3, [pc, #472]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f4:	4972      	ldr	r1, [pc, #456]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007708:	4b6d      	ldr	r3, [pc, #436]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800770a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007716:	496a      	ldr	r1, [pc, #424]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007718:	4313      	orrs	r3, r2
 800771a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800772a:	4b65      	ldr	r3, [pc, #404]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800772c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007738:	4961      	ldr	r1, [pc, #388]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800774c:	4b5c      	ldr	r3, [pc, #368]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800774e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775a:	4959      	ldr	r1, [pc, #356]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800776e:	4b54      	ldr	r3, [pc, #336]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007774:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777c:	4950      	ldr	r1, [pc, #320]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007790:	4b4b      	ldr	r3, [pc, #300]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007796:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779e:	4948      	ldr	r1, [pc, #288]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077b2:	4b43      	ldr	r3, [pc, #268]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c0:	493f      	ldr	r1, [pc, #252]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d028      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077d4:	4b3a      	ldr	r3, [pc, #232]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e2:	4937      	ldr	r1, [pc, #220]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077f2:	d106      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077f4:	4b32      	ldr	r3, [pc, #200]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	4a31      	ldr	r2, [pc, #196]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077fe:	60d3      	str	r3, [r2, #12]
 8007800:	e011      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800780a:	d10c      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3304      	adds	r3, #4
 8007810:	2101      	movs	r1, #1
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f8d8 	bl	80079c8 <RCCEx_PLLSAI1_Config>
 8007818:	4603      	mov	r3, r0
 800781a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800781c:	7cfb      	ldrb	r3, [r7, #19]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007822:	7cfb      	ldrb	r3, [r7, #19]
 8007824:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d028      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007838:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007840:	491f      	ldr	r1, [pc, #124]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007842:	4313      	orrs	r3, r2
 8007844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007850:	d106      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007852:	4b1b      	ldr	r3, [pc, #108]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	4a1a      	ldr	r2, [pc, #104]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800785c:	60d3      	str	r3, [r2, #12]
 800785e:	e011      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007868:	d10c      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3304      	adds	r3, #4
 800786e:	2101      	movs	r1, #1
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f8a9 	bl	80079c8 <RCCEx_PLLSAI1_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800787a:	7cfb      	ldrb	r3, [r7, #19]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007880:	7cfb      	ldrb	r3, [r7, #19]
 8007882:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d02b      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789e:	4908      	ldr	r1, [pc, #32]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ae:	d109      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078b0:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	4a02      	ldr	r2, [pc, #8]	; (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ba:	60d3      	str	r3, [r2, #12]
 80078bc:	e014      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80078be:	bf00      	nop
 80078c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078cc:	d10c      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3304      	adds	r3, #4
 80078d2:	2101      	movs	r1, #1
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 f877 	bl	80079c8 <RCCEx_PLLSAI1_Config>
 80078da:	4603      	mov	r3, r0
 80078dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078de:	7cfb      	ldrb	r3, [r7, #19]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80078e4:	7cfb      	ldrb	r3, [r7, #19]
 80078e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02f      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078f4:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007902:	4928      	ldr	r1, [pc, #160]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007912:	d10d      	bne.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3304      	adds	r3, #4
 8007918:	2102      	movs	r1, #2
 800791a:	4618      	mov	r0, r3
 800791c:	f000 f854 	bl	80079c8 <RCCEx_PLLSAI1_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007924:	7cfb      	ldrb	r3, [r7, #19]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d014      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800792a:	7cfb      	ldrb	r3, [r7, #19]
 800792c:	74bb      	strb	r3, [r7, #18]
 800792e:	e011      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007938:	d10c      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3320      	adds	r3, #32
 800793e:	2102      	movs	r1, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f935 	bl	8007bb0 <RCCEx_PLLSAI2_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800794a:	7cfb      	ldrb	r3, [r7, #19]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007950:	7cfb      	ldrb	r3, [r7, #19]
 8007952:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007960:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007966:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800796e:	490d      	ldr	r1, [pc, #52]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007982:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007988:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007992:	4904      	ldr	r1, [pc, #16]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007994:	4313      	orrs	r3, r2
 8007996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800799a:	7cbb      	ldrb	r3, [r7, #18]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	40021000 	.word	0x40021000

080079a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80079ac:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a04      	ldr	r2, [pc, #16]	; (80079c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80079b2:	f043 0304 	orr.w	r3, r3, #4
 80079b6:	6013      	str	r3, [r2, #0]
}
 80079b8:	bf00      	nop
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40021000 	.word	0x40021000

080079c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079d6:	4b75      	ldr	r3, [pc, #468]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d018      	beq.n	8007a14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80079e2:	4b72      	ldr	r3, [pc, #456]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f003 0203 	and.w	r2, r3, #3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d10d      	bne.n	8007a0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
       ||
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80079fa:	4b6c      	ldr	r3, [pc, #432]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	091b      	lsrs	r3, r3, #4
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	1c5a      	adds	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
       ||
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d047      	beq.n	8007a9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
 8007a12:	e044      	b.n	8007a9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d018      	beq.n	8007a4e <RCCEx_PLLSAI1_Config+0x86>
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d825      	bhi.n	8007a6c <RCCEx_PLLSAI1_Config+0xa4>
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d002      	beq.n	8007a2a <RCCEx_PLLSAI1_Config+0x62>
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d009      	beq.n	8007a3c <RCCEx_PLLSAI1_Config+0x74>
 8007a28:	e020      	b.n	8007a6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a2a:	4b60      	ldr	r3, [pc, #384]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d11d      	bne.n	8007a72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a3a:	e01a      	b.n	8007a72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a3c:	4b5b      	ldr	r3, [pc, #364]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d116      	bne.n	8007a76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a4c:	e013      	b.n	8007a76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a4e:	4b57      	ldr	r3, [pc, #348]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10f      	bne.n	8007a7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a5a:	4b54      	ldr	r3, [pc, #336]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a6a:	e006      	b.n	8007a7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a70:	e004      	b.n	8007a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a72:	bf00      	nop
 8007a74:	e002      	b.n	8007a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a76:	bf00      	nop
 8007a78:	e000      	b.n	8007a7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10d      	bne.n	8007a9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a82:	4b4a      	ldr	r3, [pc, #296]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6819      	ldr	r1, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	430b      	orrs	r3, r1
 8007a98:	4944      	ldr	r1, [pc, #272]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d17d      	bne.n	8007ba0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007aa4:	4b41      	ldr	r3, [pc, #260]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a40      	ldr	r2, [pc, #256]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab0:	f7fd fc70 	bl	8005394 <HAL_GetTick>
 8007ab4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007ab6:	e009      	b.n	8007acc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ab8:	f7fd fc6c 	bl	8005394 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d902      	bls.n	8007acc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	73fb      	strb	r3, [r7, #15]
        break;
 8007aca:	e005      	b.n	8007ad8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007acc:	4b37      	ldr	r3, [pc, #220]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1ef      	bne.n	8007ab8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d160      	bne.n	8007ba0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d111      	bne.n	8007b08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ae4:	4b31      	ldr	r3, [pc, #196]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6892      	ldr	r2, [r2, #8]
 8007af4:	0211      	lsls	r1, r2, #8
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	68d2      	ldr	r2, [r2, #12]
 8007afa:	0912      	lsrs	r2, r2, #4
 8007afc:	0452      	lsls	r2, r2, #17
 8007afe:	430a      	orrs	r2, r1
 8007b00:	492a      	ldr	r1, [pc, #168]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	610b      	str	r3, [r1, #16]
 8007b06:	e027      	b.n	8007b58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d112      	bne.n	8007b34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b0e:	4b27      	ldr	r3, [pc, #156]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007b16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6892      	ldr	r2, [r2, #8]
 8007b1e:	0211      	lsls	r1, r2, #8
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6912      	ldr	r2, [r2, #16]
 8007b24:	0852      	lsrs	r2, r2, #1
 8007b26:	3a01      	subs	r2, #1
 8007b28:	0552      	lsls	r2, r2, #21
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	491f      	ldr	r1, [pc, #124]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	610b      	str	r3, [r1, #16]
 8007b32:	e011      	b.n	8007b58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b34:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6892      	ldr	r2, [r2, #8]
 8007b44:	0211      	lsls	r1, r2, #8
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6952      	ldr	r2, [r2, #20]
 8007b4a:	0852      	lsrs	r2, r2, #1
 8007b4c:	3a01      	subs	r2, #1
 8007b4e:	0652      	lsls	r2, r2, #25
 8007b50:	430a      	orrs	r2, r1
 8007b52:	4916      	ldr	r1, [pc, #88]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b58:	4b14      	ldr	r3, [pc, #80]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a13      	ldr	r2, [pc, #76]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b64:	f7fd fc16 	bl	8005394 <HAL_GetTick>
 8007b68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b6a:	e009      	b.n	8007b80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b6c:	f7fd fc12 	bl	8005394 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d902      	bls.n	8007b80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	73fb      	strb	r3, [r7, #15]
          break;
 8007b7e:	e005      	b.n	8007b8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0ef      	beq.n	8007b6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007b92:	4b06      	ldr	r3, [pc, #24]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	4904      	ldr	r1, [pc, #16]	; (8007bac <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	40021000 	.word	0x40021000

08007bb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007bbe:	4b6a      	ldr	r3, [pc, #424]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d018      	beq.n	8007bfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007bca:	4b67      	ldr	r3, [pc, #412]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f003 0203 	and.w	r2, r3, #3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d10d      	bne.n	8007bf6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007be2:	4b61      	ldr	r3, [pc, #388]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	091b      	lsrs	r3, r3, #4
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d047      	beq.n	8007c86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
 8007bfa:	e044      	b.n	8007c86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d018      	beq.n	8007c36 <RCCEx_PLLSAI2_Config+0x86>
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d825      	bhi.n	8007c54 <RCCEx_PLLSAI2_Config+0xa4>
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d002      	beq.n	8007c12 <RCCEx_PLLSAI2_Config+0x62>
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d009      	beq.n	8007c24 <RCCEx_PLLSAI2_Config+0x74>
 8007c10:	e020      	b.n	8007c54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c12:	4b55      	ldr	r3, [pc, #340]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d11d      	bne.n	8007c5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c22:	e01a      	b.n	8007c5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c24:	4b50      	ldr	r3, [pc, #320]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d116      	bne.n	8007c5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c34:	e013      	b.n	8007c5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c36:	4b4c      	ldr	r3, [pc, #304]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10f      	bne.n	8007c62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c42:	4b49      	ldr	r3, [pc, #292]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c52:	e006      	b.n	8007c62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	73fb      	strb	r3, [r7, #15]
      break;
 8007c58:	e004      	b.n	8007c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e002      	b.n	8007c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10d      	bne.n	8007c86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c6a:	4b3f      	ldr	r3, [pc, #252]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6819      	ldr	r1, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	4939      	ldr	r1, [pc, #228]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d167      	bne.n	8007d5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007c8c:	4b36      	ldr	r3, [pc, #216]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a35      	ldr	r2, [pc, #212]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c98:	f7fd fb7c 	bl	8005394 <HAL_GetTick>
 8007c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007c9e:	e009      	b.n	8007cb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ca0:	f7fd fb78 	bl	8005394 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d902      	bls.n	8007cb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8007cb2:	e005      	b.n	8007cc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007cb4:	4b2c      	ldr	r3, [pc, #176]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1ef      	bne.n	8007ca0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d14a      	bne.n	8007d5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d111      	bne.n	8007cf0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ccc:	4b26      	ldr	r3, [pc, #152]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	6892      	ldr	r2, [r2, #8]
 8007cdc:	0211      	lsls	r1, r2, #8
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68d2      	ldr	r2, [r2, #12]
 8007ce2:	0912      	lsrs	r2, r2, #4
 8007ce4:	0452      	lsls	r2, r2, #17
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	491f      	ldr	r1, [pc, #124]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	614b      	str	r3, [r1, #20]
 8007cee:	e011      	b.n	8007d14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007cf0:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007cf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6892      	ldr	r2, [r2, #8]
 8007d00:	0211      	lsls	r1, r2, #8
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6912      	ldr	r2, [r2, #16]
 8007d06:	0852      	lsrs	r2, r2, #1
 8007d08:	3a01      	subs	r2, #1
 8007d0a:	0652      	lsls	r2, r2, #25
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	4916      	ldr	r1, [pc, #88]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d14:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a13      	ldr	r2, [pc, #76]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d20:	f7fd fb38 	bl	8005394 <HAL_GetTick>
 8007d24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d26:	e009      	b.n	8007d3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d28:	f7fd fb34 	bl	8005394 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d902      	bls.n	8007d3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	73fb      	strb	r3, [r7, #15]
          break;
 8007d3a:	e005      	b.n	8007d48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0ef      	beq.n	8007d28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d4e:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	4904      	ldr	r1, [pc, #16]	; (8007d68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40021000 	.word	0x40021000

08007d6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e0be      	b.n	8007efc <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d108      	bne.n	8007d98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d8e:	d009      	beq.n	8007da4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	61da      	str	r2, [r3, #28]
 8007d96:	e005      	b.n	8007da4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fb fdff 	bl	80039bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dde:	d902      	bls.n	8007de6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e002      	b.n	8007dec <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007df4:	d007      	beq.n	8007e06 <HAL_SPI_Init+0x9a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dfe:	d002      	beq.n	8007e06 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e34:	431a      	orrs	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e48:	ea42 0103 	orr.w	r1, r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e64:	d11b      	bne.n	8007e9e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e76:	d903      	bls.n	8007e80 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	631a      	str	r2, [r3, #48]	; 0x30
 8007e7e:	e002      	b.n	8007e86 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d107      	bne.n	8007e9e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	0c1b      	lsrs	r3, r3, #16
 8007ea4:	f003 0204 	and.w	r2, r3, #4
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ec4:	ea42 0103 	orr.w	r1, r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ede:	d105      	bne.n	8007eec <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	b292      	uxth	r2, r2
 8007eea:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e01a      	b.n	8007f4c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2202      	movs	r2, #2
 8007f1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fb fd88 	bl	8003a44 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08a      	sub	sp, #40	; 0x28
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	4613      	mov	r3, r2
 8007f62:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	77fb      	strb	r3, [r7, #31]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f74:	d112      	bne.n	8007f9c <HAL_SPI_Receive+0x48>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10e      	bne.n	8007f9c <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2204      	movs	r2, #4
 8007f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f86:	88fa      	ldrh	r2, [r7, #6]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f9bb 	bl	800830e <HAL_SPI_TransmitReceive>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	e1b4      	b.n	8008306 <HAL_SPI_Receive+0x3b2>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <HAL_SPI_Receive+0x56>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e1ad      	b.n	8008306 <HAL_SPI_Receive+0x3b2>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fb2:	f7fd f9ef 	bl	8005394 <HAL_GetTick>
 8007fb6:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d002      	beq.n	8007fca <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fc8:	e194      	b.n	80082f4 <HAL_SPI_Receive+0x3a0>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <HAL_SPI_Receive+0x82>
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fda:	e18b      	b.n	80082f4 <HAL_SPI_Receive+0x3a0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2204      	movs	r2, #4
 8007fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	88fa      	ldrh	r2, [r7, #6]
 8007ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	88fa      	ldrh	r2, [r7, #6]
 8007ffc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008026:	d118      	bne.n	800805a <HAL_SPI_Receive+0x106>
  {
    SPI_RESET_CRC(hspi);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008046:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800804e:	b29b      	uxth	r3, r3
 8008050:	3b01      	subs	r3, #1
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008062:	d908      	bls.n	8008076 <HAL_SPI_Receive+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008072:	605a      	str	r2, [r3, #4]
 8008074:	e007      	b.n	8008086 <HAL_SPI_Receive+0x132>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008084:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800808e:	d10f      	bne.n	80080b0 <HAL_SPI_Receive+0x15c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800809e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d007      	beq.n	80080ce <HAL_SPI_Receive+0x17a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080d6:	d867      	bhi.n	80081a8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80080d8:	e030      	b.n	800813c <HAL_SPI_Receive+0x1e8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d117      	bne.n	8008118 <HAL_SPI_Receive+0x1c4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f103 020c 	add.w	r2, r3, #12
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	7812      	ldrb	r2, [r2, #0]
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008116:	e011      	b.n	800813c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008118:	f7fd f93c 	bl	8005394 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	429a      	cmp	r2, r3
 8008126:	d803      	bhi.n	8008130 <HAL_SPI_Receive+0x1dc>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d102      	bne.n	8008136 <HAL_SPI_Receive+0x1e2>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d102      	bne.n	800813c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	77fb      	strb	r3, [r7, #31]
          goto error;
 800813a:	e0db      	b.n	80082f4 <HAL_SPI_Receive+0x3a0>
    while (hspi->RxXferCount > 0U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1c8      	bne.n	80080da <HAL_SPI_Receive+0x186>
 8008148:	e034      	b.n	80081b4 <HAL_SPI_Receive+0x260>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b01      	cmp	r3, #1
 8008156:	d115      	bne.n	8008184 <HAL_SPI_Receive+0x230>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	b292      	uxth	r2, r2
 8008164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	1c9a      	adds	r2, r3, #2
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008182:	e011      	b.n	80081a8 <HAL_SPI_Receive+0x254>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008184:	f7fd f906 	bl	8005394 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	429a      	cmp	r2, r3
 8008192:	d803      	bhi.n	800819c <HAL_SPI_Receive+0x248>
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	d102      	bne.n	80081a2 <HAL_SPI_Receive+0x24e>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d102      	bne.n	80081a8 <HAL_SPI_Receive+0x254>
        {
          errorcode = HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081a6:	e0a5      	b.n	80082f4 <HAL_SPI_Receive+0x3a0>
    while (hspi->RxXferCount > 0U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1ca      	bne.n	800814a <HAL_SPI_Receive+0x1f6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081bc:	d175      	bne.n	80082aa <HAL_SPI_Receive+0x356>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081cc:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2201      	movs	r2, #1
 80081d6:	2101      	movs	r1, #1
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f001 f9af 	bl	800953c <SPI_WaitFlagStateUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_SPI_Receive+0x296>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	77fb      	strb	r3, [r7, #31]
      goto error;
 80081e8:	e084      	b.n	80082f4 <HAL_SPI_Receive+0x3a0>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081f2:	d907      	bls.n	8008204 <HAL_SPI_Receive+0x2b0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68da      	ldr	r2, [r3, #12]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	b292      	uxth	r2, r2
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	e008      	b.n	8008216 <HAL_SPI_Receive+0x2c2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f103 020c 	add.w	r2, r3, #12
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	7812      	ldrb	r2, [r2, #0]
 8008212:	b2d2      	uxtb	r2, r2
 8008214:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2201      	movs	r2, #1
 800821e:	2101      	movs	r1, #1
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f001 f98b 	bl	800953c <SPI_WaitFlagStateUntilTimeout>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d008      	beq.n	800823e <HAL_SPI_Receive+0x2ea>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008230:	f043 0202 	orr.w	r2, r3, #2
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	77fb      	strb	r3, [r7, #31]
      goto error;
 800823c:	e05a      	b.n	80082f4 <HAL_SPI_Receive+0x3a0>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008246:	d105      	bne.n	8008254 <HAL_SPI_Receive+0x300>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	e02a      	b.n	80082aa <HAL_SPI_Receive+0x356>
    }
    else
    {
      /* Read 8bit CRC */
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	330c      	adds	r3, #12
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008260:	697b      	ldr	r3, [r7, #20]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800826a:	d11e      	bne.n	80082aa <HAL_SPI_Receive+0x356>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	2b02      	cmp	r3, #2
 8008272:	d11a      	bne.n	80082aa <HAL_SPI_Receive+0x356>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2201      	movs	r2, #1
 800827c:	2101      	movs	r1, #1
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f001 f95c 	bl	800953c <SPI_WaitFlagStateUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d008      	beq.n	800829c <HAL_SPI_Receive+0x348>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800828e:	f043 0202 	orr.w	r2, r3, #2
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	77fb      	strb	r3, [r7, #31]
          goto error;
 800829a:	e02b      	b.n	80082f4 <HAL_SPI_Receive+0x3a0>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	330c      	adds	r3, #12
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	617b      	str	r3, [r7, #20]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 80082a8:	697b      	ldr	r3, [r7, #20]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f001 fa5e 	bl	8009770 <SPI_EndRxTransaction>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_SPI_Receive+0x36c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2220      	movs	r2, #32
 80082be:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b10      	cmp	r3, #16
 80082cc:	d10a      	bne.n	80082e4 <HAL_SPI_Receive+0x390>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d2:	f043 0202 	orr.w	r2, r3, #2
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80082e2:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <HAL_SPI_Receive+0x39e>
  {
    errorcode = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e000      	b.n	80082f4 <HAL_SPI_Receive+0x3a0>
  }

error :
 80082f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008304:	7ffb      	ldrb	r3, [r7, #31]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b090      	sub	sp, #64	; 0x40
 8008312:	af02      	add	r7, sp, #8
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
 800831a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008320:	2301      	movs	r3, #1
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x2a>
 8008334:	2302      	movs	r3, #2
 8008336:	e2c8      	b.n	80088ca <HAL_SPI_TransmitReceive+0x5bc>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008340:	f7fd f828 	bl	8005394 <HAL_GetTick>
 8008344:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800834c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  tmp_mode            = hspi->Init.Mode;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
  initial_TxXferCount = Size;
 8008356:	887b      	ldrh	r3, [r7, #2]
 8008358:	847b      	strh	r3, [r7, #34]	; 0x22
  initial_RxXferCount = Size;
 800835a:	887b      	ldrh	r3, [r7, #2]
 800835c:	843b      	strh	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	61fb      	str	r3, [r7, #28]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	61bb      	str	r3, [r7, #24]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800836e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008372:	2b01      	cmp	r3, #1
 8008374:	d00f      	beq.n	8008396 <HAL_SPI_TransmitReceive+0x88>
 8008376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800837c:	d107      	bne.n	800838e <HAL_SPI_TransmitReceive+0x80>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d103      	bne.n	800838e <HAL_SPI_TransmitReceive+0x80>
 8008386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800838a:	2b04      	cmp	r3, #4
 800838c:	d003      	beq.n	8008396 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 800838e:	2302      	movs	r3, #2
 8008390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    goto error;
 8008394:	e28f      	b.n	80088b6 <HAL_SPI_TransmitReceive+0x5a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x9a>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x9a>
 80083a2:	887b      	ldrh	r3, [r7, #2]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d103      	bne.n	80083b0 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    goto error;
 80083ae:	e282      	b.n	80088b6 <HAL_SPI_TransmitReceive+0x5a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d003      	beq.n	80083c4 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2205      	movs	r2, #5
 80083c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	887a      	ldrh	r2, [r7, #2]
 80083d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	887a      	ldrh	r2, [r7, #2]
 80083dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	887a      	ldrh	r2, [r7, #2]
 80083ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	887a      	ldrh	r2, [r7, #2]
 80083f0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008406:	d10f      	bne.n	8008428 <HAL_SPI_TransmitReceive+0x11a>
  {
    SPI_RESET_CRC(hspi);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008426:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008430:	d802      	bhi.n	8008438 <HAL_SPI_TransmitReceive+0x12a>
 8008432:	8c3b      	ldrh	r3, [r7, #32]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d908      	bls.n	800844a <HAL_SPI_TransmitReceive+0x13c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008446:	605a      	str	r2, [r3, #4]
 8008448:	e007      	b.n	800845a <HAL_SPI_TransmitReceive+0x14c>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008458:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d007      	beq.n	8008478 <HAL_SPI_TransmitReceive+0x16a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008476:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008480:	f240 80a4 	bls.w	80085cc <HAL_SPI_TransmitReceive+0x2be>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_SPI_TransmitReceive+0x186>
 800848c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800848e:	2b01      	cmp	r3, #1
 8008490:	f040 808e 	bne.w	80085b0 <HAL_SPI_TransmitReceive+0x2a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	881a      	ldrh	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	1c9a      	adds	r2, r3, #2
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084b8:	e07a      	b.n	80085b0 <HAL_SPI_TransmitReceive+0x2a2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d13f      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x23a>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d03a      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x23a>
 80084d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d137      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x23a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	881a      	ldrh	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	1c9a      	adds	r2, r3, #2
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d11e      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x23a>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008512:	d119      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x23a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10c      	bne.n	8008538 <HAL_SPI_TransmitReceive+0x22a>
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	f003 0308 	and.w	r3, r3, #8
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <HAL_SPI_TransmitReceive+0x22a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008536:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008546:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	d11c      	bne.n	8008590 <HAL_SPI_TransmitReceive+0x282>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d016      	beq.n	8008590 <HAL_SPI_TransmitReceive+0x282>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856c:	b292      	uxth	r2, r2
 800856e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	1c9a      	adds	r2, r3, #2
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800858c:	2301      	movs	r3, #1
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008590:	f7fc ff00 	bl	8005394 <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800859c:	429a      	cmp	r2, r3
 800859e:	d807      	bhi.n	80085b0 <HAL_SPI_TransmitReceive+0x2a2>
 80085a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a6:	d003      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x2a2>
      {
        errorcode = HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        goto error;
 80085ae:	e182      	b.n	80088b6 <HAL_SPI_TransmitReceive+0x5a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f47f af7f 	bne.w	80084ba <HAL_SPI_TransmitReceive+0x1ac>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f47f af78 	bne.w	80084ba <HAL_SPI_TransmitReceive+0x1ac>
 80085ca:	e103      	b.n	80087d4 <HAL_SPI_TransmitReceive+0x4c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <HAL_SPI_TransmitReceive+0x2ce>
 80085d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	f040 80ef 	bne.w	80087ba <HAL_SPI_TransmitReceive+0x4ac>
    {
      if (hspi->TxXferCount > 1U)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d912      	bls.n	800860c <HAL_SPI_TransmitReceive+0x2fe>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	881a      	ldrh	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f6:	1c9a      	adds	r2, r3, #2
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008600:	b29b      	uxth	r3, r3
 8008602:	3b02      	subs	r3, #2
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	87da      	strh	r2, [r3, #62]	; 0x3e
 800860a:	e0d6      	b.n	80087ba <HAL_SPI_TransmitReceive+0x4ac>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	330c      	adds	r3, #12
 8008616:	7812      	ldrb	r2, [r2, #0]
 8008618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008632:	e0c2      	b.n	80087ba <HAL_SPI_TransmitReceive+0x4ac>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b02      	cmp	r3, #2
 8008640:	d158      	bne.n	80086f4 <HAL_SPI_TransmitReceive+0x3e6>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d053      	beq.n	80086f4 <HAL_SPI_TransmitReceive+0x3e6>
 800864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864e:	2b01      	cmp	r3, #1
 8008650:	d150      	bne.n	80086f4 <HAL_SPI_TransmitReceive+0x3e6>
      {
        if (hspi->TxXferCount > 1U)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b01      	cmp	r3, #1
 800865a:	d912      	bls.n	8008682 <HAL_SPI_TransmitReceive+0x374>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	881a      	ldrh	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866c:	1c9a      	adds	r2, r3, #2
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008676:	b29b      	uxth	r3, r3
 8008678:	3b02      	subs	r3, #2
 800867a:	b29a      	uxth	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008680:	e012      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x39a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	330c      	adds	r3, #12
 800868c:	7812      	ldrb	r2, [r2, #0]
 800868e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800869e:	b29b      	uxth	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d11e      	bne.n	80086f4 <HAL_SPI_TransmitReceive+0x3e6>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086be:	d119      	bne.n	80086f4 <HAL_SPI_TransmitReceive+0x3e6>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10c      	bne.n	80086e4 <HAL_SPI_TransmitReceive+0x3d6>
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	f003 0308 	and.w	r3, r3, #8
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <HAL_SPI_TransmitReceive+0x3d6>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e2:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086f2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d148      	bne.n	8008794 <HAL_SPI_TransmitReceive+0x486>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d042      	beq.n	8008794 <HAL_SPI_TransmitReceive+0x486>
      {
        if (hspi->RxXferCount > 1U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b01      	cmp	r3, #1
 8008718:	d923      	bls.n	8008762 <HAL_SPI_TransmitReceive+0x454>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	b292      	uxth	r2, r2
 8008726:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872c:	1c9a      	adds	r2, r3, #2
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b02      	subs	r3, #2
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b01      	cmp	r3, #1
 800874e:	d81f      	bhi.n	8008790 <HAL_SPI_TransmitReceive+0x482>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800875e:	605a      	str	r2, [r3, #4]
 8008760:	e016      	b.n	8008790 <HAL_SPI_TransmitReceive+0x482>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f103 020c 	add.w	r2, r3, #12
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	7812      	ldrb	r2, [r2, #0]
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008784:	b29b      	uxth	r3, r3
 8008786:	3b01      	subs	r3, #1
 8008788:	b29a      	uxth	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008790:	2301      	movs	r3, #1
 8008792:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008794:	f7fc fdfe 	bl	8005394 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d803      	bhi.n	80087ac <HAL_SPI_TransmitReceive+0x49e>
 80087a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087aa:	d102      	bne.n	80087b2 <HAL_SPI_TransmitReceive+0x4a4>
 80087ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d103      	bne.n	80087ba <HAL_SPI_TransmitReceive+0x4ac>
      {
        errorcode = HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        goto error;
 80087b8:	e07d      	b.n	80088b6 <HAL_SPI_TransmitReceive+0x5a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f47f af37 	bne.w	8008634 <HAL_SPI_TransmitReceive+0x326>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f47f af30 	bne.w	8008634 <HAL_SPI_TransmitReceive+0x326>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087dc:	d146      	bne.n	800886c <HAL_SPI_TransmitReceive+0x55e>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e4:	2201      	movs	r2, #1
 80087e6:	2101      	movs	r1, #1
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fea7 	bl	800953c <SPI_WaitFlagStateUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d009      	beq.n	8008808 <HAL_SPI_TransmitReceive+0x4fa>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f8:	f043 0202 	orr.w	r2, r3, #2
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      goto error;
 8008806:	e056      	b.n	80088b6 <HAL_SPI_TransmitReceive+0x5a8>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008810:	d105      	bne.n	800881e <HAL_SPI_TransmitReceive+0x510>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	e026      	b.n	800886c <HAL_SPI_TransmitReceive+0x55e>
    }
    else
    {
      /* Read 8bit CRC */
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	330c      	adds	r3, #12
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b2db      	uxtb	r3, r3
 8008828:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800882a:	697b      	ldr	r3, [r7, #20]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	2b02      	cmp	r3, #2
 8008832:	d11b      	bne.n	800886c <HAL_SPI_TransmitReceive+0x55e>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800883a:	2201      	movs	r2, #1
 800883c:	2101      	movs	r1, #1
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 fe7c 	bl	800953c <SPI_WaitFlagStateUntilTimeout>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d009      	beq.n	800885e <HAL_SPI_TransmitReceive+0x550>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884e:	f043 0202 	orr.w	r2, r3, #2
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
          goto error;
 800885c:	e02b      	b.n	80088b6 <HAL_SPI_TransmitReceive+0x5a8>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	330c      	adds	r3, #12
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	617b      	str	r3, [r7, #20]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800886a:	697b      	ldr	r3, [r7, #20]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f003 0310 	and.w	r3, r3, #16
 8008876:	2b10      	cmp	r3, #16
 8008878:	d10d      	bne.n	8008896 <HAL_SPI_TransmitReceive+0x588>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800887e:	f043 0202 	orr.w	r2, r3, #2
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800888e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 ffc0 	bl	8009820 <SPI_EndRxTxTransaction>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d006      	beq.n	80088b4 <HAL_SPI_TransmitReceive+0x5a6>
  {
    errorcode = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	661a      	str	r2, [r3, #96]	; 0x60
 80088b2:	e000      	b.n	80088b6 <HAL_SPI_TransmitReceive+0x5a8>
  }

error :
 80088b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80088c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3738      	adds	r7, #56	; 0x38
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_SPI_Transmit_IT+0x20>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e087      	b.n	8008a04 <HAL_SPI_Transmit_IT+0x130>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <HAL_SPI_Transmit_IT+0x34>
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800890c:	e075      	b.n	80089fa <HAL_SPI_Transmit_IT+0x126>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b01      	cmp	r3, #1
 8008918:	d002      	beq.n	8008920 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800891a:	2302      	movs	r3, #2
 800891c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800891e:	e06c      	b.n	80089fa <HAL_SPI_Transmit_IT+0x126>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2203      	movs	r2, #3
 8008924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	88fa      	ldrh	r2, [r7, #6]
 8008938:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	88fa      	ldrh	r2, [r7, #6]
 800893e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008964:	d903      	bls.n	800896e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4a29      	ldr	r2, [pc, #164]	; (8008a10 <HAL_SPI_Transmit_IT+0x13c>)
 800896a:	651a      	str	r2, [r3, #80]	; 0x50
 800896c:	e002      	b.n	8008974 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	4a28      	ldr	r2, [pc, #160]	; (8008a14 <HAL_SPI_Transmit_IT+0x140>)
 8008972:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800897c:	d10f      	bne.n	800899e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800898c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800899c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a6:	d10f      	bne.n	80089c8 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089c6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80089d6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e2:	2b40      	cmp	r3, #64	; 0x40
 80089e4:	d008      	beq.n	80089f8 <HAL_SPI_Transmit_IT+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	e000      	b.n	80089fa <HAL_SPI_Transmit_IT+0x126>
  }

error :
 80089f8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	080094dd 	.word	0x080094dd
 8008a14:	0800947d 	.word	0x0800947d

08008a18 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d110      	bne.n	8008a54 <HAL_SPI_Receive_IT+0x3c>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a3a:	d10b      	bne.n	8008a54 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2204      	movs	r2, #4
 8008a40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 f8bc 	bl	8008bc8 <HAL_SPI_TransmitReceive_IT>
 8008a50:	4603      	mov	r3, r0
 8008a52:	e0b1      	b.n	8008bb8 <HAL_SPI_Receive_IT+0x1a0>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d101      	bne.n	8008a62 <HAL_SPI_Receive_IT+0x4a>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	e0aa      	b.n	8008bb8 <HAL_SPI_Receive_IT+0x1a0>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d002      	beq.n	8008a7c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8008a76:	2302      	movs	r3, #2
 8008a78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a7a:	e098      	b.n	8008bae <HAL_SPI_Receive_IT+0x196>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_SPI_Receive_IT+0x70>
 8008a82:	88fb      	ldrh	r3, [r7, #6]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d102      	bne.n	8008a8e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a8c:	e08f      	b.n	8008bae <HAL_SPI_Receive_IT+0x196>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2204      	movs	r2, #4
 8008a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	88fa      	ldrh	r2, [r7, #6]
 8008aa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ad2:	d90b      	bls.n	8008aec <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ae2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4a36      	ldr	r2, [pc, #216]	; (8008bc0 <HAL_SPI_Receive_IT+0x1a8>)
 8008ae8:	64da      	str	r2, [r3, #76]	; 0x4c
 8008aea:	e00a      	b.n	8008b02 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008afa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4a31      	ldr	r2, [pc, #196]	; (8008bc4 <HAL_SPI_Receive_IT+0x1ac>)
 8008b00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b0a:	d10f      	bne.n	8008b2c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b2a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b34:	d11f      	bne.n	8008b76 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b44:	d806      	bhi.n	8008b54 <HAL_SPI_Receive_IT+0x13c>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d102      	bne.n	8008b54 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2202      	movs	r2, #2
 8008b52:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	e002      	b.n	8008b7c <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008b8a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b40      	cmp	r3, #64	; 0x40
 8008b98:	d008      	beq.n	8008bac <HAL_SPI_Receive_IT+0x194>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	e000      	b.n	8008bae <HAL_SPI_Receive_IT+0x196>
  }

error :
 8008bac:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	080093f5 	.word	0x080093f5
 8008bc4:	08009335 	.word	0x08009335

08008bc8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d101      	bne.n	8008be8 <HAL_SPI_TransmitReceive_IT+0x20>
 8008be4:	2302      	movs	r3, #2
 8008be6:	e0b9      	b.n	8008d5c <HAL_SPI_TransmitReceive_IT+0x194>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bf6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008bfe:	7dbb      	ldrb	r3, [r7, #22]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d00d      	beq.n	8008c20 <HAL_SPI_TransmitReceive_IT+0x58>
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c0a:	d106      	bne.n	8008c1a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d102      	bne.n	8008c1a <HAL_SPI_TransmitReceive_IT+0x52>
 8008c14:	7dbb      	ldrb	r3, [r7, #22]
 8008c16:	2b04      	cmp	r3, #4
 8008c18:	d002      	beq.n	8008c20 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c1e:	e098      	b.n	8008d52 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008c2c:	887b      	ldrh	r3, [r7, #2]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c36:	e08c      	b.n	8008d52 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d003      	beq.n	8008c4c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2205      	movs	r2, #5
 8008c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	887a      	ldrh	r2, [r7, #2]
 8008c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	887a      	ldrh	r2, [r7, #2]
 8008c62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	887a      	ldrh	r2, [r7, #2]
 8008c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	887a      	ldrh	r2, [r7, #2]
 8008c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c82:	d906      	bls.n	8008c92 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4a38      	ldr	r2, [pc, #224]	; (8008d68 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8008c88:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4a37      	ldr	r2, [pc, #220]	; (8008d6c <HAL_SPI_TransmitReceive_IT+0x1a4>)
 8008c8e:	651a      	str	r2, [r3, #80]	; 0x50
 8008c90:	e005      	b.n	8008c9e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4a36      	ldr	r2, [pc, #216]	; (8008d70 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 8008c96:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4a36      	ldr	r2, [pc, #216]	; (8008d74 <HAL_SPI_TransmitReceive_IT+0x1ac>)
 8008c9c:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca6:	d11f      	bne.n	8008ce8 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cb6:	d806      	bhi.n	8008cc6 <HAL_SPI_TransmitReceive_IT+0xfe>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d102      	bne.n	8008cc6 <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	e002      	b.n	8008cee <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008cf6:	d802      	bhi.n	8008cfe <HAL_SPI_TransmitReceive_IT+0x136>
 8008cf8:	887b      	ldrh	r3, [r7, #2]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d908      	bls.n	8008d10 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	e007      	b.n	8008d20 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d1e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8008d2e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3a:	2b40      	cmp	r3, #64	; 0x40
 8008d3c:	d008      	beq.n	8008d50 <HAL_SPI_TransmitReceive_IT+0x188>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e000      	b.n	8008d52 <HAL_SPI_TransmitReceive_IT+0x18a>
  }

error :
 8008d50:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	371c      	adds	r7, #28
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	080091c1 	.word	0x080091c1
 8008d6c:	08009271 	.word	0x08009271
 8008d70:	08008fcd 	.word	0x08008fcd
 8008d74:	08009105 	.word	0x08009105

08008d78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	099b      	lsrs	r3, r3, #6
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10f      	bne.n	8008dbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	099b      	lsrs	r3, r3, #6
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	4798      	blx	r3
    return;
 8008dba:	e0d7      	b.n	8008f6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00a      	beq.n	8008dde <HAL_SPI_IRQHandler+0x66>
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	09db      	lsrs	r3, r3, #7
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d004      	beq.n	8008dde <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	4798      	blx	r3
    return;
 8008ddc:	e0c6      	b.n	8008f6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10c      	bne.n	8008e04 <HAL_SPI_IRQHandler+0x8c>
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	099b      	lsrs	r3, r3, #6
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	0a1b      	lsrs	r3, r3, #8
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 80b4 	beq.w	8008f6c <HAL_SPI_IRQHandler+0x1f4>
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	095b      	lsrs	r3, r3, #5
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 80ad 	beq.w	8008f6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	099b      	lsrs	r3, r3, #6
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d023      	beq.n	8008e66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d011      	beq.n	8008e4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e2e:	f043 0204 	orr.w	r2, r3, #4
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	e00b      	b.n	8008e66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e4e:	2300      	movs	r3, #0
 8008e50:	613b      	str	r3, [r7, #16]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	613b      	str	r3, [r7, #16]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	613b      	str	r3, [r7, #16]
 8008e62:	693b      	ldr	r3, [r7, #16]
        return;
 8008e64:	e082      	b.n	8008f6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d014      	beq.n	8008e9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e76:	f043 0201 	orr.w	r2, r3, #1
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	0a1b      	lsrs	r3, r3, #8
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00c      	beq.n	8008ec2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eac:	f043 0208 	orr.w	r2, r3, #8
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60bb      	str	r3, [r7, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	60bb      	str	r3, [r7, #8]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d04f      	beq.n	8008f6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008ed8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <HAL_SPI_IRQHandler+0x17e>
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d034      	beq.n	8008f60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 0203 	bic.w	r2, r2, #3
 8008f04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d011      	beq.n	8008f32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f12:	4a18      	ldr	r2, [pc, #96]	; (8008f74 <HAL_SPI_IRQHandler+0x1fc>)
 8008f14:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fc fb4c 	bl	80055b8 <HAL_DMA_Abort_IT>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d005      	beq.n	8008f32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d016      	beq.n	8008f68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3e:	4a0d      	ldr	r2, [pc, #52]	; (8008f74 <HAL_SPI_IRQHandler+0x1fc>)
 8008f40:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fc fb36 	bl	80055b8 <HAL_DMA_Abort_IT>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008f5e:	e003      	b.n	8008f68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f813 	bl	8008f8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008f66:	e000      	b.n	8008f6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008f68:	bf00      	nop
    return;
 8008f6a:	bf00      	nop
  }
}
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	08008fa1 	.word	0x08008fa1

08008f78 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff ffe5 	bl	8008f8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d923      	bls.n	8009028 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	b292      	uxth	r2, r2
 8008fec:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff2:	1c9a      	adds	r2, r3, #2
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	3b02      	subs	r3, #2
 8009002:	b29a      	uxth	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009010:	b29b      	uxth	r3, r3
 8009012:	2b01      	cmp	r3, #1
 8009014:	d11f      	bne.n	8009056 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009024:	605a      	str	r2, [r3, #4]
 8009026:	e016      	b.n	8009056 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f103 020c 	add.w	r2, r3, #12
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	7812      	ldrb	r2, [r2, #0]
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800904a:	b29b      	uxth	r3, r3
 800904c:	3b01      	subs	r3, #1
 800904e:	b29a      	uxth	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800905c:	b29b      	uxth	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d120      	bne.n	80090a4 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800906a:	d10b      	bne.n	8009084 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800907a:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a0b      	ldr	r2, [pc, #44]	; (80090ac <SPI_2linesRxISR_8BIT+0xe0>)
 8009080:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8009082:	e00f      	b.n	80090a4 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009092:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fc04 	bl	80098ac <SPI_CloseRxTx_ISR>
    }
  }
}
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	080090b1 	.word	0x080090b1

080090b0 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Read 8bit CRC to flush Data Register */
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	330c      	adds	r3, #12
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80090c8:	68fb      	ldr	r3, [r7, #12]

  hspi->CRCSize--;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ce:	1e5a      	subs	r2, r3, #1
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10f      	bne.n	80090fc <SPI_2linesRxISR_8BITCRC+0x4c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80090ea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d102      	bne.n	80090fc <SPI_2linesRxISR_8BITCRC+0x4c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fbd8 	bl	80098ac <SPI_CloseRxTx_ISR>
    }
  }
}
 80090fc:	bf00      	nop
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b01      	cmp	r3, #1
 8009114:	d912      	bls.n	800913c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911a:	881a      	ldrh	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009126:	1c9a      	adds	r2, r3, #2
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b02      	subs	r3, #2
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800913a:	e012      	b.n	8009162 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	330c      	adds	r3, #12
 8009146:	7812      	ldrb	r2, [r2, #0]
 8009148:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d126      	bne.n	80091ba <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009174:	d110      	bne.n	8009198 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009184:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009194:	605a      	str	r2, [r3, #4]
      return;
 8009196:	e010      	b.n	80091ba <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091a6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fb79 	bl	80098ac <SPI_CloseRxTx_ISR>
    }
  }
}
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	b292      	uxth	r2, r2
 80091d4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	1c9a      	adds	r2, r3, #2
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d118      	bne.n	8009230 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009206:	d103      	bne.n	8009210 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a0b      	ldr	r2, [pc, #44]	; (8009238 <SPI_2linesRxISR_16BIT+0x78>)
 800920c:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800920e:	e00f      	b.n	8009230 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800921e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009224:	b29b      	uxth	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d102      	bne.n	8009230 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fb3e 	bl	80098ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	0800923d 	.word	0x0800923d

0800923c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);  
 8009250:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009260:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fb22 	bl	80098ac <SPI_CloseRxTx_ISR>
}
 8009268:	bf00      	nop
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	881a      	ldrh	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009288:	1c9a      	adds	r2, r3, #2
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009292:	b29b      	uxth	r3, r3
 8009294:	3b01      	subs	r3, #1
 8009296:	b29a      	uxth	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d126      	bne.n	80092f4 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ae:	d110      	bne.n	80092d2 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092be:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092ce:	605a      	str	r2, [r3, #4]
      return;
 80092d0:	e010      	b.n	80092f4 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092e0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fadc 	bl	80098ac <SPI_CloseRxTx_ISR>
    }
  }
}
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]

  /* Read 8bit CRC to flush Data Register */
  tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	330c      	adds	r3, #12
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8009312:	68fb      	ldr	r3, [r7, #12]

  hspi->CRCSize--;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009318:	1e5a      	subs	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <SPI_RxISR_8BITCRC+0x32>
  {
    SPI_CloseRx_ISR(hspi);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fb1c 	bl	8009964 <SPI_CloseRx_ISR>
  }
}
 800932c:	bf00      	nop
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f103 020c 	add.w	r2, r3, #12
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	7812      	ldrb	r2, [r2, #0]
 800934a:	b2d2      	uxtb	r2, r2
 800934c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800935e:	b29b      	uxth	r3, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009370:	b29b      	uxth	r3, r3
 8009372:	2b01      	cmp	r3, #1
 8009374:	d10c      	bne.n	8009390 <SPI_RxISR_8BIT+0x5c>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800937e:	d107      	bne.n	8009390 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800938e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009396:	b29b      	uxth	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10b      	bne.n	80093b4 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093a4:	d103      	bne.n	80093ae <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a04      	ldr	r2, [pc, #16]	; (80093bc <SPI_RxISR_8BIT+0x88>)
 80093aa:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80093ac:	e002      	b.n	80093b4 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fad8 	bl	8009964 <SPI_CloseRx_ISR>
  }
}
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	080092fb 	.word	0x080092fb

080093c0 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80093d4:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80093e4:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fabc 	bl	8009964 <SPI_CloseRx_ISR>
}
 80093ec:	bf00      	nop
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009406:	b292      	uxth	r2, r2
 8009408:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	1c9a      	adds	r2, r3, #2
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800941a:	b29b      	uxth	r3, r3
 800941c:	3b01      	subs	r3, #1
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800942c:	b29b      	uxth	r3, r3
 800942e:	2b01      	cmp	r3, #1
 8009430:	d10c      	bne.n	800944c <SPI_RxISR_16BIT+0x58>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800943a:	d107      	bne.n	800944c <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800944a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10b      	bne.n	8009470 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009460:	d103      	bne.n	800946a <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a04      	ldr	r2, [pc, #16]	; (8009478 <SPI_RxISR_16BIT+0x84>)
 8009466:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8009468:	e002      	b.n	8009470 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa7a 	bl	8009964 <SPI_CloseRx_ISR>
  }
}
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	080093c1 	.word	0x080093c1

0800947c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	330c      	adds	r3, #12
 800948e:	7812      	ldrb	r2, [r2, #0]
 8009490:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10f      	bne.n	80094d4 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094bc:	d107      	bne.n	80094ce <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094cc:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa8e 	bl	80099f0 <SPI_CloseTx_ISR>
  }
}
 80094d4:	bf00      	nop
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	881a      	ldrh	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	1c9a      	adds	r2, r3, #2
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094fe:	b29b      	uxth	r3, r3
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950c:	b29b      	uxth	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10f      	bne.n	8009532 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800951a:	d107      	bne.n	800952c <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800952a:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fa5f 	bl	80099f0 <SPI_CloseTx_ISR>
  }
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	4613      	mov	r3, r2
 800954a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800954c:	f7fb ff22 	bl	8005394 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	4413      	add	r3, r2
 800955a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800955c:	f7fb ff1a 	bl	8005394 <HAL_GetTick>
 8009560:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009562:	4b39      	ldr	r3, [pc, #228]	; (8009648 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	015b      	lsls	r3, r3, #5
 8009568:	0d1b      	lsrs	r3, r3, #20
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	fb02 f303 	mul.w	r3, r2, r3
 8009570:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009572:	e054      	b.n	800961e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957a:	d050      	beq.n	800961e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800957c:	f7fb ff0a 	bl	8005394 <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	429a      	cmp	r2, r3
 800958a:	d902      	bls.n	8009592 <SPI_WaitFlagStateUntilTimeout+0x56>
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d13d      	bne.n	800960e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095aa:	d111      	bne.n	80095d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b4:	d004      	beq.n	80095c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095be:	d107      	bne.n	80095d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d8:	d10f      	bne.n	80095fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e017      	b.n	800963e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	3b01      	subs	r3, #1
 800961c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689a      	ldr	r2, [r3, #8]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4013      	ands	r3, r2
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	429a      	cmp	r2, r3
 800962c:	bf0c      	ite	eq
 800962e:	2301      	moveq	r3, #1
 8009630:	2300      	movne	r3, #0
 8009632:	b2db      	uxtb	r3, r3
 8009634:	461a      	mov	r2, r3
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	429a      	cmp	r2, r3
 800963a:	d19b      	bne.n	8009574 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3720      	adds	r7, #32
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20000004 	.word	0x20000004

0800964c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800965a:	f7fb fe9b 	bl	8005394 <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	4413      	add	r3, r2
 8009668:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800966a:	f7fb fe93 	bl	8005394 <HAL_GetTick>
 800966e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009670:	4b3e      	ldr	r3, [pc, #248]	; (800976c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	00da      	lsls	r2, r3, #3
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	0d1b      	lsrs	r3, r3, #20
 8009680:	69fa      	ldr	r2, [r7, #28]
 8009682:	fb02 f303 	mul.w	r3, r2, r3
 8009686:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8009688:	e062      	b.n	8009750 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009690:	d109      	bne.n	80096a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d106      	bne.n	80096a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	330c      	adds	r3, #12
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80096a4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ac:	d050      	beq.n	8009750 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096ae:	f7fb fe71 	bl	8005394 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	69fa      	ldr	r2, [r7, #28]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d902      	bls.n	80096c4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d13d      	bne.n	8009740 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096dc:	d111      	bne.n	8009702 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e6:	d004      	beq.n	80096f2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f0:	d107      	bne.n	8009702 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009700:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970a:	d10f      	bne.n	800972c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800972a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e010      	b.n	8009762 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3b01      	subs	r3, #1
 800974e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	4013      	ands	r3, r2
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	d194      	bne.n	800968a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3720      	adds	r7, #32
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000004 	.word	0x20000004

08009770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af02      	add	r7, sp, #8
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009784:	d111      	bne.n	80097aa <SPI_EndRxTransaction+0x3a>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800978e:	d004      	beq.n	800979a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009798:	d107      	bne.n	80097aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2200      	movs	r2, #0
 80097b2:	2180      	movs	r1, #128	; 0x80
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff fec1 	bl	800953c <SPI_WaitFlagStateUntilTimeout>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d007      	beq.n	80097d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c4:	f043 0220 	orr.w	r2, r3, #32
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e023      	b.n	8009818 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097d8:	d11d      	bne.n	8009816 <SPI_EndRxTransaction+0xa6>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e2:	d004      	beq.n	80097ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ec:	d113      	bne.n	8009816 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff ff26 	bl	800964c <SPI_WaitFifoStateUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980a:	f043 0220 	orr.w	r2, r3, #32
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e000      	b.n	8009818 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af02      	add	r7, sp, #8
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2200      	movs	r2, #0
 8009834:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff ff07 	bl	800964c <SPI_WaitFifoStateUntilTimeout>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d007      	beq.n	8009854 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009848:	f043 0220 	orr.w	r2, r3, #32
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e027      	b.n	80098a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2200      	movs	r2, #0
 800985c:	2180      	movs	r1, #128	; 0x80
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f7ff fe6c 	bl	800953c <SPI_WaitFlagStateUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800986e:	f043 0220 	orr.w	r2, r3, #32
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e014      	b.n	80098a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2200      	movs	r2, #0
 8009882:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f7ff fee0 	bl	800964c <SPI_WaitFifoStateUntilTimeout>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d007      	beq.n	80098a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009896:	f043 0220 	orr.w	r2, r3, #32
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e000      	b.n	80098a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098b4:	f7fb fd6e 	bl	8005394 <HAL_GetTick>
 80098b8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0220 	bic.w	r2, r2, #32
 80098c8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	2164      	movs	r1, #100	; 0x64
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff ffa6 	bl	8009820 <SPI_EndRxTxTransaction>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d005      	beq.n	80098e6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098de:	f043 0220 	orr.w	r2, r3, #32
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f003 0310 	and.w	r3, r3, #16
 80098f0:	2b10      	cmp	r3, #16
 80098f2:	d112      	bne.n	800991a <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009900:	f043 0202 	orr.w	r2, r3, #2
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009910:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff fb3a 	bl	8008f8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009918:	e020      	b.n	800995c <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800991e:	2b00      	cmp	r3, #0
 8009920:	d115      	bne.n	800994e <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b04      	cmp	r3, #4
 800992c:	d107      	bne.n	800993e <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7f9 f8d2 	bl	8002ae0 <HAL_SPI_RxCpltCallback>
}
 800993c:	e00e      	b.n	800995c <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff fb16 	bl	8008f78 <HAL_SPI_TxRxCpltCallback>
}
 800994c:	e006      	b.n	800995c <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fb18 	bl	8008f8c <HAL_SPI_ErrorCallback>
}
 800995c:	bf00      	nop
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800997a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800997c:	f7fb fd0a 	bl	8005394 <HAL_GetTick>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	2164      	movs	r1, #100	; 0x64
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fef2 	bl	8009770 <SPI_EndRxTransaction>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d005      	beq.n	800999e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009996:	f043 0220 	orr.w	r2, r3, #32
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0310 	and.w	r3, r3, #16
 80099b0:	2b10      	cmp	r3, #16
 80099b2:	d10e      	bne.n	80099d2 <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099b8:	f043 0202 	orr.w	r2, r3, #2
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80099c8:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff fade 	bl	8008f8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80099d0:	e00a      	b.n	80099e8 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7f9 f880 	bl	8002ae0 <HAL_SPI_RxCpltCallback>
}
 80099e0:	e002      	b.n	80099e8 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff fad2 	bl	8008f8c <HAL_SPI_ErrorCallback>
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099f8:	f7fb fccc 	bl	8005394 <HAL_GetTick>
 80099fc:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a0c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	2164      	movs	r1, #100	; 0x64
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff ff04 	bl	8009820 <SPI_EndRxTxTransaction>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a22:	f043 0220 	orr.w	r2, r3, #32
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10a      	bne.n	8009a48 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a32:	2300      	movs	r3, #0
 8009a34:	60bb      	str	r3, [r7, #8]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	60bb      	str	r3, [r7, #8]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	60bb      	str	r3, [r7, #8]
 8009a46:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff fa97 	bl	8008f8c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009a5e:	e002      	b.n	8009a66 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f7f9 f851 	bl	8002b08 <HAL_SPI_TxCpltCallback>
}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e049      	b.n	8009b14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f841 	bl	8009b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4610      	mov	r0, r2
 8009aae:	f000 f9f7 	bl	8009ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d001      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e04f      	b.n	8009be8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f042 0201 	orr.w	r2, r2, #1
 8009b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a23      	ldr	r2, [pc, #140]	; (8009bf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d01d      	beq.n	8009ba6 <HAL_TIM_Base_Start_IT+0x76>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b72:	d018      	beq.n	8009ba6 <HAL_TIM_Base_Start_IT+0x76>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a1f      	ldr	r2, [pc, #124]	; (8009bf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d013      	beq.n	8009ba6 <HAL_TIM_Base_Start_IT+0x76>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <HAL_TIM_Base_Start_IT+0xcc>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00e      	beq.n	8009ba6 <HAL_TIM_Base_Start_IT+0x76>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a1c      	ldr	r2, [pc, #112]	; (8009c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d009      	beq.n	8009ba6 <HAL_TIM_Base_Start_IT+0x76>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a1b      	ldr	r2, [pc, #108]	; (8009c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d004      	beq.n	8009ba6 <HAL_TIM_Base_Start_IT+0x76>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a19      	ldr	r2, [pc, #100]	; (8009c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d115      	bne.n	8009bd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	4b17      	ldr	r3, [pc, #92]	; (8009c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8009bae:	4013      	ands	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b06      	cmp	r3, #6
 8009bb6:	d015      	beq.n	8009be4 <HAL_TIM_Base_Start_IT+0xb4>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbe:	d011      	beq.n	8009be4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f042 0201 	orr.w	r2, r2, #1
 8009bce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd0:	e008      	b.n	8009be4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f042 0201 	orr.w	r2, r2, #1
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	e000      	b.n	8009be6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	40012c00 	.word	0x40012c00
 8009bf8:	40000400 	.word	0x40000400
 8009bfc:	40000800 	.word	0x40000800
 8009c00:	40000c00 	.word	0x40000c00
 8009c04:	40013400 	.word	0x40013400
 8009c08:	40014000 	.word	0x40014000
 8009c0c:	00010007 	.word	0x00010007

08009c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d122      	bne.n	8009c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f003 0302 	and.w	r3, r3, #2
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d11b      	bne.n	8009c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f06f 0202 	mvn.w	r2, #2
 8009c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	f003 0303 	and.w	r3, r3, #3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f905 	bl	8009e62 <HAL_TIM_IC_CaptureCallback>
 8009c58:	e005      	b.n	8009c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f8f7 	bl	8009e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f908 	bl	8009e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	f003 0304 	and.w	r3, r3, #4
 8009c76:	2b04      	cmp	r3, #4
 8009c78:	d122      	bne.n	8009cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b04      	cmp	r3, #4
 8009c86:	d11b      	bne.n	8009cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f06f 0204 	mvn.w	r2, #4
 8009c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2202      	movs	r2, #2
 8009c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f8db 	bl	8009e62 <HAL_TIM_IC_CaptureCallback>
 8009cac:	e005      	b.n	8009cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f8cd 	bl	8009e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f8de 	bl	8009e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f003 0308 	and.w	r3, r3, #8
 8009cca:	2b08      	cmp	r3, #8
 8009ccc:	d122      	bne.n	8009d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	f003 0308 	and.w	r3, r3, #8
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d11b      	bne.n	8009d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f06f 0208 	mvn.w	r2, #8
 8009ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2204      	movs	r2, #4
 8009cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f8b1 	bl	8009e62 <HAL_TIM_IC_CaptureCallback>
 8009d00:	e005      	b.n	8009d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f8a3 	bl	8009e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f8b4 	bl	8009e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	691b      	ldr	r3, [r3, #16]
 8009d1a:	f003 0310 	and.w	r3, r3, #16
 8009d1e:	2b10      	cmp	r3, #16
 8009d20:	d122      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f003 0310 	and.w	r3, r3, #16
 8009d2c:	2b10      	cmp	r3, #16
 8009d2e:	d11b      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f06f 0210 	mvn.w	r2, #16
 8009d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f887 	bl	8009e62 <HAL_TIM_IC_CaptureCallback>
 8009d54:	e005      	b.n	8009d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f879 	bl	8009e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f88a 	bl	8009e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d10e      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f003 0301 	and.w	r3, r3, #1
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d107      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f06f 0201 	mvn.w	r2, #1
 8009d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7f9 fdfc 	bl	800398c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9e:	2b80      	cmp	r3, #128	; 0x80
 8009da0:	d10e      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dac:	2b80      	cmp	r3, #128	; 0x80
 8009dae:	d107      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f914 	bl	8009fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dce:	d10e      	bne.n	8009dee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dda:	2b80      	cmp	r3, #128	; 0x80
 8009ddc:	d107      	bne.n	8009dee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f907 	bl	8009ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df8:	2b40      	cmp	r3, #64	; 0x40
 8009dfa:	d10e      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e06:	2b40      	cmp	r3, #64	; 0x40
 8009e08:	d107      	bne.n	8009e1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f838 	bl	8009e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b20      	cmp	r3, #32
 8009e26:	d10e      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b20      	cmp	r3, #32
 8009e34:	d107      	bne.n	8009e46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f06f 0220 	mvn.w	r2, #32
 8009e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f8c7 	bl	8009fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e6a:	bf00      	nop
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
	...

08009ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a40      	ldr	r2, [pc, #256]	; (8009fb4 <TIM_Base_SetConfig+0x114>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d013      	beq.n	8009ee0 <TIM_Base_SetConfig+0x40>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ebe:	d00f      	beq.n	8009ee0 <TIM_Base_SetConfig+0x40>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a3d      	ldr	r2, [pc, #244]	; (8009fb8 <TIM_Base_SetConfig+0x118>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d00b      	beq.n	8009ee0 <TIM_Base_SetConfig+0x40>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a3c      	ldr	r2, [pc, #240]	; (8009fbc <TIM_Base_SetConfig+0x11c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d007      	beq.n	8009ee0 <TIM_Base_SetConfig+0x40>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a3b      	ldr	r2, [pc, #236]	; (8009fc0 <TIM_Base_SetConfig+0x120>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d003      	beq.n	8009ee0 <TIM_Base_SetConfig+0x40>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a3a      	ldr	r2, [pc, #232]	; (8009fc4 <TIM_Base_SetConfig+0x124>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d108      	bne.n	8009ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a2f      	ldr	r2, [pc, #188]	; (8009fb4 <TIM_Base_SetConfig+0x114>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d01f      	beq.n	8009f3a <TIM_Base_SetConfig+0x9a>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f00:	d01b      	beq.n	8009f3a <TIM_Base_SetConfig+0x9a>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a2c      	ldr	r2, [pc, #176]	; (8009fb8 <TIM_Base_SetConfig+0x118>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d017      	beq.n	8009f3a <TIM_Base_SetConfig+0x9a>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a2b      	ldr	r2, [pc, #172]	; (8009fbc <TIM_Base_SetConfig+0x11c>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d013      	beq.n	8009f3a <TIM_Base_SetConfig+0x9a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a2a      	ldr	r2, [pc, #168]	; (8009fc0 <TIM_Base_SetConfig+0x120>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00f      	beq.n	8009f3a <TIM_Base_SetConfig+0x9a>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a29      	ldr	r2, [pc, #164]	; (8009fc4 <TIM_Base_SetConfig+0x124>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00b      	beq.n	8009f3a <TIM_Base_SetConfig+0x9a>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a28      	ldr	r2, [pc, #160]	; (8009fc8 <TIM_Base_SetConfig+0x128>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d007      	beq.n	8009f3a <TIM_Base_SetConfig+0x9a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a27      	ldr	r2, [pc, #156]	; (8009fcc <TIM_Base_SetConfig+0x12c>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d003      	beq.n	8009f3a <TIM_Base_SetConfig+0x9a>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a26      	ldr	r2, [pc, #152]	; (8009fd0 <TIM_Base_SetConfig+0x130>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d108      	bne.n	8009f4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a10      	ldr	r2, [pc, #64]	; (8009fb4 <TIM_Base_SetConfig+0x114>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d00f      	beq.n	8009f98 <TIM_Base_SetConfig+0xf8>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a12      	ldr	r2, [pc, #72]	; (8009fc4 <TIM_Base_SetConfig+0x124>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d00b      	beq.n	8009f98 <TIM_Base_SetConfig+0xf8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a11      	ldr	r2, [pc, #68]	; (8009fc8 <TIM_Base_SetConfig+0x128>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d007      	beq.n	8009f98 <TIM_Base_SetConfig+0xf8>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a10      	ldr	r2, [pc, #64]	; (8009fcc <TIM_Base_SetConfig+0x12c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d003      	beq.n	8009f98 <TIM_Base_SetConfig+0xf8>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a0f      	ldr	r2, [pc, #60]	; (8009fd0 <TIM_Base_SetConfig+0x130>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d103      	bne.n	8009fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	691a      	ldr	r2, [r3, #16]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	615a      	str	r2, [r3, #20]
}
 8009fa6:	bf00      	nop
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	40012c00 	.word	0x40012c00
 8009fb8:	40000400 	.word	0x40000400
 8009fbc:	40000800 	.word	0x40000800
 8009fc0:	40000c00 	.word	0x40000c00
 8009fc4:	40013400 	.word	0x40013400
 8009fc8:	40014000 	.word	0x40014000
 8009fcc:	40014400 	.word	0x40014400
 8009fd0:	40014800 	.word	0x40014800

08009fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e040      	b.n	800a0a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a026:	2b00      	cmp	r3, #0
 800a028:	d106      	bne.n	800a038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7f9 fec6 	bl	8003dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2224      	movs	r2, #36	; 0x24
 800a03c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0201 	bic.w	r2, r2, #1
 800a04c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f992 	bl	800a378 <UART_SetConfig>
 800a054:	4603      	mov	r3, r0
 800a056:	2b01      	cmp	r3, #1
 800a058:	d101      	bne.n	800a05e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e022      	b.n	800a0a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fc10 	bl	800a88c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a07a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a08a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f042 0201 	orr.w	r2, r2, #1
 800a09a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fc97 	bl	800a9d0 <UART_CheckIdleState>
 800a0a2:	4603      	mov	r3, r0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08a      	sub	sp, #40	; 0x28
 800a0b0:	af02      	add	r7, sp, #8
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0c0:	2b20      	cmp	r3, #32
 800a0c2:	f040 8082 	bne.w	800a1ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <HAL_UART_Transmit+0x26>
 800a0cc:	88fb      	ldrh	r3, [r7, #6]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e07a      	b.n	800a1cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d101      	bne.n	800a0e4 <HAL_UART_Transmit+0x38>
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	e073      	b.n	800a1cc <HAL_UART_Transmit+0x120>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2221      	movs	r2, #33	; 0x21
 800a0f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0fa:	f7fb f94b 	bl	8005394 <HAL_GetTick>
 800a0fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	88fa      	ldrh	r2, [r7, #6]
 800a104:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	88fa      	ldrh	r2, [r7, #6]
 800a10c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a118:	d108      	bne.n	800a12c <HAL_UART_Transmit+0x80>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d104      	bne.n	800a12c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	e003      	b.n	800a134 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a130:	2300      	movs	r3, #0
 800a132:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a13c:	e02d      	b.n	800a19a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2200      	movs	r2, #0
 800a146:	2180      	movs	r1, #128	; 0x80
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 fc8a 	bl	800aa62 <UART_WaitOnFlagUntilTimeout>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	e039      	b.n	800a1cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10b      	bne.n	800a176 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a15e:	69bb      	ldr	r3, [r7, #24]
 800a160:	881a      	ldrh	r2, [r3, #0]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a16a:	b292      	uxth	r2, r2
 800a16c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	3302      	adds	r3, #2
 800a172:	61bb      	str	r3, [r7, #24]
 800a174:	e008      	b.n	800a188 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	781a      	ldrb	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	b292      	uxth	r2, r2
 800a180:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	3301      	adds	r3, #1
 800a186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a18e:	b29b      	uxth	r3, r3
 800a190:	3b01      	subs	r3, #1
 800a192:	b29a      	uxth	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1cb      	bne.n	800a13e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2140      	movs	r1, #64	; 0x40
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 fc56 	bl	800aa62 <UART_WaitOnFlagUntilTimeout>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e005      	b.n	800a1cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e000      	b.n	800a1cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a1ca:	2302      	movs	r3, #2
  }
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3720      	adds	r7, #32
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b08a      	sub	sp, #40	; 0x28
 800a1d8:	af02      	add	r7, sp, #8
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1e8:	2b20      	cmp	r3, #32
 800a1ea:	f040 80bf 	bne.w	800a36c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <HAL_UART_Receive+0x26>
 800a1f4:	88fb      	ldrh	r3, [r7, #6]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e0b7      	b.n	800a36e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <HAL_UART_Receive+0x38>
 800a208:	2302      	movs	r3, #2
 800a20a:	e0b0      	b.n	800a36e <HAL_UART_Receive+0x19a>
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2222      	movs	r2, #34	; 0x22
 800a220:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a228:	f7fb f8b4 	bl	8005394 <HAL_GetTick>
 800a22c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	88fa      	ldrh	r2, [r7, #6]
 800a232:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	88fa      	ldrh	r2, [r7, #6]
 800a23a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a246:	d10e      	bne.n	800a266 <HAL_UART_Receive+0x92>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d105      	bne.n	800a25c <HAL_UART_Receive+0x88>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a25a:	e02d      	b.n	800a2b8 <HAL_UART_Receive+0xe4>
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	22ff      	movs	r2, #255	; 0xff
 800a260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a264:	e028      	b.n	800a2b8 <HAL_UART_Receive+0xe4>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10d      	bne.n	800a28a <HAL_UART_Receive+0xb6>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	691b      	ldr	r3, [r3, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d104      	bne.n	800a280 <HAL_UART_Receive+0xac>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	22ff      	movs	r2, #255	; 0xff
 800a27a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a27e:	e01b      	b.n	800a2b8 <HAL_UART_Receive+0xe4>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	227f      	movs	r2, #127	; 0x7f
 800a284:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a288:	e016      	b.n	800a2b8 <HAL_UART_Receive+0xe4>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a292:	d10d      	bne.n	800a2b0 <HAL_UART_Receive+0xdc>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d104      	bne.n	800a2a6 <HAL_UART_Receive+0xd2>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	227f      	movs	r2, #127	; 0x7f
 800a2a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2a4:	e008      	b.n	800a2b8 <HAL_UART_Receive+0xe4>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	223f      	movs	r2, #63	; 0x3f
 800a2aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a2ae:	e003      	b.n	800a2b8 <HAL_UART_Receive+0xe4>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c8:	d108      	bne.n	800a2dc <HAL_UART_Receive+0x108>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d104      	bne.n	800a2dc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	61bb      	str	r3, [r7, #24]
 800a2da:	e003      	b.n	800a2e4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a2ec:	e033      	b.n	800a356 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2120      	movs	r1, #32
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 fbb2 	bl	800aa62 <UART_WaitOnFlagUntilTimeout>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e032      	b.n	800a36e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10c      	bne.n	800a328 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a314:	b29a      	uxth	r2, r3
 800a316:	8a7b      	ldrh	r3, [r7, #18]
 800a318:	4013      	ands	r3, r2
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	3302      	adds	r3, #2
 800a324:	61bb      	str	r3, [r7, #24]
 800a326:	e00d      	b.n	800a344 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a32e:	b29b      	uxth	r3, r3
 800a330:	b2da      	uxtb	r2, r3
 800a332:	8a7b      	ldrh	r3, [r7, #18]
 800a334:	b2db      	uxtb	r3, r3
 800a336:	4013      	ands	r3, r2
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	3301      	adds	r3, #1
 800a342:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	3b01      	subs	r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1c5      	bne.n	800a2ee <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2220      	movs	r2, #32
 800a366:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	e000      	b.n	800a36e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800a36c:	2302      	movs	r3, #2
  }
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3720      	adds	r7, #32
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a378:	b5b0      	push	{r4, r5, r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	431a      	orrs	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	4313      	orrs	r3, r2
 800a39a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4bad      	ldr	r3, [pc, #692]	; (800a658 <UART_SetConfig+0x2e0>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	69f9      	ldr	r1, [r7, #28]
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4aa2      	ldr	r2, [pc, #648]	; (800a65c <UART_SetConfig+0x2e4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d004      	beq.n	800a3e0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	69fa      	ldr	r2, [r7, #28]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a99      	ldr	r2, [pc, #612]	; (800a660 <UART_SetConfig+0x2e8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d121      	bne.n	800a442 <UART_SetConfig+0xca>
 800a3fe:	4b99      	ldr	r3, [pc, #612]	; (800a664 <UART_SetConfig+0x2ec>)
 800a400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a404:	f003 0303 	and.w	r3, r3, #3
 800a408:	2b03      	cmp	r3, #3
 800a40a:	d817      	bhi.n	800a43c <UART_SetConfig+0xc4>
 800a40c:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <UART_SetConfig+0x9c>)
 800a40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a412:	bf00      	nop
 800a414:	0800a425 	.word	0x0800a425
 800a418:	0800a431 	.word	0x0800a431
 800a41c:	0800a42b 	.word	0x0800a42b
 800a420:	0800a437 	.word	0x0800a437
 800a424:	2301      	movs	r3, #1
 800a426:	76fb      	strb	r3, [r7, #27]
 800a428:	e0e7      	b.n	800a5fa <UART_SetConfig+0x282>
 800a42a:	2302      	movs	r3, #2
 800a42c:	76fb      	strb	r3, [r7, #27]
 800a42e:	e0e4      	b.n	800a5fa <UART_SetConfig+0x282>
 800a430:	2304      	movs	r3, #4
 800a432:	76fb      	strb	r3, [r7, #27]
 800a434:	e0e1      	b.n	800a5fa <UART_SetConfig+0x282>
 800a436:	2308      	movs	r3, #8
 800a438:	76fb      	strb	r3, [r7, #27]
 800a43a:	e0de      	b.n	800a5fa <UART_SetConfig+0x282>
 800a43c:	2310      	movs	r3, #16
 800a43e:	76fb      	strb	r3, [r7, #27]
 800a440:	e0db      	b.n	800a5fa <UART_SetConfig+0x282>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a88      	ldr	r2, [pc, #544]	; (800a668 <UART_SetConfig+0x2f0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d132      	bne.n	800a4b2 <UART_SetConfig+0x13a>
 800a44c:	4b85      	ldr	r3, [pc, #532]	; (800a664 <UART_SetConfig+0x2ec>)
 800a44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a452:	f003 030c 	and.w	r3, r3, #12
 800a456:	2b0c      	cmp	r3, #12
 800a458:	d828      	bhi.n	800a4ac <UART_SetConfig+0x134>
 800a45a:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <UART_SetConfig+0xe8>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a495 	.word	0x0800a495
 800a464:	0800a4ad 	.word	0x0800a4ad
 800a468:	0800a4ad 	.word	0x0800a4ad
 800a46c:	0800a4ad 	.word	0x0800a4ad
 800a470:	0800a4a1 	.word	0x0800a4a1
 800a474:	0800a4ad 	.word	0x0800a4ad
 800a478:	0800a4ad 	.word	0x0800a4ad
 800a47c:	0800a4ad 	.word	0x0800a4ad
 800a480:	0800a49b 	.word	0x0800a49b
 800a484:	0800a4ad 	.word	0x0800a4ad
 800a488:	0800a4ad 	.word	0x0800a4ad
 800a48c:	0800a4ad 	.word	0x0800a4ad
 800a490:	0800a4a7 	.word	0x0800a4a7
 800a494:	2300      	movs	r3, #0
 800a496:	76fb      	strb	r3, [r7, #27]
 800a498:	e0af      	b.n	800a5fa <UART_SetConfig+0x282>
 800a49a:	2302      	movs	r3, #2
 800a49c:	76fb      	strb	r3, [r7, #27]
 800a49e:	e0ac      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4a0:	2304      	movs	r3, #4
 800a4a2:	76fb      	strb	r3, [r7, #27]
 800a4a4:	e0a9      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	76fb      	strb	r3, [r7, #27]
 800a4aa:	e0a6      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4ac:	2310      	movs	r3, #16
 800a4ae:	76fb      	strb	r3, [r7, #27]
 800a4b0:	e0a3      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a6d      	ldr	r2, [pc, #436]	; (800a66c <UART_SetConfig+0x2f4>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d120      	bne.n	800a4fe <UART_SetConfig+0x186>
 800a4bc:	4b69      	ldr	r3, [pc, #420]	; (800a664 <UART_SetConfig+0x2ec>)
 800a4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4c6:	2b30      	cmp	r3, #48	; 0x30
 800a4c8:	d013      	beq.n	800a4f2 <UART_SetConfig+0x17a>
 800a4ca:	2b30      	cmp	r3, #48	; 0x30
 800a4cc:	d814      	bhi.n	800a4f8 <UART_SetConfig+0x180>
 800a4ce:	2b20      	cmp	r3, #32
 800a4d0:	d009      	beq.n	800a4e6 <UART_SetConfig+0x16e>
 800a4d2:	2b20      	cmp	r3, #32
 800a4d4:	d810      	bhi.n	800a4f8 <UART_SetConfig+0x180>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <UART_SetConfig+0x168>
 800a4da:	2b10      	cmp	r3, #16
 800a4dc:	d006      	beq.n	800a4ec <UART_SetConfig+0x174>
 800a4de:	e00b      	b.n	800a4f8 <UART_SetConfig+0x180>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	76fb      	strb	r3, [r7, #27]
 800a4e4:	e089      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	76fb      	strb	r3, [r7, #27]
 800a4ea:	e086      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4ec:	2304      	movs	r3, #4
 800a4ee:	76fb      	strb	r3, [r7, #27]
 800a4f0:	e083      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4f2:	2308      	movs	r3, #8
 800a4f4:	76fb      	strb	r3, [r7, #27]
 800a4f6:	e080      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	76fb      	strb	r3, [r7, #27]
 800a4fc:	e07d      	b.n	800a5fa <UART_SetConfig+0x282>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a5b      	ldr	r2, [pc, #364]	; (800a670 <UART_SetConfig+0x2f8>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d120      	bne.n	800a54a <UART_SetConfig+0x1d2>
 800a508:	4b56      	ldr	r3, [pc, #344]	; (800a664 <UART_SetConfig+0x2ec>)
 800a50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a50e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a512:	2bc0      	cmp	r3, #192	; 0xc0
 800a514:	d013      	beq.n	800a53e <UART_SetConfig+0x1c6>
 800a516:	2bc0      	cmp	r3, #192	; 0xc0
 800a518:	d814      	bhi.n	800a544 <UART_SetConfig+0x1cc>
 800a51a:	2b80      	cmp	r3, #128	; 0x80
 800a51c:	d009      	beq.n	800a532 <UART_SetConfig+0x1ba>
 800a51e:	2b80      	cmp	r3, #128	; 0x80
 800a520:	d810      	bhi.n	800a544 <UART_SetConfig+0x1cc>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <UART_SetConfig+0x1b4>
 800a526:	2b40      	cmp	r3, #64	; 0x40
 800a528:	d006      	beq.n	800a538 <UART_SetConfig+0x1c0>
 800a52a:	e00b      	b.n	800a544 <UART_SetConfig+0x1cc>
 800a52c:	2300      	movs	r3, #0
 800a52e:	76fb      	strb	r3, [r7, #27]
 800a530:	e063      	b.n	800a5fa <UART_SetConfig+0x282>
 800a532:	2302      	movs	r3, #2
 800a534:	76fb      	strb	r3, [r7, #27]
 800a536:	e060      	b.n	800a5fa <UART_SetConfig+0x282>
 800a538:	2304      	movs	r3, #4
 800a53a:	76fb      	strb	r3, [r7, #27]
 800a53c:	e05d      	b.n	800a5fa <UART_SetConfig+0x282>
 800a53e:	2308      	movs	r3, #8
 800a540:	76fb      	strb	r3, [r7, #27]
 800a542:	e05a      	b.n	800a5fa <UART_SetConfig+0x282>
 800a544:	2310      	movs	r3, #16
 800a546:	76fb      	strb	r3, [r7, #27]
 800a548:	e057      	b.n	800a5fa <UART_SetConfig+0x282>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a49      	ldr	r2, [pc, #292]	; (800a674 <UART_SetConfig+0x2fc>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d125      	bne.n	800a5a0 <UART_SetConfig+0x228>
 800a554:	4b43      	ldr	r3, [pc, #268]	; (800a664 <UART_SetConfig+0x2ec>)
 800a556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a55e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a562:	d017      	beq.n	800a594 <UART_SetConfig+0x21c>
 800a564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a568:	d817      	bhi.n	800a59a <UART_SetConfig+0x222>
 800a56a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a56e:	d00b      	beq.n	800a588 <UART_SetConfig+0x210>
 800a570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a574:	d811      	bhi.n	800a59a <UART_SetConfig+0x222>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <UART_SetConfig+0x20a>
 800a57a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a57e:	d006      	beq.n	800a58e <UART_SetConfig+0x216>
 800a580:	e00b      	b.n	800a59a <UART_SetConfig+0x222>
 800a582:	2300      	movs	r3, #0
 800a584:	76fb      	strb	r3, [r7, #27]
 800a586:	e038      	b.n	800a5fa <UART_SetConfig+0x282>
 800a588:	2302      	movs	r3, #2
 800a58a:	76fb      	strb	r3, [r7, #27]
 800a58c:	e035      	b.n	800a5fa <UART_SetConfig+0x282>
 800a58e:	2304      	movs	r3, #4
 800a590:	76fb      	strb	r3, [r7, #27]
 800a592:	e032      	b.n	800a5fa <UART_SetConfig+0x282>
 800a594:	2308      	movs	r3, #8
 800a596:	76fb      	strb	r3, [r7, #27]
 800a598:	e02f      	b.n	800a5fa <UART_SetConfig+0x282>
 800a59a:	2310      	movs	r3, #16
 800a59c:	76fb      	strb	r3, [r7, #27]
 800a59e:	e02c      	b.n	800a5fa <UART_SetConfig+0x282>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a2d      	ldr	r2, [pc, #180]	; (800a65c <UART_SetConfig+0x2e4>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d125      	bne.n	800a5f6 <UART_SetConfig+0x27e>
 800a5aa:	4b2e      	ldr	r3, [pc, #184]	; (800a664 <UART_SetConfig+0x2ec>)
 800a5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5b8:	d017      	beq.n	800a5ea <UART_SetConfig+0x272>
 800a5ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5be:	d817      	bhi.n	800a5f0 <UART_SetConfig+0x278>
 800a5c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5c4:	d00b      	beq.n	800a5de <UART_SetConfig+0x266>
 800a5c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5ca:	d811      	bhi.n	800a5f0 <UART_SetConfig+0x278>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d003      	beq.n	800a5d8 <UART_SetConfig+0x260>
 800a5d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5d4:	d006      	beq.n	800a5e4 <UART_SetConfig+0x26c>
 800a5d6:	e00b      	b.n	800a5f0 <UART_SetConfig+0x278>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	76fb      	strb	r3, [r7, #27]
 800a5dc:	e00d      	b.n	800a5fa <UART_SetConfig+0x282>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	76fb      	strb	r3, [r7, #27]
 800a5e2:	e00a      	b.n	800a5fa <UART_SetConfig+0x282>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	76fb      	strb	r3, [r7, #27]
 800a5e8:	e007      	b.n	800a5fa <UART_SetConfig+0x282>
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	76fb      	strb	r3, [r7, #27]
 800a5ee:	e004      	b.n	800a5fa <UART_SetConfig+0x282>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	76fb      	strb	r3, [r7, #27]
 800a5f4:	e001      	b.n	800a5fa <UART_SetConfig+0x282>
 800a5f6:	2310      	movs	r3, #16
 800a5f8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a17      	ldr	r2, [pc, #92]	; (800a65c <UART_SetConfig+0x2e4>)
 800a600:	4293      	cmp	r3, r2
 800a602:	f040 8087 	bne.w	800a714 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a606:	7efb      	ldrb	r3, [r7, #27]
 800a608:	2b08      	cmp	r3, #8
 800a60a:	d837      	bhi.n	800a67c <UART_SetConfig+0x304>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <UART_SetConfig+0x29c>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a639 	.word	0x0800a639
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a67d 	.word	0x0800a67d
 800a624:	0800a647 	.word	0x0800a647
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a67d 	.word	0x0800a67d
 800a634:	0800a64f 	.word	0x0800a64f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a638:	f7fc fe0e 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 800a63c:	6178      	str	r0, [r7, #20]
        break;
 800a63e:	e022      	b.n	800a686 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a640:	4b0d      	ldr	r3, [pc, #52]	; (800a678 <UART_SetConfig+0x300>)
 800a642:	617b      	str	r3, [r7, #20]
        break;
 800a644:	e01f      	b.n	800a686 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a646:	f7fc fd6f 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 800a64a:	6178      	str	r0, [r7, #20]
        break;
 800a64c:	e01b      	b.n	800a686 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a64e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a652:	617b      	str	r3, [r7, #20]
        break;
 800a654:	e017      	b.n	800a686 <UART_SetConfig+0x30e>
 800a656:	bf00      	nop
 800a658:	efff69f3 	.word	0xefff69f3
 800a65c:	40008000 	.word	0x40008000
 800a660:	40013800 	.word	0x40013800
 800a664:	40021000 	.word	0x40021000
 800a668:	40004400 	.word	0x40004400
 800a66c:	40004800 	.word	0x40004800
 800a670:	40004c00 	.word	0x40004c00
 800a674:	40005000 	.word	0x40005000
 800a678:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a680:	2301      	movs	r3, #1
 800a682:	76bb      	strb	r3, [r7, #26]
        break;
 800a684:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 80f1 	beq.w	800a870 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	4613      	mov	r3, r2
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	4413      	add	r3, r2
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d305      	bcc.n	800a6aa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d902      	bls.n	800a6b0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	76bb      	strb	r3, [r7, #26]
 800a6ae:	e0df      	b.n	800a870 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f04f 0100 	mov.w	r1, #0
 800a6b8:	f04f 0200 	mov.w	r2, #0
 800a6bc:	f04f 0300 	mov.w	r3, #0
 800a6c0:	020b      	lsls	r3, r1, #8
 800a6c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6c6:	0202      	lsls	r2, r0, #8
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	6849      	ldr	r1, [r1, #4]
 800a6cc:	0849      	lsrs	r1, r1, #1
 800a6ce:	4608      	mov	r0, r1
 800a6d0:	f04f 0100 	mov.w	r1, #0
 800a6d4:	1814      	adds	r4, r2, r0
 800a6d6:	eb43 0501 	adc.w	r5, r3, r1
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f04f 0300 	mov.w	r3, #0
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	f7f6 fa5e 	bl	8000ba8 <__aeabi_uldivmod>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6fa:	d308      	bcc.n	800a70e <UART_SetConfig+0x396>
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a702:	d204      	bcs.n	800a70e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	60da      	str	r2, [r3, #12]
 800a70c:	e0b0      	b.n	800a870 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	76bb      	strb	r3, [r7, #26]
 800a712:	e0ad      	b.n	800a870 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a71c:	d15c      	bne.n	800a7d8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a71e:	7efb      	ldrb	r3, [r7, #27]
 800a720:	2b08      	cmp	r3, #8
 800a722:	d828      	bhi.n	800a776 <UART_SetConfig+0x3fe>
 800a724:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <UART_SetConfig+0x3b4>)
 800a726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72a:	bf00      	nop
 800a72c:	0800a751 	.word	0x0800a751
 800a730:	0800a759 	.word	0x0800a759
 800a734:	0800a761 	.word	0x0800a761
 800a738:	0800a777 	.word	0x0800a777
 800a73c:	0800a767 	.word	0x0800a767
 800a740:	0800a777 	.word	0x0800a777
 800a744:	0800a777 	.word	0x0800a777
 800a748:	0800a777 	.word	0x0800a777
 800a74c:	0800a76f 	.word	0x0800a76f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a750:	f7fc fd82 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 800a754:	6178      	str	r0, [r7, #20]
        break;
 800a756:	e013      	b.n	800a780 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a758:	f7fc fd94 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 800a75c:	6178      	str	r0, [r7, #20]
        break;
 800a75e:	e00f      	b.n	800a780 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a760:	4b49      	ldr	r3, [pc, #292]	; (800a888 <UART_SetConfig+0x510>)
 800a762:	617b      	str	r3, [r7, #20]
        break;
 800a764:	e00c      	b.n	800a780 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a766:	f7fc fcdf 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 800a76a:	6178      	str	r0, [r7, #20]
        break;
 800a76c:	e008      	b.n	800a780 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a76e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a772:	617b      	str	r3, [r7, #20]
        break;
 800a774:	e004      	b.n	800a780 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a776:	2300      	movs	r3, #0
 800a778:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	76bb      	strb	r3, [r7, #26]
        break;
 800a77e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d074      	beq.n	800a870 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	005a      	lsls	r2, r3, #1
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	085b      	lsrs	r3, r3, #1
 800a790:	441a      	add	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	fbb2 f3f3 	udiv	r3, r2, r3
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b0f      	cmp	r3, #15
 800a7a2:	d916      	bls.n	800a7d2 <UART_SetConfig+0x45a>
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7aa:	d212      	bcs.n	800a7d2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	f023 030f 	bic.w	r3, r3, #15
 800a7b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	085b      	lsrs	r3, r3, #1
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	f003 0307 	and.w	r3, r3, #7
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	89fb      	ldrh	r3, [r7, #14]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	89fa      	ldrh	r2, [r7, #14]
 800a7ce:	60da      	str	r2, [r3, #12]
 800a7d0:	e04e      	b.n	800a870 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	76bb      	strb	r3, [r7, #26]
 800a7d6:	e04b      	b.n	800a870 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7d8:	7efb      	ldrb	r3, [r7, #27]
 800a7da:	2b08      	cmp	r3, #8
 800a7dc:	d827      	bhi.n	800a82e <UART_SetConfig+0x4b6>
 800a7de:	a201      	add	r2, pc, #4	; (adr r2, 800a7e4 <UART_SetConfig+0x46c>)
 800a7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e4:	0800a809 	.word	0x0800a809
 800a7e8:	0800a811 	.word	0x0800a811
 800a7ec:	0800a819 	.word	0x0800a819
 800a7f0:	0800a82f 	.word	0x0800a82f
 800a7f4:	0800a81f 	.word	0x0800a81f
 800a7f8:	0800a82f 	.word	0x0800a82f
 800a7fc:	0800a82f 	.word	0x0800a82f
 800a800:	0800a82f 	.word	0x0800a82f
 800a804:	0800a827 	.word	0x0800a827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a808:	f7fc fd26 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 800a80c:	6178      	str	r0, [r7, #20]
        break;
 800a80e:	e013      	b.n	800a838 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a810:	f7fc fd38 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 800a814:	6178      	str	r0, [r7, #20]
        break;
 800a816:	e00f      	b.n	800a838 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a818:	4b1b      	ldr	r3, [pc, #108]	; (800a888 <UART_SetConfig+0x510>)
 800a81a:	617b      	str	r3, [r7, #20]
        break;
 800a81c:	e00c      	b.n	800a838 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a81e:	f7fc fc83 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 800a822:	6178      	str	r0, [r7, #20]
        break;
 800a824:	e008      	b.n	800a838 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a82a:	617b      	str	r3, [r7, #20]
        break;
 800a82c:	e004      	b.n	800a838 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	76bb      	strb	r3, [r7, #26]
        break;
 800a836:	bf00      	nop
    }

    if (pclk != 0U)
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d018      	beq.n	800a870 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	085a      	lsrs	r2, r3, #1
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	441a      	add	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a850:	b29b      	uxth	r3, r3
 800a852:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2b0f      	cmp	r3, #15
 800a858:	d908      	bls.n	800a86c <UART_SetConfig+0x4f4>
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a860:	d204      	bcs.n	800a86c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	60da      	str	r2, [r3, #12]
 800a86a:	e001      	b.n	800a870 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a87c:	7ebb      	ldrb	r3, [r7, #26]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3720      	adds	r7, #32
 800a882:	46bd      	mov	sp, r7
 800a884:	bdb0      	pop	{r4, r5, r7, pc}
 800a886:	bf00      	nop
 800a888:	00f42400 	.word	0x00f42400

0800a88c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00a      	beq.n	800a8b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00a      	beq.n	800a8d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00a      	beq.n	800a8fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00a      	beq.n	800a91c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	430a      	orrs	r2, r1
 800a91a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	f003 0310 	and.w	r3, r3, #16
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00a      	beq.n	800a93e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	430a      	orrs	r2, r1
 800a93c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a942:	f003 0320 	and.w	r3, r3, #32
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00a      	beq.n	800a960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	430a      	orrs	r2, r1
 800a95e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01a      	beq.n	800a9a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a98a:	d10a      	bne.n	800a9a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00a      	beq.n	800a9c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	605a      	str	r2, [r3, #4]
  }
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af02      	add	r7, sp, #8
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9e0:	f7fa fcd8 	bl	8005394 <HAL_GetTick>
 800a9e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0308 	and.w	r3, r3, #8
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	d10e      	bne.n	800aa12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f82d 	bl	800aa62 <UART_WaitOnFlagUntilTimeout>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e023      	b.n	800aa5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d10e      	bne.n	800aa3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f817 	bl	800aa62 <UART_WaitOnFlagUntilTimeout>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e00d      	b.n	800aa5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2220      	movs	r2, #32
 800aa42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2220      	movs	r2, #32
 800aa48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	603b      	str	r3, [r7, #0]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa72:	e05e      	b.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7a:	d05a      	beq.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa7c:	f7fa fc8a 	bl	8005394 <HAL_GetTick>
 800aa80:	4602      	mov	r2, r0
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	1ad3      	subs	r3, r2, r3
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d302      	bcc.n	800aa92 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d11b      	bne.n	800aaca <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aaa0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689a      	ldr	r2, [r3, #8]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f022 0201 	bic.w	r2, r2, #1
 800aab0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2220      	movs	r2, #32
 800aab6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2220      	movs	r2, #32
 800aabc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e043      	b.n	800ab52 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0304 	and.w	r3, r3, #4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d02c      	beq.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aae6:	d124      	bne.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaf0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab00:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f022 0201 	bic.w	r2, r2, #1
 800ab10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2220      	movs	r2, #32
 800ab16:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2220      	movs	r2, #32
 800ab22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e00f      	b.n	800ab52 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69da      	ldr	r2, [r3, #28]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	bf0c      	ite	eq
 800ab42:	2301      	moveq	r3, #1
 800ab44:	2300      	movne	r3, #0
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	461a      	mov	r2, r3
 800ab4a:	79fb      	ldrb	r3, [r7, #7]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d091      	beq.n	800aa74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	4603      	mov	r3, r0
 800ab62:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ab64:	2300      	movs	r3, #0
 800ab66:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ab68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ab6c:	2b84      	cmp	r3, #132	; 0x84
 800ab6e:	d005      	beq.n	800ab7c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ab70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4413      	add	r3, r2
 800ab78:	3303      	adds	r3, #3
 800ab7a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab90:	f3ef 8305 	mrs	r3, IPSR
 800ab94:	607b      	str	r3, [r7, #4]
  return(result);
 800ab96:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	bf14      	ite	ne
 800ab9c:	2301      	movne	r3, #1
 800ab9e:	2300      	moveq	r3, #0
 800aba0:	b2db      	uxtb	r3, r3
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800abb2:	f001 fab9 	bl	800c128 <vTaskStartScheduler>
  
  return osOK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	bd80      	pop	{r7, pc}

0800abbc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800abc0:	f7ff ffe3 	bl	800ab8a <inHandlerMode>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800abca:	f001 fbd1 	bl	800c370 <xTaskGetTickCountFromISR>
 800abce:	4603      	mov	r3, r0
 800abd0:	e002      	b.n	800abd8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800abd2:	f001 fbbd 	bl	800c350 <xTaskGetTickCount>
 800abd6:	4603      	mov	r3, r0
  }
}
 800abd8:	4618      	mov	r0, r3
 800abda:	bd80      	pop	{r7, pc}

0800abdc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800abdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abde:	b089      	sub	sp, #36	; 0x24
 800abe0:	af04      	add	r7, sp, #16
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d020      	beq.n	800ac30 <osThreadCreate+0x54>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01c      	beq.n	800ac30 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685c      	ldr	r4, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681d      	ldr	r5, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691e      	ldr	r6, [r3, #16]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff ffa6 	bl	800ab5a <makeFreeRtosPriority>
 800ac0e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac18:	9202      	str	r2, [sp, #8]
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	9100      	str	r1, [sp, #0]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	4632      	mov	r2, r6
 800ac22:	4629      	mov	r1, r5
 800ac24:	4620      	mov	r0, r4
 800ac26:	f001 f823 	bl	800bc70 <xTaskCreateStatic>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	e01c      	b.n	800ac6a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685c      	ldr	r4, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac3c:	b29e      	uxth	r6, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7ff ff88 	bl	800ab5a <makeFreeRtosPriority>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	f107 030c 	add.w	r3, r7, #12
 800ac50:	9301      	str	r3, [sp, #4]
 800ac52:	9200      	str	r2, [sp, #0]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	4632      	mov	r2, r6
 800ac58:	4629      	mov	r1, r5
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f001 f865 	bl	800bd2a <xTaskCreate>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d001      	beq.n	800ac6a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e000      	b.n	800ac6c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <osDelay+0x16>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	e000      	b.n	800ac8c <osDelay+0x18>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f001 fa17 	bl	800c0c0 <vTaskDelay>
  
  return osOK;
 800ac92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	3303      	adds	r3, #3
 800acaa:	f023 0303 	bic.w	r3, r3, #3
 800acae:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800acb0:	2014      	movs	r0, #20
 800acb2:	f002 f9c9 	bl	800d048 <pvPortMalloc>
 800acb6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d046      	beq.n	800ad4c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	2200      	movs	r2, #0
 800acd0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f002 f9b6 	bl	800d048 <pvPortMalloc>
 800acdc:	4602      	mov	r2, r0
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d02b      	beq.n	800ad42 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	fb02 f303 	mul.w	r3, r2, r3
 800acf4:	4618      	mov	r0, r3
 800acf6:	f002 f9a7 	bl	800d048 <pvPortMalloc>
 800acfa:	4602      	mov	r2, r0
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d011      	beq.n	800ad2c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	e008      	b.n	800ad20 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	4413      	add	r3, r2
 800ad16:	2200      	movs	r2, #0
 800ad18:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	613b      	str	r3, [r7, #16]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d3f1      	bcc.n	800ad0e <osPoolCreate+0x72>
 800ad2a:	e00f      	b.n	800ad4c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f002 fa55 	bl	800d1e0 <vPortFree>
        vPortFree(thePool);
 800ad36:	6978      	ldr	r0, [r7, #20]
 800ad38:	f002 fa52 	bl	800d1e0 <vPortFree>
        thePool = NULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	e004      	b.n	800ad4c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800ad42:	6978      	ldr	r0, [r7, #20]
 800ad44:	f002 fa4c 	bl	800d1e0 <vPortFree>
      thePool = NULL;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b08a      	sub	sp, #40	; 0x28
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800ad66:	f7ff ff10 	bl	800ab8a <inHandlerMode>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00e      	beq.n	800ad8e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad70:	f3ef 8211 	mrs	r2, BASEPRI
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	617a      	str	r2, [r7, #20]
 800ad86:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad88:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8c:	e001      	b.n	800ad92 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800ad8e:	f002 f839 	bl	800ce04 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800ad92:	2300      	movs	r3, #0
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	e029      	b.n	800adec <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	691a      	ldr	r2, [r3, #16]
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	4413      	add	r3, r2
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	6892      	ldr	r2, [r2, #8]
 800ada4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ada8:	fb02 f201 	mul.w	r2, r2, r1
 800adac:	1a9b      	subs	r3, r3, r2
 800adae:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	4413      	add	r3, r2
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d113      	bne.n	800ade6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	4413      	add	r3, r2
 800adc6:	2201      	movs	r2, #1
 800adc8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4619      	mov	r1, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	69ba      	ldr	r2, [r7, #24]
 800add6:	fb02 f303 	mul.w	r3, r2, r3
 800adda:	440b      	add	r3, r1
 800addc:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	611a      	str	r2, [r3, #16]
      break;
 800ade4:	e007      	b.n	800adf6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	3301      	adds	r3, #1
 800adea:	61fb      	str	r3, [r7, #28]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d3d0      	bcc.n	800ad98 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800adf6:	f7ff fec8 	bl	800ab8a <inHandlerMode>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae0a:	e001      	b.n	800ae10 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800ae0c:	f002 f82a 	bl	800ce64 <vPortExitCritical>
  }
  
  return p;
 800ae10:	6a3b      	ldr	r3, [r7, #32]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3728      	adds	r7, #40	; 0x28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b085      	sub	sp, #20
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <osPoolFree+0x14>
    return osErrorParameter;
 800ae2a:	2380      	movs	r3, #128	; 0x80
 800ae2c:	e030      	b.n	800ae90 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <osPoolFree+0x1e>
    return osErrorParameter;
 800ae34:	2380      	movs	r3, #128	; 0x80
 800ae36:	e02b      	b.n	800ae90 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d201      	bcs.n	800ae46 <osPoolFree+0x2c>
    return osErrorParameter;
 800ae42:	2380      	movs	r3, #128	; 0x80
 800ae44:	e024      	b.n	800ae90 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	1a9b      	subs	r3, r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae5a:	fb02 f201 	mul.w	r2, r2, r1
 800ae5e:	1a9b      	subs	r3, r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <osPoolFree+0x4e>
    return osErrorParameter;
 800ae64:	2380      	movs	r3, #128	; 0x80
 800ae66:	e013      	b.n	800ae90 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae72:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d301      	bcc.n	800ae82 <osPoolFree+0x68>
    return osErrorParameter;
 800ae7e:	2380      	movs	r3, #128	; 0x80
 800ae80:	e006      	b.n	800ae90 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	4413      	add	r3, r2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ae9c:	b590      	push	{r4, r7, lr}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d011      	beq.n	800aed2 <osMessageCreate+0x36>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00d      	beq.n	800aed2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6859      	ldr	r1, [r3, #4]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689a      	ldr	r2, [r3, #8]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	2400      	movs	r4, #0
 800aec8:	9400      	str	r4, [sp, #0]
 800aeca:	f000 f9f5 	bl	800b2b8 <xQueueGenericCreateStatic>
 800aece:	4603      	mov	r3, r0
 800aed0:	e008      	b.n	800aee4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	4619      	mov	r1, r3
 800aede:	f000 fa63 	bl	800b3a8 <xQueueGenericCreate>
 800aee2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd90      	pop	{r4, r7, pc}

0800aeec <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800aef8:	2300      	movs	r3, #0
 800aefa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <osMessagePut+0x1e>
    ticks = 1;
 800af06:	2301      	movs	r3, #1
 800af08:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800af0a:	f7ff fe3e 	bl	800ab8a <inHandlerMode>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d018      	beq.n	800af46 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800af14:	f107 0210 	add.w	r2, r7, #16
 800af18:	f107 0108 	add.w	r1, r7, #8
 800af1c:	2300      	movs	r3, #0
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f000 fb9a 	bl	800b658 <xQueueGenericSendFromISR>
 800af24:	4603      	mov	r3, r0
 800af26:	2b01      	cmp	r3, #1
 800af28:	d001      	beq.n	800af2e <osMessagePut+0x42>
      return osErrorOS;
 800af2a:	23ff      	movs	r3, #255	; 0xff
 800af2c:	e018      	b.n	800af60 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d014      	beq.n	800af5e <osMessagePut+0x72>
 800af34:	4b0c      	ldr	r3, [pc, #48]	; (800af68 <osMessagePut+0x7c>)
 800af36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	e00b      	b.n	800af5e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800af46:	f107 0108 	add.w	r1, r7, #8
 800af4a:	2300      	movs	r3, #0
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 fa84 	bl	800b45c <xQueueGenericSend>
 800af54:	4603      	mov	r3, r0
 800af56:	2b01      	cmp	r3, #1
 800af58:	d001      	beq.n	800af5e <osMessagePut+0x72>
      return osErrorOS;
 800af5a:	23ff      	movs	r3, #255	; 0xff
 800af5c:	e000      	b.n	800af60 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3718      	adds	r7, #24
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	e000ed04 	.word	0xe000ed04

0800af6c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800af6c:	b590      	push	{r4, r7, lr}
 800af6e:	b08b      	sub	sp, #44	; 0x2c
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800af86:	2380      	movs	r3, #128	; 0x80
 800af88:	617b      	str	r3, [r7, #20]
    return event;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	461c      	mov	r4, r3
 800af8e:	f107 0314 	add.w	r3, r7, #20
 800af92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800af9a:	e054      	b.n	800b046 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800af9c:	2300      	movs	r3, #0
 800af9e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afaa:	d103      	bne.n	800afb4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800afac:	f04f 33ff 	mov.w	r3, #4294967295
 800afb0:	627b      	str	r3, [r7, #36]	; 0x24
 800afb2:	e009      	b.n	800afc8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d006      	beq.n	800afc8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <osMessageGet+0x5c>
      ticks = 1;
 800afc4:	2301      	movs	r3, #1
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800afc8:	f7ff fddf 	bl	800ab8a <inHandlerMode>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d01c      	beq.n	800b00c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800afd2:	f107 0220 	add.w	r2, r7, #32
 800afd6:	f107 0314 	add.w	r3, r7, #20
 800afda:	3304      	adds	r3, #4
 800afdc:	4619      	mov	r1, r3
 800afde:	68b8      	ldr	r0, [r7, #8]
 800afe0:	f000 fcb6 	bl	800b950 <xQueueReceiveFromISR>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d102      	bne.n	800aff0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800afea:	2310      	movs	r3, #16
 800afec:	617b      	str	r3, [r7, #20]
 800afee:	e001      	b.n	800aff4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d01d      	beq.n	800b036 <osMessageGet+0xca>
 800affa:	4b15      	ldr	r3, [pc, #84]	; (800b050 <osMessageGet+0xe4>)
 800affc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b000:	601a      	str	r2, [r3, #0]
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	e014      	b.n	800b036 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b00c:	f107 0314 	add.w	r3, r7, #20
 800b010:	3304      	adds	r3, #4
 800b012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b014:	4619      	mov	r1, r3
 800b016:	68b8      	ldr	r0, [r7, #8]
 800b018:	f000 fbba 	bl	800b790 <xQueueReceive>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d102      	bne.n	800b028 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b022:	2310      	movs	r3, #16
 800b024:	617b      	str	r3, [r7, #20]
 800b026:	e006      	b.n	800b036 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <osMessageGet+0xc6>
 800b02e:	2300      	movs	r3, #0
 800b030:	e000      	b.n	800b034 <osMessageGet+0xc8>
 800b032:	2340      	movs	r3, #64	; 0x40
 800b034:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	461c      	mov	r4, r3
 800b03a:	f107 0314 	add.w	r3, r7, #20
 800b03e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	372c      	adds	r7, #44	; 0x2c
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd90      	pop	{r4, r7, pc}
 800b04e:	bf00      	nop
 800b050:	e000ed04 	.word	0xe000ed04

0800b054 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <osDelayUntil+0x18>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	e000      	b.n	800b06e <osDelayUntil+0x1a>
 800b06c:	2301      	movs	r3, #1
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 ffa7 	bl	800bfc4 <vTaskDelayUntil>
  
  return osOK;
 800b076:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f103 0208 	add.w	r2, r3, #8
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f103 0208 	add.w	r2, r3, #8
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f103 0208 	add.w	r2, r3, #8
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0ce:	bf00      	nop
 800b0d0:	370c      	adds	r7, #12
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b085      	sub	sp, #20
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	689a      	ldr	r2, [r3, #8]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	601a      	str	r2, [r3, #0]
}
 800b116:	bf00      	nop
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b122:	b480      	push	{r7}
 800b124:	b085      	sub	sp, #20
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b138:	d103      	bne.n	800b142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	e00c      	b.n	800b15c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3308      	adds	r3, #8
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e002      	b.n	800b150 <vListInsert+0x2e>
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d2f6      	bcs.n	800b14a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	683a      	ldr	r2, [r7, #0]
 800b16a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]
}
 800b188:	bf00      	nop
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	6892      	ldr	r2, [r2, #8]
 800b1aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	6852      	ldr	r2, [r2, #4]
 800b1b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d103      	bne.n	800b1c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	1e5a      	subs	r2, r3, #1
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <xQueueGenericReset+0x2a>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	60bb      	str	r3, [r7, #8]
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b212:	f001 fdf7 	bl	800ce04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b21e:	68f9      	ldr	r1, [r7, #12]
 800b220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b222:	fb01 f303 	mul.w	r3, r1, r3
 800b226:	441a      	add	r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b242:	3b01      	subs	r3, #1
 800b244:	68f9      	ldr	r1, [r7, #12]
 800b246:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b248:	fb01 f303 	mul.w	r3, r1, r3
 800b24c:	441a      	add	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	22ff      	movs	r2, #255	; 0xff
 800b256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	22ff      	movs	r2, #255	; 0xff
 800b25e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d114      	bne.n	800b292 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d01a      	beq.n	800b2a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3310      	adds	r3, #16
 800b274:	4618      	mov	r0, r3
 800b276:	f001 f9cb 	bl	800c610 <xTaskRemoveFromEventList>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d012      	beq.n	800b2a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b280:	4b0c      	ldr	r3, [pc, #48]	; (800b2b4 <xQueueGenericReset+0xcc>)
 800b282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	e009      	b.n	800b2a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3310      	adds	r3, #16
 800b296:	4618      	mov	r0, r3
 800b298:	f7ff fef2 	bl	800b080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	3324      	adds	r3, #36	; 0x24
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff feed 	bl	800b080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b2a6:	f001 fddd 	bl	800ce64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b2aa:	2301      	movs	r3, #1
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	e000ed04 	.word	0xe000ed04

0800b2b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08e      	sub	sp, #56	; 0x38
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10a      	bne.n	800b2e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2de:	bf00      	nop
 800b2e0:	e7fe      	b.n	800b2e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10a      	bne.n	800b2fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2fa:	bf00      	nop
 800b2fc:	e7fe      	b.n	800b2fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <xQueueGenericCreateStatic+0x52>
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d001      	beq.n	800b30e <xQueueGenericCreateStatic+0x56>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e000      	b.n	800b310 <xQueueGenericCreateStatic+0x58>
 800b30e:	2300      	movs	r3, #0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	623b      	str	r3, [r7, #32]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <xQueueGenericCreateStatic+0x7e>
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <xQueueGenericCreateStatic+0x82>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueGenericCreateStatic+0x84>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	61fb      	str	r3, [r7, #28]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b356:	2348      	movs	r3, #72	; 0x48
 800b358:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b48      	cmp	r3, #72	; 0x48
 800b35e:	d00a      	beq.n	800b376 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	61bb      	str	r3, [r7, #24]
}
 800b372:	bf00      	nop
 800b374:	e7fe      	b.n	800b374 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b376:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00d      	beq.n	800b39e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b384:	2201      	movs	r2, #1
 800b386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b38a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	4613      	mov	r3, r2
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	68b9      	ldr	r1, [r7, #8]
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 f83f 	bl	800b41c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3730      	adds	r7, #48	; 0x30
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b08a      	sub	sp, #40	; 0x28
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10a      	bne.n	800b3d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	613b      	str	r3, [r7, #16]
}
 800b3ce:	bf00      	nop
 800b3d0:	e7fe      	b.n	800b3d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
 800b3da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	3348      	adds	r3, #72	; 0x48
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f001 fe31 	bl	800d048 <pvPortMalloc>
 800b3e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d011      	beq.n	800b412 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	3348      	adds	r3, #72	; 0x48
 800b3f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b400:	79fa      	ldrb	r2, [r7, #7]
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	4613      	mov	r3, r2
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	68b9      	ldr	r1, [r7, #8]
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f000 f805 	bl	800b41c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b412:	69bb      	ldr	r3, [r7, #24]
	}
 800b414:	4618      	mov	r0, r3
 800b416:	3720      	adds	r7, #32
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]
 800b428:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d103      	bne.n	800b438 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	69ba      	ldr	r2, [r7, #24]
 800b434:	601a      	str	r2, [r3, #0]
 800b436:	e002      	b.n	800b43e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	68ba      	ldr	r2, [r7, #8]
 800b448:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b44a:	2101      	movs	r1, #1
 800b44c:	69b8      	ldr	r0, [r7, #24]
 800b44e:	f7ff fecb 	bl	800b1e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b452:	bf00      	nop
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08e      	sub	sp, #56	; 0x38
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b46a:	2300      	movs	r3, #0
 800b46c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <xQueueGenericSend+0x32>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d103      	bne.n	800b49c <xQueueGenericSend+0x40>
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <xQueueGenericSend+0x44>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e000      	b.n	800b4a2 <xQueueGenericSend+0x46>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10a      	bne.n	800b4bc <xQueueGenericSend+0x60>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d103      	bne.n	800b4ca <xQueueGenericSend+0x6e>
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <xQueueGenericSend+0x72>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <xQueueGenericSend+0x74>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <xQueueGenericSend+0x8e>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	623b      	str	r3, [r7, #32]
}
 800b4e6:	bf00      	nop
 800b4e8:	e7fe      	b.n	800b4e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4ea:	f001 fa51 	bl	800c990 <xTaskGetSchedulerState>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d102      	bne.n	800b4fa <xQueueGenericSend+0x9e>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <xQueueGenericSend+0xa2>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e000      	b.n	800b500 <xQueueGenericSend+0xa4>
 800b4fe:	2300      	movs	r3, #0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <xQueueGenericSend+0xbe>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	61fb      	str	r3, [r7, #28]
}
 800b516:	bf00      	nop
 800b518:	e7fe      	b.n	800b518 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b51a:	f001 fc73 	bl	800ce04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b526:	429a      	cmp	r2, r3
 800b528:	d302      	bcc.n	800b530 <xQueueGenericSend+0xd4>
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d129      	bne.n	800b584 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	68b9      	ldr	r1, [r7, #8]
 800b534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b536:	f000 fa8b 	bl	800ba50 <prvCopyDataToQueue>
 800b53a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	2b00      	cmp	r3, #0
 800b542:	d010      	beq.n	800b566 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	3324      	adds	r3, #36	; 0x24
 800b548:	4618      	mov	r0, r3
 800b54a:	f001 f861 	bl	800c610 <xTaskRemoveFromEventList>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d013      	beq.n	800b57c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b554:	4b3f      	ldr	r3, [pc, #252]	; (800b654 <xQueueGenericSend+0x1f8>)
 800b556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	e00a      	b.n	800b57c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d007      	beq.n	800b57c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b56c:	4b39      	ldr	r3, [pc, #228]	; (800b654 <xQueueGenericSend+0x1f8>)
 800b56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b57c:	f001 fc72 	bl	800ce64 <vPortExitCritical>
				return pdPASS;
 800b580:	2301      	movs	r3, #1
 800b582:	e063      	b.n	800b64c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d103      	bne.n	800b592 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b58a:	f001 fc6b 	bl	800ce64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	e05c      	b.n	800b64c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b594:	2b00      	cmp	r3, #0
 800b596:	d106      	bne.n	800b5a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b598:	f107 0314 	add.w	r3, r7, #20
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 f899 	bl	800c6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5a6:	f001 fc5d 	bl	800ce64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5aa:	f000 fe27 	bl	800c1fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5ae:	f001 fc29 	bl	800ce04 <vPortEnterCritical>
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5b8:	b25b      	sxtb	r3, r3
 800b5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5be:	d103      	bne.n	800b5c8 <xQueueGenericSend+0x16c>
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5ce:	b25b      	sxtb	r3, r3
 800b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d4:	d103      	bne.n	800b5de <xQueueGenericSend+0x182>
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5de:	f001 fc41 	bl	800ce64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5e2:	1d3a      	adds	r2, r7, #4
 800b5e4:	f107 0314 	add.w	r3, r7, #20
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f001 f888 	bl	800c700 <xTaskCheckForTimeOut>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d124      	bne.n	800b640 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5f8:	f000 fb22 	bl	800bc40 <prvIsQueueFull>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d018      	beq.n	800b634 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	3310      	adds	r3, #16
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 ffdc 	bl	800c5c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b612:	f000 faad 	bl	800bb70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b616:	f000 fdff 	bl	800c218 <xTaskResumeAll>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f47f af7c 	bne.w	800b51a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b622:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <xQueueGenericSend+0x1f8>)
 800b624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	e772      	b.n	800b51a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b636:	f000 fa9b 	bl	800bb70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b63a:	f000 fded 	bl	800c218 <xTaskResumeAll>
 800b63e:	e76c      	b.n	800b51a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b642:	f000 fa95 	bl	800bb70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b646:	f000 fde7 	bl	800c218 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b64a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3738      	adds	r7, #56	; 0x38
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	e000ed04 	.word	0xe000ed04

0800b658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b090      	sub	sp, #64	; 0x40
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10a      	bne.n	800b686 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d103      	bne.n	800b694 <xQueueGenericSendFromISR+0x3c>
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b690:	2b00      	cmp	r3, #0
 800b692:	d101      	bne.n	800b698 <xQueueGenericSendFromISR+0x40>
 800b694:	2301      	movs	r3, #1
 800b696:	e000      	b.n	800b69a <xQueueGenericSendFromISR+0x42>
 800b698:	2300      	movs	r3, #0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d103      	bne.n	800b6c2 <xQueueGenericSendFromISR+0x6a>
 800b6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d101      	bne.n	800b6c6 <xQueueGenericSendFromISR+0x6e>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e000      	b.n	800b6c8 <xQueueGenericSendFromISR+0x70>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10a      	bne.n	800b6e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	623b      	str	r3, [r7, #32]
}
 800b6de:	bf00      	nop
 800b6e0:	e7fe      	b.n	800b6e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6e2:	f001 fc71 	bl	800cfc8 <vPortValidateInterruptPriority>
	__asm volatile
 800b6e6:	f3ef 8211 	mrs	r2, BASEPRI
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	61fa      	str	r2, [r7, #28]
 800b6fc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b6fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d302      	bcc.n	800b714 <xQueueGenericSendFromISR+0xbc>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b02      	cmp	r3, #2
 800b712:	d12f      	bne.n	800b774 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	68b9      	ldr	r1, [r7, #8]
 800b728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b72a:	f000 f991 	bl	800ba50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b72e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b736:	d112      	bne.n	800b75e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d016      	beq.n	800b76e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	3324      	adds	r3, #36	; 0x24
 800b744:	4618      	mov	r0, r3
 800b746:	f000 ff63 	bl	800c610 <xTaskRemoveFromEventList>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00e      	beq.n	800b76e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00b      	beq.n	800b76e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e007      	b.n	800b76e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b75e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b762:	3301      	adds	r3, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	b25a      	sxtb	r2, r3
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b76e:	2301      	movs	r3, #1
 800b770:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b772:	e001      	b.n	800b778 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b774:	2300      	movs	r3, #0
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f383 8811 	msr	BASEPRI, r3
}
 800b782:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b786:	4618      	mov	r0, r3
 800b788:	3740      	adds	r7, #64	; 0x40
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08c      	sub	sp, #48	; 0x30
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b79c:	2300      	movs	r3, #0
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10a      	bne.n	800b7c0 <xQueueReceive+0x30>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	623b      	str	r3, [r7, #32]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d103      	bne.n	800b7ce <xQueueReceive+0x3e>
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <xQueueReceive+0x42>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <xQueueReceive+0x44>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <xQueueReceive+0x5e>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	61fb      	str	r3, [r7, #28]
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7ee:	f001 f8cf 	bl	800c990 <xTaskGetSchedulerState>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <xQueueReceive+0x6e>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d101      	bne.n	800b802 <xQueueReceive+0x72>
 800b7fe:	2301      	movs	r3, #1
 800b800:	e000      	b.n	800b804 <xQueueReceive+0x74>
 800b802:	2300      	movs	r3, #0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10a      	bne.n	800b81e <xQueueReceive+0x8e>
	__asm volatile
 800b808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	61bb      	str	r3, [r7, #24]
}
 800b81a:	bf00      	nop
 800b81c:	e7fe      	b.n	800b81c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b81e:	f001 faf1 	bl	800ce04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b826:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d01f      	beq.n	800b86e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b82e:	68b9      	ldr	r1, [r7, #8]
 800b830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b832:	f000 f977 	bl	800bb24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	1e5a      	subs	r2, r3, #1
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00f      	beq.n	800b866 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b848:	3310      	adds	r3, #16
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 fee0 	bl	800c610 <xTaskRemoveFromEventList>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d007      	beq.n	800b866 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b856:	4b3d      	ldr	r3, [pc, #244]	; (800b94c <xQueueReceive+0x1bc>)
 800b858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b866:	f001 fafd 	bl	800ce64 <vPortExitCritical>
				return pdPASS;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e069      	b.n	800b942 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d103      	bne.n	800b87c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b874:	f001 faf6 	bl	800ce64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b878:	2300      	movs	r3, #0
 800b87a:	e062      	b.n	800b942 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d106      	bne.n	800b890 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b882:	f107 0310 	add.w	r3, r7, #16
 800b886:	4618      	mov	r0, r3
 800b888:	f000 ff24 	bl	800c6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b88c:	2301      	movs	r3, #1
 800b88e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b890:	f001 fae8 	bl	800ce64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b894:	f000 fcb2 	bl	800c1fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b898:	f001 fab4 	bl	800ce04 <vPortEnterCritical>
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8a2:	b25b      	sxtb	r3, r3
 800b8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a8:	d103      	bne.n	800b8b2 <xQueueReceive+0x122>
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8b8:	b25b      	sxtb	r3, r3
 800b8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8be:	d103      	bne.n	800b8c8 <xQueueReceive+0x138>
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8c8:	f001 facc 	bl	800ce64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8cc:	1d3a      	adds	r2, r7, #4
 800b8ce:	f107 0310 	add.w	r3, r7, #16
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 ff13 	bl	800c700 <xTaskCheckForTimeOut>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d123      	bne.n	800b928 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e2:	f000 f997 	bl	800bc14 <prvIsQueueEmpty>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d017      	beq.n	800b91c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	3324      	adds	r3, #36	; 0x24
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fe67 	bl	800c5c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8fc:	f000 f938 	bl	800bb70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b900:	f000 fc8a 	bl	800c218 <xTaskResumeAll>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d189      	bne.n	800b81e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b90a:	4b10      	ldr	r3, [pc, #64]	; (800b94c <xQueueReceive+0x1bc>)
 800b90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	e780      	b.n	800b81e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b91e:	f000 f927 	bl	800bb70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b922:	f000 fc79 	bl	800c218 <xTaskResumeAll>
 800b926:	e77a      	b.n	800b81e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b92a:	f000 f921 	bl	800bb70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b92e:	f000 fc73 	bl	800c218 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b934:	f000 f96e 	bl	800bc14 <prvIsQueueEmpty>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f43f af6f 	beq.w	800b81e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b940:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b942:	4618      	mov	r0, r3
 800b944:	3730      	adds	r7, #48	; 0x30
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	e000ed04 	.word	0xe000ed04

0800b950 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08e      	sub	sp, #56	; 0x38
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10a      	bne.n	800b97c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	623b      	str	r3, [r7, #32]
}
 800b978:	bf00      	nop
 800b97a:	e7fe      	b.n	800b97a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d103      	bne.n	800b98a <xQueueReceiveFromISR+0x3a>
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <xQueueReceiveFromISR+0x3e>
 800b98a:	2301      	movs	r3, #1
 800b98c:	e000      	b.n	800b990 <xQueueReceiveFromISR+0x40>
 800b98e:	2300      	movs	r3, #0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10a      	bne.n	800b9aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	61fb      	str	r3, [r7, #28]
}
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9aa:	f001 fb0d 	bl	800cfc8 <vPortValidateInterruptPriority>
	__asm volatile
 800b9ae:	f3ef 8211 	mrs	r2, BASEPRI
 800b9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	61ba      	str	r2, [r7, #24]
 800b9c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b9c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d02f      	beq.n	800ba36 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9e4:	f000 f89e 	bl	800bb24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	1e5a      	subs	r2, r3, #1
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b9f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f8:	d112      	bne.n	800ba20 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d016      	beq.n	800ba30 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	3310      	adds	r3, #16
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 fe02 	bl	800c610 <xTaskRemoveFromEventList>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00e      	beq.n	800ba30 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00b      	beq.n	800ba30 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	601a      	str	r2, [r3, #0]
 800ba1e:	e007      	b.n	800ba30 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ba20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba24:	3301      	adds	r3, #1
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	b25a      	sxtb	r2, r3
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ba30:	2301      	movs	r3, #1
 800ba32:	637b      	str	r3, [r7, #52]	; 0x34
 800ba34:	e001      	b.n	800ba3a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	637b      	str	r3, [r7, #52]	; 0x34
 800ba3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	f383 8811 	msr	BASEPRI, r3
}
 800ba44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3738      	adds	r7, #56	; 0x38
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d10d      	bne.n	800ba8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d14d      	bne.n	800bb12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 ffa6 	bl	800c9cc <xTaskPriorityDisinherit>
 800ba80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	609a      	str	r2, [r3, #8]
 800ba88:	e043      	b.n	800bb12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d119      	bne.n	800bac4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6858      	ldr	r0, [r3, #4]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68b9      	ldr	r1, [r7, #8]
 800ba9c:	f001 fde1 	bl	800d662 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	685a      	ldr	r2, [r3, #4]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa8:	441a      	add	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	685a      	ldr	r2, [r3, #4]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d32b      	bcc.n	800bb12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	605a      	str	r2, [r3, #4]
 800bac2:	e026      	b.n	800bb12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	68d8      	ldr	r0, [r3, #12]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bacc:	461a      	mov	r2, r3
 800bace:	68b9      	ldr	r1, [r7, #8]
 800bad0:	f001 fdc7 	bl	800d662 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	68da      	ldr	r2, [r3, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800badc:	425b      	negs	r3, r3
 800bade:	441a      	add	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68da      	ldr	r2, [r3, #12]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	429a      	cmp	r2, r3
 800baee:	d207      	bcs.n	800bb00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf8:	425b      	negs	r3, r3
 800bafa:	441a      	add	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d105      	bne.n	800bb12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb1a:	697b      	ldr	r3, [r7, #20]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d018      	beq.n	800bb68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68da      	ldr	r2, [r3, #12]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3e:	441a      	add	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68da      	ldr	r2, [r3, #12]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d303      	bcc.n	800bb58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68d9      	ldr	r1, [r3, #12]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	461a      	mov	r2, r3
 800bb62:	6838      	ldr	r0, [r7, #0]
 800bb64:	f001 fd7d 	bl	800d662 <memcpy>
	}
}
 800bb68:	bf00      	nop
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb78:	f001 f944 	bl	800ce04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb84:	e011      	b.n	800bbaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d012      	beq.n	800bbb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3324      	adds	r3, #36	; 0x24
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 fd3c 	bl	800c610 <xTaskRemoveFromEventList>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb9e:	f000 fe11 	bl	800c7c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	dce9      	bgt.n	800bb86 <prvUnlockQueue+0x16>
 800bbb2:	e000      	b.n	800bbb6 <prvUnlockQueue+0x46>
					break;
 800bbb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	22ff      	movs	r2, #255	; 0xff
 800bbba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bbbe:	f001 f951 	bl	800ce64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bbc2:	f001 f91f 	bl	800ce04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbce:	e011      	b.n	800bbf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d012      	beq.n	800bbfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3310      	adds	r3, #16
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 fd17 	bl	800c610 <xTaskRemoveFromEventList>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bbe8:	f000 fdec 	bl	800c7c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bbec:	7bbb      	ldrb	r3, [r7, #14]
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	dce9      	bgt.n	800bbd0 <prvUnlockQueue+0x60>
 800bbfc:	e000      	b.n	800bc00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bbfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	22ff      	movs	r2, #255	; 0xff
 800bc04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc08:	f001 f92c 	bl	800ce64 <vPortExitCritical>
}
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc1c:	f001 f8f2 	bl	800ce04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d102      	bne.n	800bc2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	e001      	b.n	800bc32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc32:	f001 f917 	bl	800ce64 <vPortExitCritical>

	return xReturn;
 800bc36:	68fb      	ldr	r3, [r7, #12]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc48:	f001 f8dc 	bl	800ce04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d102      	bne.n	800bc5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	e001      	b.n	800bc62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc62:	f001 f8ff 	bl	800ce64 <vPortExitCritical>

	return xReturn;
 800bc66:	68fb      	ldr	r3, [r7, #12]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b08e      	sub	sp, #56	; 0x38
 800bc74:	af04      	add	r7, sp, #16
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10a      	bne.n	800bc9a <xTaskCreateStatic+0x2a>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	623b      	str	r3, [r7, #32]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <xTaskCreateStatic+0x46>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	61fb      	str	r3, [r7, #28]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcb6:	23b4      	movs	r3, #180	; 0xb4
 800bcb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	2bb4      	cmp	r3, #180	; 0xb4
 800bcbe:	d00a      	beq.n	800bcd6 <xTaskCreateStatic+0x66>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	61bb      	str	r3, [r7, #24]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcd6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d01e      	beq.n	800bd1c <xTaskCreateStatic+0xac>
 800bcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d01b      	beq.n	800bd1c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	2202      	movs	r2, #2
 800bcf2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	9303      	str	r3, [sp, #12]
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	9302      	str	r3, [sp, #8]
 800bcfe:	f107 0314 	add.w	r3, r7, #20
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	68b9      	ldr	r1, [r7, #8]
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f000 f850 	bl	800bdb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd16:	f000 f8eb 	bl	800bef0 <prvAddNewTaskToReadyList>
 800bd1a:	e001      	b.n	800bd20 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd20:	697b      	ldr	r3, [r7, #20]
	}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3728      	adds	r7, #40	; 0x28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b08c      	sub	sp, #48	; 0x30
 800bd2e:	af04      	add	r7, sp, #16
 800bd30:	60f8      	str	r0, [r7, #12]
 800bd32:	60b9      	str	r1, [r7, #8]
 800bd34:	603b      	str	r3, [r7, #0]
 800bd36:	4613      	mov	r3, r2
 800bd38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd3a:	88fb      	ldrh	r3, [r7, #6]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f001 f982 	bl	800d048 <pvPortMalloc>
 800bd44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00e      	beq.n	800bd6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd4c:	20b4      	movs	r0, #180	; 0xb4
 800bd4e:	f001 f97b 	bl	800d048 <pvPortMalloc>
 800bd52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d003      	beq.n	800bd62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	631a      	str	r2, [r3, #48]	; 0x30
 800bd60:	e005      	b.n	800bd6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd62:	6978      	ldr	r0, [r7, #20]
 800bd64:	f001 fa3c 	bl	800d1e0 <vPortFree>
 800bd68:	e001      	b.n	800bd6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d017      	beq.n	800bda4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd7c:	88fa      	ldrh	r2, [r7, #6]
 800bd7e:	2300      	movs	r3, #0
 800bd80:	9303      	str	r3, [sp, #12]
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	9302      	str	r3, [sp, #8]
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68b9      	ldr	r1, [r7, #8]
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f000 f80e 	bl	800bdb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd98:	69f8      	ldr	r0, [r7, #28]
 800bd9a:	f000 f8a9 	bl	800bef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	61bb      	str	r3, [r7, #24]
 800bda2:	e002      	b.n	800bdaa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bda4:	f04f 33ff 	mov.w	r3, #4294967295
 800bda8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bdaa:	69bb      	ldr	r3, [r7, #24]
	}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3720      	adds	r7, #32
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4413      	add	r3, r2
 800bdd2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	f023 0307 	bic.w	r3, r3, #7
 800bdda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	f003 0307 	and.w	r3, r3, #7
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <prvInitialiseNewTask+0x48>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	617b      	str	r3, [r7, #20]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01f      	beq.n	800be42 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be02:	2300      	movs	r3, #0
 800be04:	61fb      	str	r3, [r7, #28]
 800be06:	e012      	b.n	800be2e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	4413      	add	r3, r2
 800be0e:	7819      	ldrb	r1, [r3, #0]
 800be10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	4413      	add	r3, r2
 800be16:	3334      	adds	r3, #52	; 0x34
 800be18:	460a      	mov	r2, r1
 800be1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	4413      	add	r3, r2
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d006      	beq.n	800be36 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	3301      	adds	r3, #1
 800be2c:	61fb      	str	r3, [r7, #28]
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	2b0f      	cmp	r3, #15
 800be32:	d9e9      	bls.n	800be08 <prvInitialiseNewTask+0x54>
 800be34:	e000      	b.n	800be38 <prvInitialiseNewTask+0x84>
			{
				break;
 800be36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be40:	e003      	b.n	800be4a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	2200      	movs	r2, #0
 800be46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4c:	2b06      	cmp	r3, #6
 800be4e:	d901      	bls.n	800be54 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be50:	2306      	movs	r3, #6
 800be52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be5e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	2200      	movs	r2, #0
 800be64:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	3304      	adds	r3, #4
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff f928 	bl	800b0c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be72:	3318      	adds	r3, #24
 800be74:	4618      	mov	r0, r3
 800be76:	f7ff f923 	bl	800b0c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	f1c3 0207 	rsb	r2, r3, #7
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	2200      	movs	r2, #0
 800be94:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	334c      	adds	r3, #76	; 0x4c
 800bea4:	2260      	movs	r2, #96	; 0x60
 800bea6:	2100      	movs	r1, #0
 800bea8:	4618      	mov	r0, r3
 800beaa:	f001 fbe8 	bl	800d67e <memset>
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	4a0c      	ldr	r2, [pc, #48]	; (800bee4 <prvInitialiseNewTask+0x130>)
 800beb2:	651a      	str	r2, [r3, #80]	; 0x50
 800beb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb6:	4a0c      	ldr	r2, [pc, #48]	; (800bee8 <prvInitialiseNewTask+0x134>)
 800beb8:	655a      	str	r2, [r3, #84]	; 0x54
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	4a0b      	ldr	r2, [pc, #44]	; (800beec <prvInitialiseNewTask+0x138>)
 800bebe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	68f9      	ldr	r1, [r7, #12]
 800bec4:	69b8      	ldr	r0, [r7, #24]
 800bec6:	f000 fe6d 	bl	800cba4 <pxPortInitialiseStack>
 800beca:	4602      	mov	r2, r0
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d002      	beq.n	800bedc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bedc:	bf00      	nop
 800bede:	3720      	adds	r7, #32
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	08010e7c 	.word	0x08010e7c
 800bee8:	08010e9c 	.word	0x08010e9c
 800beec:	08010e5c 	.word	0x08010e5c

0800bef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bef8:	f000 ff84 	bl	800ce04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800befc:	4b2a      	ldr	r3, [pc, #168]	; (800bfa8 <prvAddNewTaskToReadyList+0xb8>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3301      	adds	r3, #1
 800bf02:	4a29      	ldr	r2, [pc, #164]	; (800bfa8 <prvAddNewTaskToReadyList+0xb8>)
 800bf04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf06:	4b29      	ldr	r3, [pc, #164]	; (800bfac <prvAddNewTaskToReadyList+0xbc>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf0e:	4a27      	ldr	r2, [pc, #156]	; (800bfac <prvAddNewTaskToReadyList+0xbc>)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf14:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <prvAddNewTaskToReadyList+0xb8>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d110      	bne.n	800bf3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf1c:	f000 fc76 	bl	800c80c <prvInitialiseTaskLists>
 800bf20:	e00d      	b.n	800bf3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf22:	4b23      	ldr	r3, [pc, #140]	; (800bfb0 <prvAddNewTaskToReadyList+0xc0>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d109      	bne.n	800bf3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf2a:	4b20      	ldr	r3, [pc, #128]	; (800bfac <prvAddNewTaskToReadyList+0xbc>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d802      	bhi.n	800bf3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf38:	4a1c      	ldr	r2, [pc, #112]	; (800bfac <prvAddNewTaskToReadyList+0xbc>)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf3e:	4b1d      	ldr	r3, [pc, #116]	; (800bfb4 <prvAddNewTaskToReadyList+0xc4>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	3301      	adds	r3, #1
 800bf44:	4a1b      	ldr	r2, [pc, #108]	; (800bfb4 <prvAddNewTaskToReadyList+0xc4>)
 800bf46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	409a      	lsls	r2, r3
 800bf50:	4b19      	ldr	r3, [pc, #100]	; (800bfb8 <prvAddNewTaskToReadyList+0xc8>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	4a18      	ldr	r2, [pc, #96]	; (800bfb8 <prvAddNewTaskToReadyList+0xc8>)
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5e:	4613      	mov	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4413      	add	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4a15      	ldr	r2, [pc, #84]	; (800bfbc <prvAddNewTaskToReadyList+0xcc>)
 800bf68:	441a      	add	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4610      	mov	r0, r2
 800bf72:	f7ff f8b2 	bl	800b0da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf76:	f000 ff75 	bl	800ce64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf7a:	4b0d      	ldr	r3, [pc, #52]	; (800bfb0 <prvAddNewTaskToReadyList+0xc0>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00e      	beq.n	800bfa0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf82:	4b0a      	ldr	r3, [pc, #40]	; (800bfac <prvAddNewTaskToReadyList+0xbc>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d207      	bcs.n	800bfa0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf90:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <prvAddNewTaskToReadyList+0xd0>)
 800bf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	200006b4 	.word	0x200006b4
 800bfac:	200005b4 	.word	0x200005b4
 800bfb0:	200006c0 	.word	0x200006c0
 800bfb4:	200006d0 	.word	0x200006d0
 800bfb8:	200006bc 	.word	0x200006bc
 800bfbc:	200005b8 	.word	0x200005b8
 800bfc0:	e000ed04 	.word	0xe000ed04

0800bfc4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b08a      	sub	sp, #40	; 0x28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10a      	bne.n	800bfee <vTaskDelayUntil+0x2a>
	__asm volatile
 800bfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfdc:	f383 8811 	msr	BASEPRI, r3
 800bfe0:	f3bf 8f6f 	isb	sy
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	617b      	str	r3, [r7, #20]
}
 800bfea:	bf00      	nop
 800bfec:	e7fe      	b.n	800bfec <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10a      	bne.n	800c00a <vTaskDelayUntil+0x46>
	__asm volatile
 800bff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	613b      	str	r3, [r7, #16]
}
 800c006:	bf00      	nop
 800c008:	e7fe      	b.n	800c008 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c00a:	4b2a      	ldr	r3, [pc, #168]	; (800c0b4 <vTaskDelayUntil+0xf0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00a      	beq.n	800c028 <vTaskDelayUntil+0x64>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60fb      	str	r3, [r7, #12]
}
 800c024:	bf00      	nop
 800c026:	e7fe      	b.n	800c026 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c028:	f000 f8e8 	bl	800c1fc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c02c:	4b22      	ldr	r3, [pc, #136]	; (800c0b8 <vTaskDelayUntil+0xf4>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	4413      	add	r3, r2
 800c03a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6a3a      	ldr	r2, [r7, #32]
 800c042:	429a      	cmp	r2, r3
 800c044:	d20b      	bcs.n	800c05e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	69fa      	ldr	r2, [r7, #28]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d211      	bcs.n	800c074 <vTaskDelayUntil+0xb0>
 800c050:	69fa      	ldr	r2, [r7, #28]
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	429a      	cmp	r2, r3
 800c056:	d90d      	bls.n	800c074 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c058:	2301      	movs	r3, #1
 800c05a:	627b      	str	r3, [r7, #36]	; 0x24
 800c05c:	e00a      	b.n	800c074 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	429a      	cmp	r2, r3
 800c066:	d303      	bcc.n	800c070 <vTaskDelayUntil+0xac>
 800c068:	69fa      	ldr	r2, [r7, #28]
 800c06a:	6a3b      	ldr	r3, [r7, #32]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d901      	bls.n	800c074 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c070:	2301      	movs	r3, #1
 800c072:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	69fa      	ldr	r2, [r7, #28]
 800c078:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d006      	beq.n	800c08e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c080:	69fa      	ldr	r2, [r7, #28]
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	2100      	movs	r1, #0
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 fd25 	bl	800cad8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c08e:	f000 f8c3 	bl	800c218 <xTaskResumeAll>
 800c092:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d107      	bne.n	800c0aa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c09a:	4b08      	ldr	r3, [pc, #32]	; (800c0bc <vTaskDelayUntil+0xf8>)
 800c09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0aa:	bf00      	nop
 800c0ac:	3728      	adds	r7, #40	; 0x28
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	200006dc 	.word	0x200006dc
 800c0b8:	200006b8 	.word	0x200006b8
 800c0bc:	e000ed04 	.word	0xe000ed04

0800c0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d017      	beq.n	800c102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0d2:	4b13      	ldr	r3, [pc, #76]	; (800c120 <vTaskDelay+0x60>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <vTaskDelay+0x30>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	60bb      	str	r3, [r7, #8]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0f0:	f000 f884 	bl	800c1fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fcee 	bl	800cad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0fc:	f000 f88c 	bl	800c218 <xTaskResumeAll>
 800c100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d107      	bne.n	800c118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c108:	4b06      	ldr	r3, [pc, #24]	; (800c124 <vTaskDelay+0x64>)
 800c10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c118:	bf00      	nop
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	200006dc 	.word	0x200006dc
 800c124:	e000ed04 	.word	0xe000ed04

0800c128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b08a      	sub	sp, #40	; 0x28
 800c12c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c132:	2300      	movs	r3, #0
 800c134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c136:	463a      	mov	r2, r7
 800c138:	1d39      	adds	r1, r7, #4
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f6 fd06 	bl	8002b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	9202      	str	r2, [sp, #8]
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	2300      	movs	r3, #0
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	2300      	movs	r3, #0
 800c154:	460a      	mov	r2, r1
 800c156:	4921      	ldr	r1, [pc, #132]	; (800c1dc <vTaskStartScheduler+0xb4>)
 800c158:	4821      	ldr	r0, [pc, #132]	; (800c1e0 <vTaskStartScheduler+0xb8>)
 800c15a:	f7ff fd89 	bl	800bc70 <xTaskCreateStatic>
 800c15e:	4603      	mov	r3, r0
 800c160:	4a20      	ldr	r2, [pc, #128]	; (800c1e4 <vTaskStartScheduler+0xbc>)
 800c162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c164:	4b1f      	ldr	r3, [pc, #124]	; (800c1e4 <vTaskStartScheduler+0xbc>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c16c:	2301      	movs	r3, #1
 800c16e:	617b      	str	r3, [r7, #20]
 800c170:	e001      	b.n	800c176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c172:	2300      	movs	r3, #0
 800c174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d11b      	bne.n	800c1b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	613b      	str	r3, [r7, #16]
}
 800c18e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c190:	4b15      	ldr	r3, [pc, #84]	; (800c1e8 <vTaskStartScheduler+0xc0>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	334c      	adds	r3, #76	; 0x4c
 800c196:	4a15      	ldr	r2, [pc, #84]	; (800c1ec <vTaskStartScheduler+0xc4>)
 800c198:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c19a:	4b15      	ldr	r3, [pc, #84]	; (800c1f0 <vTaskStartScheduler+0xc8>)
 800c19c:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c1a2:	4b14      	ldr	r3, [pc, #80]	; (800c1f4 <vTaskStartScheduler+0xcc>)
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c1a8:	4b13      	ldr	r3, [pc, #76]	; (800c1f8 <vTaskStartScheduler+0xd0>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1ae:	f000 fd87 	bl	800ccc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1b2:	e00e      	b.n	800c1d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ba:	d10a      	bne.n	800c1d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	60fb      	str	r3, [r7, #12]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <vTaskStartScheduler+0xa8>
}
 800c1d2:	bf00      	nop
 800c1d4:	3718      	adds	r7, #24
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	08010e0c 	.word	0x08010e0c
 800c1e0:	0800c7dd 	.word	0x0800c7dd
 800c1e4:	200006d8 	.word	0x200006d8
 800c1e8:	200005b4 	.word	0x200005b4
 800c1ec:	200000e4 	.word	0x200000e4
 800c1f0:	200006d4 	.word	0x200006d4
 800c1f4:	200006c0 	.word	0x200006c0
 800c1f8:	200006b8 	.word	0x200006b8

0800c1fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c200:	4b04      	ldr	r3, [pc, #16]	; (800c214 <vTaskSuspendAll+0x18>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3301      	adds	r3, #1
 800c206:	4a03      	ldr	r2, [pc, #12]	; (800c214 <vTaskSuspendAll+0x18>)
 800c208:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c20a:	bf00      	nop
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	200006dc 	.word	0x200006dc

0800c218 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c21e:	2300      	movs	r3, #0
 800c220:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c222:	2300      	movs	r3, #0
 800c224:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c226:	4b41      	ldr	r3, [pc, #260]	; (800c32c <xTaskResumeAll+0x114>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10a      	bne.n	800c244 <xTaskResumeAll+0x2c>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	603b      	str	r3, [r7, #0]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c244:	f000 fdde 	bl	800ce04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c248:	4b38      	ldr	r3, [pc, #224]	; (800c32c <xTaskResumeAll+0x114>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	4a37      	ldr	r2, [pc, #220]	; (800c32c <xTaskResumeAll+0x114>)
 800c250:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c252:	4b36      	ldr	r3, [pc, #216]	; (800c32c <xTaskResumeAll+0x114>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d161      	bne.n	800c31e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c25a:	4b35      	ldr	r3, [pc, #212]	; (800c330 <xTaskResumeAll+0x118>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d05d      	beq.n	800c31e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c262:	e02e      	b.n	800c2c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c264:	4b33      	ldr	r3, [pc, #204]	; (800c334 <xTaskResumeAll+0x11c>)
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	3318      	adds	r3, #24
 800c270:	4618      	mov	r0, r3
 800c272:	f7fe ff8f 	bl	800b194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3304      	adds	r3, #4
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe ff8a 	bl	800b194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	2201      	movs	r2, #1
 800c286:	409a      	lsls	r2, r3
 800c288:	4b2b      	ldr	r3, [pc, #172]	; (800c338 <xTaskResumeAll+0x120>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	4a2a      	ldr	r2, [pc, #168]	; (800c338 <xTaskResumeAll+0x120>)
 800c290:	6013      	str	r3, [r2, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c296:	4613      	mov	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4a27      	ldr	r2, [pc, #156]	; (800c33c <xTaskResumeAll+0x124>)
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	f7fe ff16 	bl	800b0da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b2:	4b23      	ldr	r3, [pc, #140]	; (800c340 <xTaskResumeAll+0x128>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d302      	bcc.n	800c2c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c2bc:	4b21      	ldr	r3, [pc, #132]	; (800c344 <xTaskResumeAll+0x12c>)
 800c2be:	2201      	movs	r2, #1
 800c2c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2c2:	4b1c      	ldr	r3, [pc, #112]	; (800c334 <xTaskResumeAll+0x11c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1cc      	bne.n	800c264 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d001      	beq.n	800c2d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2d0:	f000 fb3e 	bl	800c950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2d4:	4b1c      	ldr	r3, [pc, #112]	; (800c348 <xTaskResumeAll+0x130>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d010      	beq.n	800c302 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2e0:	f000 f858 	bl	800c394 <xTaskIncrementTick>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c2ea:	4b16      	ldr	r3, [pc, #88]	; (800c344 <xTaskResumeAll+0x12c>)
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1f1      	bne.n	800c2e0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c2fc:	4b12      	ldr	r3, [pc, #72]	; (800c348 <xTaskResumeAll+0x130>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c302:	4b10      	ldr	r3, [pc, #64]	; (800c344 <xTaskResumeAll+0x12c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d009      	beq.n	800c31e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c30a:	2301      	movs	r3, #1
 800c30c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c30e:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <xTaskResumeAll+0x134>)
 800c310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c31e:	f000 fda1 	bl	800ce64 <vPortExitCritical>

	return xAlreadyYielded;
 800c322:	68bb      	ldr	r3, [r7, #8]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	200006dc 	.word	0x200006dc
 800c330:	200006b4 	.word	0x200006b4
 800c334:	20000674 	.word	0x20000674
 800c338:	200006bc 	.word	0x200006bc
 800c33c:	200005b8 	.word	0x200005b8
 800c340:	200005b4 	.word	0x200005b4
 800c344:	200006c8 	.word	0x200006c8
 800c348:	200006c4 	.word	0x200006c4
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c356:	4b05      	ldr	r3, [pc, #20]	; (800c36c <xTaskGetTickCount+0x1c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c35c:	687b      	ldr	r3, [r7, #4]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	370c      	adds	r7, #12
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	200006b8 	.word	0x200006b8

0800c370 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c376:	f000 fe27 	bl	800cfc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c37a:	2300      	movs	r3, #0
 800c37c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c37e:	4b04      	ldr	r3, [pc, #16]	; (800c390 <xTaskGetTickCountFromISR+0x20>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c384:	683b      	ldr	r3, [r7, #0]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3708      	adds	r7, #8
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	200006b8 	.word	0x200006b8

0800c394 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c39a:	2300      	movs	r3, #0
 800c39c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c39e:	4b4e      	ldr	r3, [pc, #312]	; (800c4d8 <xTaskIncrementTick+0x144>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 808e 	bne.w	800c4c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c3a8:	4b4c      	ldr	r3, [pc, #304]	; (800c4dc <xTaskIncrementTick+0x148>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c3b0:	4a4a      	ldr	r2, [pc, #296]	; (800c4dc <xTaskIncrementTick+0x148>)
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d120      	bne.n	800c3fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c3bc:	4b48      	ldr	r3, [pc, #288]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00a      	beq.n	800c3dc <xTaskIncrementTick+0x48>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	603b      	str	r3, [r7, #0]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <xTaskIncrementTick+0x46>
 800c3dc:	4b40      	ldr	r3, [pc, #256]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	60fb      	str	r3, [r7, #12]
 800c3e2:	4b40      	ldr	r3, [pc, #256]	; (800c4e4 <xTaskIncrementTick+0x150>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a3e      	ldr	r2, [pc, #248]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	4a3e      	ldr	r2, [pc, #248]	; (800c4e4 <xTaskIncrementTick+0x150>)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6013      	str	r3, [r2, #0]
 800c3f0:	4b3d      	ldr	r3, [pc, #244]	; (800c4e8 <xTaskIncrementTick+0x154>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	4a3c      	ldr	r2, [pc, #240]	; (800c4e8 <xTaskIncrementTick+0x154>)
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	f000 faa9 	bl	800c950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3fe:	4b3b      	ldr	r3, [pc, #236]	; (800c4ec <xTaskIncrementTick+0x158>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	429a      	cmp	r2, r3
 800c406:	d348      	bcc.n	800c49a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c408:	4b35      	ldr	r3, [pc, #212]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d104      	bne.n	800c41c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c412:	4b36      	ldr	r3, [pc, #216]	; (800c4ec <xTaskIncrementTick+0x158>)
 800c414:	f04f 32ff 	mov.w	r2, #4294967295
 800c418:	601a      	str	r2, [r3, #0]
					break;
 800c41a:	e03e      	b.n	800c49a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c41c:	4b30      	ldr	r3, [pc, #192]	; (800c4e0 <xTaskIncrementTick+0x14c>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c42c:	693a      	ldr	r2, [r7, #16]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	429a      	cmp	r2, r3
 800c432:	d203      	bcs.n	800c43c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c434:	4a2d      	ldr	r2, [pc, #180]	; (800c4ec <xTaskIncrementTick+0x158>)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c43a:	e02e      	b.n	800c49a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	3304      	adds	r3, #4
 800c440:	4618      	mov	r0, r3
 800c442:	f7fe fea7 	bl	800b194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d004      	beq.n	800c458 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	3318      	adds	r3, #24
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fe9e 	bl	800b194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	2201      	movs	r2, #1
 800c45e:	409a      	lsls	r2, r3
 800c460:	4b23      	ldr	r3, [pc, #140]	; (800c4f0 <xTaskIncrementTick+0x15c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4313      	orrs	r3, r2
 800c466:	4a22      	ldr	r2, [pc, #136]	; (800c4f0 <xTaskIncrementTick+0x15c>)
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46e:	4613      	mov	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4a1f      	ldr	r2, [pc, #124]	; (800c4f4 <xTaskIncrementTick+0x160>)
 800c478:	441a      	add	r2, r3
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	3304      	adds	r3, #4
 800c47e:	4619      	mov	r1, r3
 800c480:	4610      	mov	r0, r2
 800c482:	f7fe fe2a 	bl	800b0da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c48a:	4b1b      	ldr	r3, [pc, #108]	; (800c4f8 <xTaskIncrementTick+0x164>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c490:	429a      	cmp	r2, r3
 800c492:	d3b9      	bcc.n	800c408 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c494:	2301      	movs	r3, #1
 800c496:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c498:	e7b6      	b.n	800c408 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c49a:	4b17      	ldr	r3, [pc, #92]	; (800c4f8 <xTaskIncrementTick+0x164>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a0:	4914      	ldr	r1, [pc, #80]	; (800c4f4 <xTaskIncrementTick+0x160>)
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	440b      	add	r3, r1
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d901      	bls.n	800c4b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c4b6:	4b11      	ldr	r3, [pc, #68]	; (800c4fc <xTaskIncrementTick+0x168>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	617b      	str	r3, [r7, #20]
 800c4c2:	e004      	b.n	800c4ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c4c4:	4b0e      	ldr	r3, [pc, #56]	; (800c500 <xTaskIncrementTick+0x16c>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	4a0d      	ldr	r2, [pc, #52]	; (800c500 <xTaskIncrementTick+0x16c>)
 800c4cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c4ce:	697b      	ldr	r3, [r7, #20]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3718      	adds	r7, #24
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	200006dc 	.word	0x200006dc
 800c4dc:	200006b8 	.word	0x200006b8
 800c4e0:	2000066c 	.word	0x2000066c
 800c4e4:	20000670 	.word	0x20000670
 800c4e8:	200006cc 	.word	0x200006cc
 800c4ec:	200006d4 	.word	0x200006d4
 800c4f0:	200006bc 	.word	0x200006bc
 800c4f4:	200005b8 	.word	0x200005b8
 800c4f8:	200005b4 	.word	0x200005b4
 800c4fc:	200006c8 	.word	0x200006c8
 800c500:	200006c4 	.word	0x200006c4

0800c504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c50a:	4b29      	ldr	r3, [pc, #164]	; (800c5b0 <vTaskSwitchContext+0xac>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d003      	beq.n	800c51a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c512:	4b28      	ldr	r3, [pc, #160]	; (800c5b4 <vTaskSwitchContext+0xb0>)
 800c514:	2201      	movs	r2, #1
 800c516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c518:	e044      	b.n	800c5a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c51a:	4b26      	ldr	r3, [pc, #152]	; (800c5b4 <vTaskSwitchContext+0xb0>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c520:	4b25      	ldr	r3, [pc, #148]	; (800c5b8 <vTaskSwitchContext+0xb4>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	fab3 f383 	clz	r3, r3
 800c52c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c52e:	7afb      	ldrb	r3, [r7, #11]
 800c530:	f1c3 031f 	rsb	r3, r3, #31
 800c534:	617b      	str	r3, [r7, #20]
 800c536:	4921      	ldr	r1, [pc, #132]	; (800c5bc <vTaskSwitchContext+0xb8>)
 800c538:	697a      	ldr	r2, [r7, #20]
 800c53a:	4613      	mov	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	440b      	add	r3, r1
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10a      	bne.n	800c560 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	607b      	str	r3, [r7, #4]
}
 800c55c:	bf00      	nop
 800c55e:	e7fe      	b.n	800c55e <vTaskSwitchContext+0x5a>
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	4613      	mov	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4413      	add	r3, r2
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	4a14      	ldr	r2, [pc, #80]	; (800c5bc <vTaskSwitchContext+0xb8>)
 800c56c:	4413      	add	r3, r2
 800c56e:	613b      	str	r3, [r7, #16]
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	605a      	str	r2, [r3, #4]
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	3308      	adds	r3, #8
 800c582:	429a      	cmp	r2, r3
 800c584:	d104      	bne.n	800c590 <vTaskSwitchContext+0x8c>
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	605a      	str	r2, [r3, #4]
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	4a0a      	ldr	r2, [pc, #40]	; (800c5c0 <vTaskSwitchContext+0xbc>)
 800c598:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c59a:	4b09      	ldr	r3, [pc, #36]	; (800c5c0 <vTaskSwitchContext+0xbc>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	334c      	adds	r3, #76	; 0x4c
 800c5a0:	4a08      	ldr	r2, [pc, #32]	; (800c5c4 <vTaskSwitchContext+0xc0>)
 800c5a2:	6013      	str	r3, [r2, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	371c      	adds	r7, #28
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	200006dc 	.word	0x200006dc
 800c5b4:	200006c8 	.word	0x200006c8
 800c5b8:	200006bc 	.word	0x200006bc
 800c5bc:	200005b8 	.word	0x200005b8
 800c5c0:	200005b4 	.word	0x200005b4
 800c5c4:	200000e4 	.word	0x200000e4

0800c5c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10a      	bne.n	800c5ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	60fb      	str	r3, [r7, #12]
}
 800c5ea:	bf00      	nop
 800c5ec:	e7fe      	b.n	800c5ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5ee:	4b07      	ldr	r3, [pc, #28]	; (800c60c <vTaskPlaceOnEventList+0x44>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3318      	adds	r3, #24
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7fe fd93 	bl	800b122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c5fc:	2101      	movs	r1, #1
 800c5fe:	6838      	ldr	r0, [r7, #0]
 800c600:	f000 fa6a 	bl	800cad8 <prvAddCurrentTaskToDelayedList>
}
 800c604:	bf00      	nop
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	200005b4 	.word	0x200005b4

0800c610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	60fb      	str	r3, [r7, #12]
}
 800c638:	bf00      	nop
 800c63a:	e7fe      	b.n	800c63a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	3318      	adds	r3, #24
 800c640:	4618      	mov	r0, r3
 800c642:	f7fe fda7 	bl	800b194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c646:	4b1d      	ldr	r3, [pc, #116]	; (800c6bc <xTaskRemoveFromEventList+0xac>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d11c      	bne.n	800c688 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	3304      	adds	r3, #4
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fd9e 	bl	800b194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	2201      	movs	r2, #1
 800c65e:	409a      	lsls	r2, r3
 800c660:	4b17      	ldr	r3, [pc, #92]	; (800c6c0 <xTaskRemoveFromEventList+0xb0>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4313      	orrs	r3, r2
 800c666:	4a16      	ldr	r2, [pc, #88]	; (800c6c0 <xTaskRemoveFromEventList+0xb0>)
 800c668:	6013      	str	r3, [r2, #0]
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	4a13      	ldr	r2, [pc, #76]	; (800c6c4 <xTaskRemoveFromEventList+0xb4>)
 800c678:	441a      	add	r2, r3
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	3304      	adds	r3, #4
 800c67e:	4619      	mov	r1, r3
 800c680:	4610      	mov	r0, r2
 800c682:	f7fe fd2a 	bl	800b0da <vListInsertEnd>
 800c686:	e005      	b.n	800c694 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	3318      	adds	r3, #24
 800c68c:	4619      	mov	r1, r3
 800c68e:	480e      	ldr	r0, [pc, #56]	; (800c6c8 <xTaskRemoveFromEventList+0xb8>)
 800c690:	f7fe fd23 	bl	800b0da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c698:	4b0c      	ldr	r3, [pc, #48]	; (800c6cc <xTaskRemoveFromEventList+0xbc>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d905      	bls.n	800c6ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c6a6:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <xTaskRemoveFromEventList+0xc0>)
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	601a      	str	r2, [r3, #0]
 800c6ac:	e001      	b.n	800c6b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c6b2:	697b      	ldr	r3, [r7, #20]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	200006dc 	.word	0x200006dc
 800c6c0:	200006bc 	.word	0x200006bc
 800c6c4:	200005b8 	.word	0x200005b8
 800c6c8:	20000674 	.word	0x20000674
 800c6cc:	200005b4 	.word	0x200005b4
 800c6d0:	200006c8 	.word	0x200006c8

0800c6d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c6dc:	4b06      	ldr	r3, [pc, #24]	; (800c6f8 <vTaskInternalSetTimeOutState+0x24>)
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c6e4:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <vTaskInternalSetTimeOutState+0x28>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	605a      	str	r2, [r3, #4]
}
 800c6ec:	bf00      	nop
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr
 800c6f8:	200006cc 	.word	0x200006cc
 800c6fc:	200006b8 	.word	0x200006b8

0800c700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10a      	bne.n	800c726 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	613b      	str	r3, [r7, #16]
}
 800c722:	bf00      	nop
 800c724:	e7fe      	b.n	800c724 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10a      	bne.n	800c742 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	60fb      	str	r3, [r7, #12]
}
 800c73e:	bf00      	nop
 800c740:	e7fe      	b.n	800c740 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c742:	f000 fb5f 	bl	800ce04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c746:	4b1d      	ldr	r3, [pc, #116]	; (800c7bc <xTaskCheckForTimeOut+0xbc>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	69ba      	ldr	r2, [r7, #24]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75e:	d102      	bne.n	800c766 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c760:	2300      	movs	r3, #0
 800c762:	61fb      	str	r3, [r7, #28]
 800c764:	e023      	b.n	800c7ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	4b15      	ldr	r3, [pc, #84]	; (800c7c0 <xTaskCheckForTimeOut+0xc0>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d007      	beq.n	800c782 <xTaskCheckForTimeOut+0x82>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	69ba      	ldr	r2, [r7, #24]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d302      	bcc.n	800c782 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c77c:	2301      	movs	r3, #1
 800c77e:	61fb      	str	r3, [r7, #28]
 800c780:	e015      	b.n	800c7ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	697a      	ldr	r2, [r7, #20]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d20b      	bcs.n	800c7a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	1ad2      	subs	r2, r2, r3
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7ff ff9b 	bl	800c6d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	61fb      	str	r3, [r7, #28]
 800c7a2:	e004      	b.n	800c7ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c7ae:	f000 fb59 	bl	800ce64 <vPortExitCritical>

	return xReturn;
 800c7b2:	69fb      	ldr	r3, [r7, #28]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3720      	adds	r7, #32
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	200006b8 	.word	0x200006b8
 800c7c0:	200006cc 	.word	0x200006cc

0800c7c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c7c8:	4b03      	ldr	r3, [pc, #12]	; (800c7d8 <vTaskMissedYield+0x14>)
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	601a      	str	r2, [r3, #0]
}
 800c7ce:	bf00      	nop
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr
 800c7d8:	200006c8 	.word	0x200006c8

0800c7dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c7e4:	f000 f852 	bl	800c88c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c7e8:	4b06      	ldr	r3, [pc, #24]	; (800c804 <prvIdleTask+0x28>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d9f9      	bls.n	800c7e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c7f0:	4b05      	ldr	r3, [pc, #20]	; (800c808 <prvIdleTask+0x2c>)
 800c7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c800:	e7f0      	b.n	800c7e4 <prvIdleTask+0x8>
 800c802:	bf00      	nop
 800c804:	200005b8 	.word	0x200005b8
 800c808:	e000ed04 	.word	0xe000ed04

0800c80c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c812:	2300      	movs	r3, #0
 800c814:	607b      	str	r3, [r7, #4]
 800c816:	e00c      	b.n	800c832 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	4613      	mov	r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	4413      	add	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4a12      	ldr	r2, [pc, #72]	; (800c86c <prvInitialiseTaskLists+0x60>)
 800c824:	4413      	add	r3, r2
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe fc2a 	bl	800b080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	3301      	adds	r3, #1
 800c830:	607b      	str	r3, [r7, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b06      	cmp	r3, #6
 800c836:	d9ef      	bls.n	800c818 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c838:	480d      	ldr	r0, [pc, #52]	; (800c870 <prvInitialiseTaskLists+0x64>)
 800c83a:	f7fe fc21 	bl	800b080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c83e:	480d      	ldr	r0, [pc, #52]	; (800c874 <prvInitialiseTaskLists+0x68>)
 800c840:	f7fe fc1e 	bl	800b080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c844:	480c      	ldr	r0, [pc, #48]	; (800c878 <prvInitialiseTaskLists+0x6c>)
 800c846:	f7fe fc1b 	bl	800b080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c84a:	480c      	ldr	r0, [pc, #48]	; (800c87c <prvInitialiseTaskLists+0x70>)
 800c84c:	f7fe fc18 	bl	800b080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c850:	480b      	ldr	r0, [pc, #44]	; (800c880 <prvInitialiseTaskLists+0x74>)
 800c852:	f7fe fc15 	bl	800b080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c856:	4b0b      	ldr	r3, [pc, #44]	; (800c884 <prvInitialiseTaskLists+0x78>)
 800c858:	4a05      	ldr	r2, [pc, #20]	; (800c870 <prvInitialiseTaskLists+0x64>)
 800c85a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c85c:	4b0a      	ldr	r3, [pc, #40]	; (800c888 <prvInitialiseTaskLists+0x7c>)
 800c85e:	4a05      	ldr	r2, [pc, #20]	; (800c874 <prvInitialiseTaskLists+0x68>)
 800c860:	601a      	str	r2, [r3, #0]
}
 800c862:	bf00      	nop
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	200005b8 	.word	0x200005b8
 800c870:	20000644 	.word	0x20000644
 800c874:	20000658 	.word	0x20000658
 800c878:	20000674 	.word	0x20000674
 800c87c:	20000688 	.word	0x20000688
 800c880:	200006a0 	.word	0x200006a0
 800c884:	2000066c 	.word	0x2000066c
 800c888:	20000670 	.word	0x20000670

0800c88c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c892:	e019      	b.n	800c8c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c894:	f000 fab6 	bl	800ce04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c898:	4b10      	ldr	r3, [pc, #64]	; (800c8dc <prvCheckTasksWaitingTermination+0x50>)
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fe fc75 	bl	800b194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c8aa:	4b0d      	ldr	r3, [pc, #52]	; (800c8e0 <prvCheckTasksWaitingTermination+0x54>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	4a0b      	ldr	r2, [pc, #44]	; (800c8e0 <prvCheckTasksWaitingTermination+0x54>)
 800c8b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c8b4:	4b0b      	ldr	r3, [pc, #44]	; (800c8e4 <prvCheckTasksWaitingTermination+0x58>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	4a0a      	ldr	r2, [pc, #40]	; (800c8e4 <prvCheckTasksWaitingTermination+0x58>)
 800c8bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c8be:	f000 fad1 	bl	800ce64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f810 	bl	800c8e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8c8:	4b06      	ldr	r3, [pc, #24]	; (800c8e4 <prvCheckTasksWaitingTermination+0x58>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e1      	bne.n	800c894 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	20000688 	.word	0x20000688
 800c8e0:	200006b4 	.word	0x200006b4
 800c8e4:	2000069c 	.word	0x2000069c

0800c8e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	334c      	adds	r3, #76	; 0x4c
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f001 fc2b 	bl	800e150 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c900:	2b00      	cmp	r3, #0
 800c902:	d108      	bne.n	800c916 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fc69 	bl	800d1e0 <vPortFree>
				vPortFree( pxTCB );
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fc66 	bl	800d1e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c914:	e018      	b.n	800c948 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d103      	bne.n	800c928 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fc5d 	bl	800d1e0 <vPortFree>
	}
 800c926:	e00f      	b.n	800c948 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d00a      	beq.n	800c948 <prvDeleteTCB+0x60>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	60fb      	str	r3, [r7, #12]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <prvDeleteTCB+0x5e>
	}
 800c948:	bf00      	nop
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c956:	4b0c      	ldr	r3, [pc, #48]	; (800c988 <prvResetNextTaskUnblockTime+0x38>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d104      	bne.n	800c96a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c960:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <prvResetNextTaskUnblockTime+0x3c>)
 800c962:	f04f 32ff 	mov.w	r2, #4294967295
 800c966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c968:	e008      	b.n	800c97c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c96a:	4b07      	ldr	r3, [pc, #28]	; (800c988 <prvResetNextTaskUnblockTime+0x38>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	4a04      	ldr	r2, [pc, #16]	; (800c98c <prvResetNextTaskUnblockTime+0x3c>)
 800c97a:	6013      	str	r3, [r2, #0]
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	2000066c 	.word	0x2000066c
 800c98c:	200006d4 	.word	0x200006d4

0800c990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c996:	4b0b      	ldr	r3, [pc, #44]	; (800c9c4 <xTaskGetSchedulerState+0x34>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d102      	bne.n	800c9a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	607b      	str	r3, [r7, #4]
 800c9a2:	e008      	b.n	800c9b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9a4:	4b08      	ldr	r3, [pc, #32]	; (800c9c8 <xTaskGetSchedulerState+0x38>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d102      	bne.n	800c9b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	607b      	str	r3, [r7, #4]
 800c9b0:	e001      	b.n	800c9b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c9b6:	687b      	ldr	r3, [r7, #4]
	}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr
 800c9c4:	200006c0 	.word	0x200006c0
 800c9c8:	200006dc 	.word	0x200006dc

0800c9cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b086      	sub	sp, #24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d06e      	beq.n	800cac0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c9e2:	4b3a      	ldr	r3, [pc, #232]	; (800cacc <xTaskPriorityDisinherit+0x100>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d00a      	beq.n	800ca02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	60fb      	str	r3, [r7, #12]
}
 800c9fe:	bf00      	nop
 800ca00:	e7fe      	b.n	800ca00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10a      	bne.n	800ca20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	60bb      	str	r3, [r7, #8]
}
 800ca1c:	bf00      	nop
 800ca1e:	e7fe      	b.n	800ca1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca24:	1e5a      	subs	r2, r3, #1
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d044      	beq.n	800cac0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d140      	bne.n	800cac0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	3304      	adds	r3, #4
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe fba6 	bl	800b194 <uxListRemove>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d115      	bne.n	800ca7a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca52:	491f      	ldr	r1, [pc, #124]	; (800cad0 <xTaskPriorityDisinherit+0x104>)
 800ca54:	4613      	mov	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10a      	bne.n	800ca7a <xTaskPriorityDisinherit+0xae>
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca68:	2201      	movs	r2, #1
 800ca6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca6e:	43da      	mvns	r2, r3
 800ca70:	4b18      	ldr	r3, [pc, #96]	; (800cad4 <xTaskPriorityDisinherit+0x108>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4013      	ands	r3, r2
 800ca76:	4a17      	ldr	r2, [pc, #92]	; (800cad4 <xTaskPriorityDisinherit+0x108>)
 800ca78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca86:	f1c3 0207 	rsb	r2, r3, #7
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca92:	2201      	movs	r2, #1
 800ca94:	409a      	lsls	r2, r3
 800ca96:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <xTaskPriorityDisinherit+0x108>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	4a0d      	ldr	r2, [pc, #52]	; (800cad4 <xTaskPriorityDisinherit+0x108>)
 800ca9e:	6013      	str	r3, [r2, #0]
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa4:	4613      	mov	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4a08      	ldr	r2, [pc, #32]	; (800cad0 <xTaskPriorityDisinherit+0x104>)
 800caae:	441a      	add	r2, r3
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	3304      	adds	r3, #4
 800cab4:	4619      	mov	r1, r3
 800cab6:	4610      	mov	r0, r2
 800cab8:	f7fe fb0f 	bl	800b0da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cabc:	2301      	movs	r3, #1
 800cabe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cac0:	697b      	ldr	r3, [r7, #20]
	}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	200005b4 	.word	0x200005b4
 800cad0:	200005b8 	.word	0x200005b8
 800cad4:	200006bc 	.word	0x200006bc

0800cad8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cae2:	4b29      	ldr	r3, [pc, #164]	; (800cb88 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cae8:	4b28      	ldr	r3, [pc, #160]	; (800cb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	3304      	adds	r3, #4
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fe fb50 	bl	800b194 <uxListRemove>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10b      	bne.n	800cb12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cafa:	4b24      	ldr	r3, [pc, #144]	; (800cb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb00:	2201      	movs	r2, #1
 800cb02:	fa02 f303 	lsl.w	r3, r2, r3
 800cb06:	43da      	mvns	r2, r3
 800cb08:	4b21      	ldr	r3, [pc, #132]	; (800cb90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	4a20      	ldr	r2, [pc, #128]	; (800cb90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cb10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb18:	d10a      	bne.n	800cb30 <prvAddCurrentTaskToDelayedList+0x58>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d007      	beq.n	800cb30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb20:	4b1a      	ldr	r3, [pc, #104]	; (800cb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	3304      	adds	r3, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	481a      	ldr	r0, [pc, #104]	; (800cb94 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cb2a:	f7fe fad6 	bl	800b0da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb2e:	e026      	b.n	800cb7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4413      	add	r3, r2
 800cb36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb38:	4b14      	ldr	r3, [pc, #80]	; (800cb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d209      	bcs.n	800cb5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb48:	4b13      	ldr	r3, [pc, #76]	; (800cb98 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	4b0f      	ldr	r3, [pc, #60]	; (800cb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3304      	adds	r3, #4
 800cb52:	4619      	mov	r1, r3
 800cb54:	4610      	mov	r0, r2
 800cb56:	f7fe fae4 	bl	800b122 <vListInsert>
}
 800cb5a:	e010      	b.n	800cb7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb5c:	4b0f      	ldr	r3, [pc, #60]	; (800cb9c <prvAddCurrentTaskToDelayedList+0xc4>)
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	4b0a      	ldr	r3, [pc, #40]	; (800cb8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	3304      	adds	r3, #4
 800cb66:	4619      	mov	r1, r3
 800cb68:	4610      	mov	r0, r2
 800cb6a:	f7fe fada 	bl	800b122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb6e:	4b0c      	ldr	r3, [pc, #48]	; (800cba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d202      	bcs.n	800cb7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cb78:	4a09      	ldr	r2, [pc, #36]	; (800cba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	6013      	str	r3, [r2, #0]
}
 800cb7e:	bf00      	nop
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	200006b8 	.word	0x200006b8
 800cb8c:	200005b4 	.word	0x200005b4
 800cb90:	200006bc 	.word	0x200006bc
 800cb94:	200006a0 	.word	0x200006a0
 800cb98:	20000670 	.word	0x20000670
 800cb9c:	2000066c 	.word	0x2000066c
 800cba0:	200006d4 	.word	0x200006d4

0800cba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3b04      	subs	r3, #4
 800cbb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cbbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3b04      	subs	r3, #4
 800cbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	f023 0201 	bic.w	r2, r3, #1
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	3b04      	subs	r3, #4
 800cbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbd4:	4a0c      	ldr	r2, [pc, #48]	; (800cc08 <pxPortInitialiseStack+0x64>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3b14      	subs	r3, #20
 800cbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3b04      	subs	r3, #4
 800cbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f06f 0202 	mvn.w	r2, #2
 800cbf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3b20      	subs	r3, #32
 800cbf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr
 800cc08:	0800cc0d 	.word	0x0800cc0d

0800cc0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc16:	4b12      	ldr	r3, [pc, #72]	; (800cc60 <prvTaskExitError+0x54>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1e:	d00a      	beq.n	800cc36 <prvTaskExitError+0x2a>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	60fb      	str	r3, [r7, #12]
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <prvTaskExitError+0x28>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	60bb      	str	r3, [r7, #8]
}
 800cc48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc4a:	bf00      	nop
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d0fc      	beq.n	800cc4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc52:	bf00      	nop
 800cc54:	bf00      	nop
 800cc56:	3714      	adds	r7, #20
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr
 800cc60:	200000e0 	.word	0x200000e0
	...

0800cc70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc70:	4b07      	ldr	r3, [pc, #28]	; (800cc90 <pxCurrentTCBConst2>)
 800cc72:	6819      	ldr	r1, [r3, #0]
 800cc74:	6808      	ldr	r0, [r1, #0]
 800cc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7a:	f380 8809 	msr	PSP, r0
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f04f 0000 	mov.w	r0, #0
 800cc86:	f380 8811 	msr	BASEPRI, r0
 800cc8a:	4770      	bx	lr
 800cc8c:	f3af 8000 	nop.w

0800cc90 <pxCurrentTCBConst2>:
 800cc90:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop

0800cc98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc98:	4808      	ldr	r0, [pc, #32]	; (800ccbc <prvPortStartFirstTask+0x24>)
 800cc9a:	6800      	ldr	r0, [r0, #0]
 800cc9c:	6800      	ldr	r0, [r0, #0]
 800cc9e:	f380 8808 	msr	MSP, r0
 800cca2:	f04f 0000 	mov.w	r0, #0
 800cca6:	f380 8814 	msr	CONTROL, r0
 800ccaa:	b662      	cpsie	i
 800ccac:	b661      	cpsie	f
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	df00      	svc	0
 800ccb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ccba:	bf00      	nop
 800ccbc:	e000ed08 	.word	0xe000ed08

0800ccc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ccc6:	4b46      	ldr	r3, [pc, #280]	; (800cde0 <xPortStartScheduler+0x120>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a46      	ldr	r2, [pc, #280]	; (800cde4 <xPortStartScheduler+0x124>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d10a      	bne.n	800cce6 <xPortStartScheduler+0x26>
	__asm volatile
 800ccd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	613b      	str	r3, [r7, #16]
}
 800cce2:	bf00      	nop
 800cce4:	e7fe      	b.n	800cce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cce6:	4b3e      	ldr	r3, [pc, #248]	; (800cde0 <xPortStartScheduler+0x120>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a3f      	ldr	r2, [pc, #252]	; (800cde8 <xPortStartScheduler+0x128>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d10a      	bne.n	800cd06 <xPortStartScheduler+0x46>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd06:	4b39      	ldr	r3, [pc, #228]	; (800cdec <xPortStartScheduler+0x12c>)
 800cd08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	22ff      	movs	r2, #255	; 0xff
 800cd16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	4b31      	ldr	r3, [pc, #196]	; (800cdf0 <xPortStartScheduler+0x130>)
 800cd2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd2e:	4b31      	ldr	r3, [pc, #196]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd30:	2207      	movs	r2, #7
 800cd32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd34:	e009      	b.n	800cd4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd36:	4b2f      	ldr	r3, [pc, #188]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	4a2d      	ldr	r2, [pc, #180]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd4a:	78fb      	ldrb	r3, [r7, #3]
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd52:	2b80      	cmp	r3, #128	; 0x80
 800cd54:	d0ef      	beq.n	800cd36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd56:	4b27      	ldr	r3, [pc, #156]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f1c3 0307 	rsb	r3, r3, #7
 800cd5e:	2b04      	cmp	r3, #4
 800cd60:	d00a      	beq.n	800cd78 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd66:	f383 8811 	msr	BASEPRI, r3
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	60bb      	str	r3, [r7, #8]
}
 800cd74:	bf00      	nop
 800cd76:	e7fe      	b.n	800cd76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd78:	4b1e      	ldr	r3, [pc, #120]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	021b      	lsls	r3, r3, #8
 800cd7e:	4a1d      	ldr	r2, [pc, #116]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd82:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd8a:	4a1a      	ldr	r2, [pc, #104]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd96:	4b18      	ldr	r3, [pc, #96]	; (800cdf8 <xPortStartScheduler+0x138>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a17      	ldr	r2, [pc, #92]	; (800cdf8 <xPortStartScheduler+0x138>)
 800cd9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cda0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cda2:	4b15      	ldr	r3, [pc, #84]	; (800cdf8 <xPortStartScheduler+0x138>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a14      	ldr	r2, [pc, #80]	; (800cdf8 <xPortStartScheduler+0x138>)
 800cda8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cdac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cdae:	f000 f8dd 	bl	800cf6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cdb2:	4b12      	ldr	r3, [pc, #72]	; (800cdfc <xPortStartScheduler+0x13c>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cdb8:	f000 f8fc 	bl	800cfb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cdbc:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <xPortStartScheduler+0x140>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a0f      	ldr	r2, [pc, #60]	; (800ce00 <xPortStartScheduler+0x140>)
 800cdc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cdc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cdc8:	f7ff ff66 	bl	800cc98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cdcc:	f7ff fb9a 	bl	800c504 <vTaskSwitchContext>
	prvTaskExitError();
 800cdd0:	f7ff ff1c 	bl	800cc0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	e000ed00 	.word	0xe000ed00
 800cde4:	410fc271 	.word	0x410fc271
 800cde8:	410fc270 	.word	0x410fc270
 800cdec:	e000e400 	.word	0xe000e400
 800cdf0:	200006e0 	.word	0x200006e0
 800cdf4:	200006e4 	.word	0x200006e4
 800cdf8:	e000ed20 	.word	0xe000ed20
 800cdfc:	200000e0 	.word	0x200000e0
 800ce00:	e000ef34 	.word	0xe000ef34

0800ce04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	607b      	str	r3, [r7, #4]
}
 800ce1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce1e:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <vPortEnterCritical+0x58>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	4a0d      	ldr	r2, [pc, #52]	; (800ce5c <vPortEnterCritical+0x58>)
 800ce26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce28:	4b0c      	ldr	r3, [pc, #48]	; (800ce5c <vPortEnterCritical+0x58>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d10f      	bne.n	800ce50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <vPortEnterCritical+0x5c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00a      	beq.n	800ce50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	603b      	str	r3, [r7, #0]
}
 800ce4c:	bf00      	nop
 800ce4e:	e7fe      	b.n	800ce4e <vPortEnterCritical+0x4a>
	}
}
 800ce50:	bf00      	nop
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	200000e0 	.word	0x200000e0
 800ce60:	e000ed04 	.word	0xe000ed04

0800ce64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce6a:	4b12      	ldr	r3, [pc, #72]	; (800ceb4 <vPortExitCritical+0x50>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10a      	bne.n	800ce88 <vPortExitCritical+0x24>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	607b      	str	r3, [r7, #4]
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce88:	4b0a      	ldr	r3, [pc, #40]	; (800ceb4 <vPortExitCritical+0x50>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	4a09      	ldr	r2, [pc, #36]	; (800ceb4 <vPortExitCritical+0x50>)
 800ce90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce92:	4b08      	ldr	r3, [pc, #32]	; (800ceb4 <vPortExitCritical+0x50>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d105      	bne.n	800cea6 <vPortExitCritical+0x42>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	f383 8811 	msr	BASEPRI, r3
}
 800cea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cea6:	bf00      	nop
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	200000e0 	.word	0x200000e0
	...

0800cec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cec0:	f3ef 8009 	mrs	r0, PSP
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	4b15      	ldr	r3, [pc, #84]	; (800cf20 <pxCurrentTCBConst>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	f01e 0f10 	tst.w	lr, #16
 800ced0:	bf08      	it	eq
 800ced2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ced6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceda:	6010      	str	r0, [r2, #0]
 800cedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cee4:	f380 8811 	msr	BASEPRI, r0
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f7ff fb08 	bl	800c504 <vTaskSwitchContext>
 800cef4:	f04f 0000 	mov.w	r0, #0
 800cef8:	f380 8811 	msr	BASEPRI, r0
 800cefc:	bc09      	pop	{r0, r3}
 800cefe:	6819      	ldr	r1, [r3, #0]
 800cf00:	6808      	ldr	r0, [r1, #0]
 800cf02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf06:	f01e 0f10 	tst.w	lr, #16
 800cf0a:	bf08      	it	eq
 800cf0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf10:	f380 8809 	msr	PSP, r0
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	f3af 8000 	nop.w

0800cf20 <pxCurrentTCBConst>:
 800cf20:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop

0800cf28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf42:	f7ff fa27 	bl	800c394 <xTaskIncrementTick>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d003      	beq.n	800cf54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf4c:	4b06      	ldr	r3, [pc, #24]	; (800cf68 <SysTick_Handler+0x40>)
 800cf4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	2300      	movs	r3, #0
 800cf56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	f383 8811 	msr	BASEPRI, r3
}
 800cf5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf60:	bf00      	nop
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	e000ed04 	.word	0xe000ed04

0800cf6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf70:	4b0b      	ldr	r3, [pc, #44]	; (800cfa0 <vPortSetupTimerInterrupt+0x34>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf76:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <vPortSetupTimerInterrupt+0x38>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf7c:	4b0a      	ldr	r3, [pc, #40]	; (800cfa8 <vPortSetupTimerInterrupt+0x3c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a0a      	ldr	r2, [pc, #40]	; (800cfac <vPortSetupTimerInterrupt+0x40>)
 800cf82:	fba2 2303 	umull	r2, r3, r2, r3
 800cf86:	099b      	lsrs	r3, r3, #6
 800cf88:	4a09      	ldr	r2, [pc, #36]	; (800cfb0 <vPortSetupTimerInterrupt+0x44>)
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf8e:	4b04      	ldr	r3, [pc, #16]	; (800cfa0 <vPortSetupTimerInterrupt+0x34>)
 800cf90:	2207      	movs	r2, #7
 800cf92:	601a      	str	r2, [r3, #0]
}
 800cf94:	bf00      	nop
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	e000e010 	.word	0xe000e010
 800cfa4:	e000e018 	.word	0xe000e018
 800cfa8:	20000004 	.word	0x20000004
 800cfac:	10624dd3 	.word	0x10624dd3
 800cfb0:	e000e014 	.word	0xe000e014

0800cfb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cfb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cfc4 <vPortEnableVFP+0x10>
 800cfb8:	6801      	ldr	r1, [r0, #0]
 800cfba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cfbe:	6001      	str	r1, [r0, #0]
 800cfc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cfc2:	bf00      	nop
 800cfc4:	e000ed88 	.word	0xe000ed88

0800cfc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cfce:	f3ef 8305 	mrs	r3, IPSR
 800cfd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b0f      	cmp	r3, #15
 800cfd8:	d914      	bls.n	800d004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfda:	4a17      	ldr	r2, [pc, #92]	; (800d038 <vPortValidateInterruptPriority+0x70>)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfe4:	4b15      	ldr	r3, [pc, #84]	; (800d03c <vPortValidateInterruptPriority+0x74>)
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	7afa      	ldrb	r2, [r7, #11]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d20a      	bcs.n	800d004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	607b      	str	r3, [r7, #4]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d004:	4b0e      	ldr	r3, [pc, #56]	; (800d040 <vPortValidateInterruptPriority+0x78>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d00c:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <vPortValidateInterruptPriority+0x7c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	429a      	cmp	r2, r3
 800d012:	d90a      	bls.n	800d02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	603b      	str	r3, [r7, #0]
}
 800d026:	bf00      	nop
 800d028:	e7fe      	b.n	800d028 <vPortValidateInterruptPriority+0x60>
	}
 800d02a:	bf00      	nop
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	e000e3f0 	.word	0xe000e3f0
 800d03c:	200006e0 	.word	0x200006e0
 800d040:	e000ed0c 	.word	0xe000ed0c
 800d044:	200006e4 	.word	0x200006e4

0800d048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08a      	sub	sp, #40	; 0x28
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d050:	2300      	movs	r3, #0
 800d052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d054:	f7ff f8d2 	bl	800c1fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d058:	4b5b      	ldr	r3, [pc, #364]	; (800d1c8 <pvPortMalloc+0x180>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d101      	bne.n	800d064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d060:	f000 f920 	bl	800d2a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d064:	4b59      	ldr	r3, [pc, #356]	; (800d1cc <pvPortMalloc+0x184>)
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4013      	ands	r3, r2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f040 8093 	bne.w	800d198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d01d      	beq.n	800d0b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d078:	2208      	movs	r2, #8
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4413      	add	r3, r2
 800d07e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f003 0307 	and.w	r3, r3, #7
 800d086:	2b00      	cmp	r3, #0
 800d088:	d014      	beq.n	800d0b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f023 0307 	bic.w	r3, r3, #7
 800d090:	3308      	adds	r3, #8
 800d092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00a      	beq.n	800d0b4 <pvPortMalloc+0x6c>
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	617b      	str	r3, [r7, #20]
}
 800d0b0:	bf00      	nop
 800d0b2:	e7fe      	b.n	800d0b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d06e      	beq.n	800d198 <pvPortMalloc+0x150>
 800d0ba:	4b45      	ldr	r3, [pc, #276]	; (800d1d0 <pvPortMalloc+0x188>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d869      	bhi.n	800d198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0c4:	4b43      	ldr	r3, [pc, #268]	; (800d1d4 <pvPortMalloc+0x18c>)
 800d0c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0c8:	4b42      	ldr	r3, [pc, #264]	; (800d1d4 <pvPortMalloc+0x18c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0ce:	e004      	b.n	800d0da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d903      	bls.n	800d0ec <pvPortMalloc+0xa4>
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1f1      	bne.n	800d0d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d0ec:	4b36      	ldr	r3, [pc, #216]	; (800d1c8 <pvPortMalloc+0x180>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d050      	beq.n	800d198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2208      	movs	r2, #8
 800d0fc:	4413      	add	r3, r2
 800d0fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	1ad2      	subs	r2, r2, r3
 800d110:	2308      	movs	r3, #8
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	429a      	cmp	r2, r3
 800d116:	d91f      	bls.n	800d158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4413      	add	r3, r2
 800d11e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	f003 0307 	and.w	r3, r3, #7
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00a      	beq.n	800d140 <pvPortMalloc+0xf8>
	__asm volatile
 800d12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	613b      	str	r3, [r7, #16]
}
 800d13c:	bf00      	nop
 800d13e:	e7fe      	b.n	800d13e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d152:	69b8      	ldr	r0, [r7, #24]
 800d154:	f000 f908 	bl	800d368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d158:	4b1d      	ldr	r3, [pc, #116]	; (800d1d0 <pvPortMalloc+0x188>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	4a1b      	ldr	r2, [pc, #108]	; (800d1d0 <pvPortMalloc+0x188>)
 800d164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d166:	4b1a      	ldr	r3, [pc, #104]	; (800d1d0 <pvPortMalloc+0x188>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <pvPortMalloc+0x190>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d203      	bcs.n	800d17a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d172:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <pvPortMalloc+0x188>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a18      	ldr	r2, [pc, #96]	; (800d1d8 <pvPortMalloc+0x190>)
 800d178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	4b13      	ldr	r3, [pc, #76]	; (800d1cc <pvPortMalloc+0x184>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	431a      	orrs	r2, r3
 800d184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <pvPortMalloc+0x194>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3301      	adds	r3, #1
 800d194:	4a11      	ldr	r2, [pc, #68]	; (800d1dc <pvPortMalloc+0x194>)
 800d196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d198:	f7ff f83e 	bl	800c218 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	f003 0307 	and.w	r3, r3, #7
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00a      	beq.n	800d1bc <pvPortMalloc+0x174>
	__asm volatile
 800d1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1aa:	f383 8811 	msr	BASEPRI, r3
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	60fb      	str	r3, [r7, #12]
}
 800d1b8:	bf00      	nop
 800d1ba:	e7fe      	b.n	800d1ba <pvPortMalloc+0x172>
	return pvReturn;
 800d1bc:	69fb      	ldr	r3, [r7, #28]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3728      	adds	r7, #40	; 0x28
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20002a18 	.word	0x20002a18
 800d1cc:	20002a2c 	.word	0x20002a2c
 800d1d0:	20002a1c 	.word	0x20002a1c
 800d1d4:	20002a10 	.word	0x20002a10
 800d1d8:	20002a20 	.word	0x20002a20
 800d1dc:	20002a24 	.word	0x20002a24

0800d1e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d04d      	beq.n	800d28e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d1f2:	2308      	movs	r3, #8
 800d1f4:	425b      	negs	r3, r3
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	685a      	ldr	r2, [r3, #4]
 800d204:	4b24      	ldr	r3, [pc, #144]	; (800d298 <vPortFree+0xb8>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4013      	ands	r3, r2
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10a      	bne.n	800d224 <vPortFree+0x44>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	60fb      	str	r3, [r7, #12]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00a      	beq.n	800d242 <vPortFree+0x62>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	60bb      	str	r3, [r7, #8]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	685a      	ldr	r2, [r3, #4]
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <vPortFree+0xb8>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4013      	ands	r3, r2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d01e      	beq.n	800d28e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d11a      	bne.n	800d28e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	4b0e      	ldr	r3, [pc, #56]	; (800d298 <vPortFree+0xb8>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	43db      	mvns	r3, r3
 800d262:	401a      	ands	r2, r3
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d268:	f7fe ffc8 	bl	800c1fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	4b0a      	ldr	r3, [pc, #40]	; (800d29c <vPortFree+0xbc>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4413      	add	r3, r2
 800d276:	4a09      	ldr	r2, [pc, #36]	; (800d29c <vPortFree+0xbc>)
 800d278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d27a:	6938      	ldr	r0, [r7, #16]
 800d27c:	f000 f874 	bl	800d368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d280:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <vPortFree+0xc0>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	3301      	adds	r3, #1
 800d286:	4a06      	ldr	r2, [pc, #24]	; (800d2a0 <vPortFree+0xc0>)
 800d288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d28a:	f7fe ffc5 	bl	800c218 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d28e:	bf00      	nop
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	20002a2c 	.word	0x20002a2c
 800d29c:	20002a1c 	.word	0x20002a1c
 800d2a0:	20002a28 	.word	0x20002a28

0800d2a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2aa:	f242 3328 	movw	r3, #9000	; 0x2328
 800d2ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2b0:	4b27      	ldr	r3, [pc, #156]	; (800d350 <prvHeapInit+0xac>)
 800d2b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f003 0307 	and.w	r3, r3, #7
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00c      	beq.n	800d2d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3307      	adds	r3, #7
 800d2c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f023 0307 	bic.w	r3, r3, #7
 800d2ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	4a1f      	ldr	r2, [pc, #124]	; (800d350 <prvHeapInit+0xac>)
 800d2d4:	4413      	add	r3, r2
 800d2d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2dc:	4a1d      	ldr	r2, [pc, #116]	; (800d354 <prvHeapInit+0xb0>)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2e2:	4b1c      	ldr	r3, [pc, #112]	; (800d354 <prvHeapInit+0xb0>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2f0:	2208      	movs	r2, #8
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	1a9b      	subs	r3, r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f023 0307 	bic.w	r3, r3, #7
 800d2fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4a15      	ldr	r2, [pc, #84]	; (800d358 <prvHeapInit+0xb4>)
 800d304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d306:	4b14      	ldr	r3, [pc, #80]	; (800d358 <prvHeapInit+0xb4>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2200      	movs	r2, #0
 800d30c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d30e:	4b12      	ldr	r3, [pc, #72]	; (800d358 <prvHeapInit+0xb4>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	1ad2      	subs	r2, r2, r3
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d324:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvHeapInit+0xb4>)
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	4a0a      	ldr	r2, [pc, #40]	; (800d35c <prvHeapInit+0xb8>)
 800d332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	4a09      	ldr	r2, [pc, #36]	; (800d360 <prvHeapInit+0xbc>)
 800d33a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d33c:	4b09      	ldr	r3, [pc, #36]	; (800d364 <prvHeapInit+0xc0>)
 800d33e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d342:	601a      	str	r2, [r3, #0]
}
 800d344:	bf00      	nop
 800d346:	3714      	adds	r7, #20
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	200006e8 	.word	0x200006e8
 800d354:	20002a10 	.word	0x20002a10
 800d358:	20002a18 	.word	0x20002a18
 800d35c:	20002a20 	.word	0x20002a20
 800d360:	20002a1c 	.word	0x20002a1c
 800d364:	20002a2c 	.word	0x20002a2c

0800d368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d370:	4b28      	ldr	r3, [pc, #160]	; (800d414 <prvInsertBlockIntoFreeList+0xac>)
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	e002      	b.n	800d37c <prvInsertBlockIntoFreeList+0x14>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	429a      	cmp	r2, r3
 800d384:	d8f7      	bhi.n	800d376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	4413      	add	r3, r2
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	429a      	cmp	r2, r3
 800d396:	d108      	bne.n	800d3aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	441a      	add	r2, r3
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	441a      	add	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d118      	bne.n	800d3f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	4b15      	ldr	r3, [pc, #84]	; (800d418 <prvInsertBlockIntoFreeList+0xb0>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d00d      	beq.n	800d3e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	441a      	add	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	e008      	b.n	800d3f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3e6:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <prvInsertBlockIntoFreeList+0xb0>)
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e003      	b.n	800d3f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d002      	beq.n	800d406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d406:	bf00      	nop
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	20002a10 	.word	0x20002a10
 800d418:	20002a18 	.word	0x20002a18

0800d41c <__errno>:
 800d41c:	4b01      	ldr	r3, [pc, #4]	; (800d424 <__errno+0x8>)
 800d41e:	6818      	ldr	r0, [r3, #0]
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	200000e4 	.word	0x200000e4

0800d428 <std>:
 800d428:	2300      	movs	r3, #0
 800d42a:	b510      	push	{r4, lr}
 800d42c:	4604      	mov	r4, r0
 800d42e:	e9c0 3300 	strd	r3, r3, [r0]
 800d432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d436:	6083      	str	r3, [r0, #8]
 800d438:	8181      	strh	r1, [r0, #12]
 800d43a:	6643      	str	r3, [r0, #100]	; 0x64
 800d43c:	81c2      	strh	r2, [r0, #14]
 800d43e:	6183      	str	r3, [r0, #24]
 800d440:	4619      	mov	r1, r3
 800d442:	2208      	movs	r2, #8
 800d444:	305c      	adds	r0, #92	; 0x5c
 800d446:	f000 f91a 	bl	800d67e <memset>
 800d44a:	4b05      	ldr	r3, [pc, #20]	; (800d460 <std+0x38>)
 800d44c:	6263      	str	r3, [r4, #36]	; 0x24
 800d44e:	4b05      	ldr	r3, [pc, #20]	; (800d464 <std+0x3c>)
 800d450:	62a3      	str	r3, [r4, #40]	; 0x28
 800d452:	4b05      	ldr	r3, [pc, #20]	; (800d468 <std+0x40>)
 800d454:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d456:	4b05      	ldr	r3, [pc, #20]	; (800d46c <std+0x44>)
 800d458:	6224      	str	r4, [r4, #32]
 800d45a:	6323      	str	r3, [r4, #48]	; 0x30
 800d45c:	bd10      	pop	{r4, pc}
 800d45e:	bf00      	nop
 800d460:	0800e269 	.word	0x0800e269
 800d464:	0800e28b 	.word	0x0800e28b
 800d468:	0800e2c3 	.word	0x0800e2c3
 800d46c:	0800e2e7 	.word	0x0800e2e7

0800d470 <_cleanup_r>:
 800d470:	4901      	ldr	r1, [pc, #4]	; (800d478 <_cleanup_r+0x8>)
 800d472:	f000 b8af 	b.w	800d5d4 <_fwalk_reent>
 800d476:	bf00      	nop
 800d478:	0800f3fd 	.word	0x0800f3fd

0800d47c <__sfmoreglue>:
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	1e4a      	subs	r2, r1, #1
 800d480:	2568      	movs	r5, #104	; 0x68
 800d482:	4355      	muls	r5, r2
 800d484:	460e      	mov	r6, r1
 800d486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d48a:	f000 f901 	bl	800d690 <_malloc_r>
 800d48e:	4604      	mov	r4, r0
 800d490:	b140      	cbz	r0, 800d4a4 <__sfmoreglue+0x28>
 800d492:	2100      	movs	r1, #0
 800d494:	e9c0 1600 	strd	r1, r6, [r0]
 800d498:	300c      	adds	r0, #12
 800d49a:	60a0      	str	r0, [r4, #8]
 800d49c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4a0:	f000 f8ed 	bl	800d67e <memset>
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	bd70      	pop	{r4, r5, r6, pc}

0800d4a8 <__sfp_lock_acquire>:
 800d4a8:	4801      	ldr	r0, [pc, #4]	; (800d4b0 <__sfp_lock_acquire+0x8>)
 800d4aa:	f000 b8d8 	b.w	800d65e <__retarget_lock_acquire_recursive>
 800d4ae:	bf00      	nop
 800d4b0:	2000350c 	.word	0x2000350c

0800d4b4 <__sfp_lock_release>:
 800d4b4:	4801      	ldr	r0, [pc, #4]	; (800d4bc <__sfp_lock_release+0x8>)
 800d4b6:	f000 b8d3 	b.w	800d660 <__retarget_lock_release_recursive>
 800d4ba:	bf00      	nop
 800d4bc:	2000350c 	.word	0x2000350c

0800d4c0 <__sinit_lock_acquire>:
 800d4c0:	4801      	ldr	r0, [pc, #4]	; (800d4c8 <__sinit_lock_acquire+0x8>)
 800d4c2:	f000 b8cc 	b.w	800d65e <__retarget_lock_acquire_recursive>
 800d4c6:	bf00      	nop
 800d4c8:	20003507 	.word	0x20003507

0800d4cc <__sinit_lock_release>:
 800d4cc:	4801      	ldr	r0, [pc, #4]	; (800d4d4 <__sinit_lock_release+0x8>)
 800d4ce:	f000 b8c7 	b.w	800d660 <__retarget_lock_release_recursive>
 800d4d2:	bf00      	nop
 800d4d4:	20003507 	.word	0x20003507

0800d4d8 <__sinit>:
 800d4d8:	b510      	push	{r4, lr}
 800d4da:	4604      	mov	r4, r0
 800d4dc:	f7ff fff0 	bl	800d4c0 <__sinit_lock_acquire>
 800d4e0:	69a3      	ldr	r3, [r4, #24]
 800d4e2:	b11b      	cbz	r3, 800d4ec <__sinit+0x14>
 800d4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4e8:	f7ff bff0 	b.w	800d4cc <__sinit_lock_release>
 800d4ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d4f0:	6523      	str	r3, [r4, #80]	; 0x50
 800d4f2:	4b13      	ldr	r3, [pc, #76]	; (800d540 <__sinit+0x68>)
 800d4f4:	4a13      	ldr	r2, [pc, #76]	; (800d544 <__sinit+0x6c>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d4fa:	42a3      	cmp	r3, r4
 800d4fc:	bf04      	itt	eq
 800d4fe:	2301      	moveq	r3, #1
 800d500:	61a3      	streq	r3, [r4, #24]
 800d502:	4620      	mov	r0, r4
 800d504:	f000 f820 	bl	800d548 <__sfp>
 800d508:	6060      	str	r0, [r4, #4]
 800d50a:	4620      	mov	r0, r4
 800d50c:	f000 f81c 	bl	800d548 <__sfp>
 800d510:	60a0      	str	r0, [r4, #8]
 800d512:	4620      	mov	r0, r4
 800d514:	f000 f818 	bl	800d548 <__sfp>
 800d518:	2200      	movs	r2, #0
 800d51a:	60e0      	str	r0, [r4, #12]
 800d51c:	2104      	movs	r1, #4
 800d51e:	6860      	ldr	r0, [r4, #4]
 800d520:	f7ff ff82 	bl	800d428 <std>
 800d524:	68a0      	ldr	r0, [r4, #8]
 800d526:	2201      	movs	r2, #1
 800d528:	2109      	movs	r1, #9
 800d52a:	f7ff ff7d 	bl	800d428 <std>
 800d52e:	68e0      	ldr	r0, [r4, #12]
 800d530:	2202      	movs	r2, #2
 800d532:	2112      	movs	r1, #18
 800d534:	f7ff ff78 	bl	800d428 <std>
 800d538:	2301      	movs	r3, #1
 800d53a:	61a3      	str	r3, [r4, #24]
 800d53c:	e7d2      	b.n	800d4e4 <__sinit+0xc>
 800d53e:	bf00      	nop
 800d540:	08010ebc 	.word	0x08010ebc
 800d544:	0800d471 	.word	0x0800d471

0800d548 <__sfp>:
 800d548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54a:	4607      	mov	r7, r0
 800d54c:	f7ff ffac 	bl	800d4a8 <__sfp_lock_acquire>
 800d550:	4b1e      	ldr	r3, [pc, #120]	; (800d5cc <__sfp+0x84>)
 800d552:	681e      	ldr	r6, [r3, #0]
 800d554:	69b3      	ldr	r3, [r6, #24]
 800d556:	b913      	cbnz	r3, 800d55e <__sfp+0x16>
 800d558:	4630      	mov	r0, r6
 800d55a:	f7ff ffbd 	bl	800d4d8 <__sinit>
 800d55e:	3648      	adds	r6, #72	; 0x48
 800d560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d564:	3b01      	subs	r3, #1
 800d566:	d503      	bpl.n	800d570 <__sfp+0x28>
 800d568:	6833      	ldr	r3, [r6, #0]
 800d56a:	b30b      	cbz	r3, 800d5b0 <__sfp+0x68>
 800d56c:	6836      	ldr	r6, [r6, #0]
 800d56e:	e7f7      	b.n	800d560 <__sfp+0x18>
 800d570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d574:	b9d5      	cbnz	r5, 800d5ac <__sfp+0x64>
 800d576:	4b16      	ldr	r3, [pc, #88]	; (800d5d0 <__sfp+0x88>)
 800d578:	60e3      	str	r3, [r4, #12]
 800d57a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d57e:	6665      	str	r5, [r4, #100]	; 0x64
 800d580:	f000 f86c 	bl	800d65c <__retarget_lock_init_recursive>
 800d584:	f7ff ff96 	bl	800d4b4 <__sfp_lock_release>
 800d588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d58c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d590:	6025      	str	r5, [r4, #0]
 800d592:	61a5      	str	r5, [r4, #24]
 800d594:	2208      	movs	r2, #8
 800d596:	4629      	mov	r1, r5
 800d598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d59c:	f000 f86f 	bl	800d67e <memset>
 800d5a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d5a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5ac:	3468      	adds	r4, #104	; 0x68
 800d5ae:	e7d9      	b.n	800d564 <__sfp+0x1c>
 800d5b0:	2104      	movs	r1, #4
 800d5b2:	4638      	mov	r0, r7
 800d5b4:	f7ff ff62 	bl	800d47c <__sfmoreglue>
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	6030      	str	r0, [r6, #0]
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d1d5      	bne.n	800d56c <__sfp+0x24>
 800d5c0:	f7ff ff78 	bl	800d4b4 <__sfp_lock_release>
 800d5c4:	230c      	movs	r3, #12
 800d5c6:	603b      	str	r3, [r7, #0]
 800d5c8:	e7ee      	b.n	800d5a8 <__sfp+0x60>
 800d5ca:	bf00      	nop
 800d5cc:	08010ebc 	.word	0x08010ebc
 800d5d0:	ffff0001 	.word	0xffff0001

0800d5d4 <_fwalk_reent>:
 800d5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d8:	4606      	mov	r6, r0
 800d5da:	4688      	mov	r8, r1
 800d5dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5e0:	2700      	movs	r7, #0
 800d5e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5e6:	f1b9 0901 	subs.w	r9, r9, #1
 800d5ea:	d505      	bpl.n	800d5f8 <_fwalk_reent+0x24>
 800d5ec:	6824      	ldr	r4, [r4, #0]
 800d5ee:	2c00      	cmp	r4, #0
 800d5f0:	d1f7      	bne.n	800d5e2 <_fwalk_reent+0xe>
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5f8:	89ab      	ldrh	r3, [r5, #12]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d907      	bls.n	800d60e <_fwalk_reent+0x3a>
 800d5fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d602:	3301      	adds	r3, #1
 800d604:	d003      	beq.n	800d60e <_fwalk_reent+0x3a>
 800d606:	4629      	mov	r1, r5
 800d608:	4630      	mov	r0, r6
 800d60a:	47c0      	blx	r8
 800d60c:	4307      	orrs	r7, r0
 800d60e:	3568      	adds	r5, #104	; 0x68
 800d610:	e7e9      	b.n	800d5e6 <_fwalk_reent+0x12>
	...

0800d614 <__libc_init_array>:
 800d614:	b570      	push	{r4, r5, r6, lr}
 800d616:	4d0d      	ldr	r5, [pc, #52]	; (800d64c <__libc_init_array+0x38>)
 800d618:	4c0d      	ldr	r4, [pc, #52]	; (800d650 <__libc_init_array+0x3c>)
 800d61a:	1b64      	subs	r4, r4, r5
 800d61c:	10a4      	asrs	r4, r4, #2
 800d61e:	2600      	movs	r6, #0
 800d620:	42a6      	cmp	r6, r4
 800d622:	d109      	bne.n	800d638 <__libc_init_array+0x24>
 800d624:	4d0b      	ldr	r5, [pc, #44]	; (800d654 <__libc_init_array+0x40>)
 800d626:	4c0c      	ldr	r4, [pc, #48]	; (800d658 <__libc_init_array+0x44>)
 800d628:	f002 ff40 	bl	80104ac <_init>
 800d62c:	1b64      	subs	r4, r4, r5
 800d62e:	10a4      	asrs	r4, r4, #2
 800d630:	2600      	movs	r6, #0
 800d632:	42a6      	cmp	r6, r4
 800d634:	d105      	bne.n	800d642 <__libc_init_array+0x2e>
 800d636:	bd70      	pop	{r4, r5, r6, pc}
 800d638:	f855 3b04 	ldr.w	r3, [r5], #4
 800d63c:	4798      	blx	r3
 800d63e:	3601      	adds	r6, #1
 800d640:	e7ee      	b.n	800d620 <__libc_init_array+0xc>
 800d642:	f855 3b04 	ldr.w	r3, [r5], #4
 800d646:	4798      	blx	r3
 800d648:	3601      	adds	r6, #1
 800d64a:	e7f2      	b.n	800d632 <__libc_init_array+0x1e>
 800d64c:	080112a8 	.word	0x080112a8
 800d650:	080112a8 	.word	0x080112a8
 800d654:	080112a8 	.word	0x080112a8
 800d658:	080112ac 	.word	0x080112ac

0800d65c <__retarget_lock_init_recursive>:
 800d65c:	4770      	bx	lr

0800d65e <__retarget_lock_acquire_recursive>:
 800d65e:	4770      	bx	lr

0800d660 <__retarget_lock_release_recursive>:
 800d660:	4770      	bx	lr

0800d662 <memcpy>:
 800d662:	440a      	add	r2, r1
 800d664:	4291      	cmp	r1, r2
 800d666:	f100 33ff 	add.w	r3, r0, #4294967295
 800d66a:	d100      	bne.n	800d66e <memcpy+0xc>
 800d66c:	4770      	bx	lr
 800d66e:	b510      	push	{r4, lr}
 800d670:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d674:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d678:	4291      	cmp	r1, r2
 800d67a:	d1f9      	bne.n	800d670 <memcpy+0xe>
 800d67c:	bd10      	pop	{r4, pc}

0800d67e <memset>:
 800d67e:	4402      	add	r2, r0
 800d680:	4603      	mov	r3, r0
 800d682:	4293      	cmp	r3, r2
 800d684:	d100      	bne.n	800d688 <memset+0xa>
 800d686:	4770      	bx	lr
 800d688:	f803 1b01 	strb.w	r1, [r3], #1
 800d68c:	e7f9      	b.n	800d682 <memset+0x4>
	...

0800d690 <_malloc_r>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	1ccd      	adds	r5, r1, #3
 800d694:	f025 0503 	bic.w	r5, r5, #3
 800d698:	3508      	adds	r5, #8
 800d69a:	2d0c      	cmp	r5, #12
 800d69c:	bf38      	it	cc
 800d69e:	250c      	movcc	r5, #12
 800d6a0:	2d00      	cmp	r5, #0
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	db01      	blt.n	800d6aa <_malloc_r+0x1a>
 800d6a6:	42a9      	cmp	r1, r5
 800d6a8:	d903      	bls.n	800d6b2 <_malloc_r+0x22>
 800d6aa:	230c      	movs	r3, #12
 800d6ac:	6033      	str	r3, [r6, #0]
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b2:	f001 ff73 	bl	800f59c <__malloc_lock>
 800d6b6:	4921      	ldr	r1, [pc, #132]	; (800d73c <_malloc_r+0xac>)
 800d6b8:	680a      	ldr	r2, [r1, #0]
 800d6ba:	4614      	mov	r4, r2
 800d6bc:	b99c      	cbnz	r4, 800d6e6 <_malloc_r+0x56>
 800d6be:	4f20      	ldr	r7, [pc, #128]	; (800d740 <_malloc_r+0xb0>)
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	b923      	cbnz	r3, 800d6ce <_malloc_r+0x3e>
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f000 fd9e 	bl	800e208 <_sbrk_r>
 800d6cc:	6038      	str	r0, [r7, #0]
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f000 fd99 	bl	800e208 <_sbrk_r>
 800d6d6:	1c43      	adds	r3, r0, #1
 800d6d8:	d123      	bne.n	800d722 <_malloc_r+0x92>
 800d6da:	230c      	movs	r3, #12
 800d6dc:	6033      	str	r3, [r6, #0]
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f001 ff62 	bl	800f5a8 <__malloc_unlock>
 800d6e4:	e7e3      	b.n	800d6ae <_malloc_r+0x1e>
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	1b5b      	subs	r3, r3, r5
 800d6ea:	d417      	bmi.n	800d71c <_malloc_r+0x8c>
 800d6ec:	2b0b      	cmp	r3, #11
 800d6ee:	d903      	bls.n	800d6f8 <_malloc_r+0x68>
 800d6f0:	6023      	str	r3, [r4, #0]
 800d6f2:	441c      	add	r4, r3
 800d6f4:	6025      	str	r5, [r4, #0]
 800d6f6:	e004      	b.n	800d702 <_malloc_r+0x72>
 800d6f8:	6863      	ldr	r3, [r4, #4]
 800d6fa:	42a2      	cmp	r2, r4
 800d6fc:	bf0c      	ite	eq
 800d6fe:	600b      	streq	r3, [r1, #0]
 800d700:	6053      	strne	r3, [r2, #4]
 800d702:	4630      	mov	r0, r6
 800d704:	f001 ff50 	bl	800f5a8 <__malloc_unlock>
 800d708:	f104 000b 	add.w	r0, r4, #11
 800d70c:	1d23      	adds	r3, r4, #4
 800d70e:	f020 0007 	bic.w	r0, r0, #7
 800d712:	1ac2      	subs	r2, r0, r3
 800d714:	d0cc      	beq.n	800d6b0 <_malloc_r+0x20>
 800d716:	1a1b      	subs	r3, r3, r0
 800d718:	50a3      	str	r3, [r4, r2]
 800d71a:	e7c9      	b.n	800d6b0 <_malloc_r+0x20>
 800d71c:	4622      	mov	r2, r4
 800d71e:	6864      	ldr	r4, [r4, #4]
 800d720:	e7cc      	b.n	800d6bc <_malloc_r+0x2c>
 800d722:	1cc4      	adds	r4, r0, #3
 800d724:	f024 0403 	bic.w	r4, r4, #3
 800d728:	42a0      	cmp	r0, r4
 800d72a:	d0e3      	beq.n	800d6f4 <_malloc_r+0x64>
 800d72c:	1a21      	subs	r1, r4, r0
 800d72e:	4630      	mov	r0, r6
 800d730:	f000 fd6a 	bl	800e208 <_sbrk_r>
 800d734:	3001      	adds	r0, #1
 800d736:	d1dd      	bne.n	800d6f4 <_malloc_r+0x64>
 800d738:	e7cf      	b.n	800d6da <_malloc_r+0x4a>
 800d73a:	bf00      	nop
 800d73c:	20002a30 	.word	0x20002a30
 800d740:	20002a34 	.word	0x20002a34

0800d744 <__cvt>:
 800d744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d748:	ec55 4b10 	vmov	r4, r5, d0
 800d74c:	2d00      	cmp	r5, #0
 800d74e:	460e      	mov	r6, r1
 800d750:	4619      	mov	r1, r3
 800d752:	462b      	mov	r3, r5
 800d754:	bfbb      	ittet	lt
 800d756:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d75a:	461d      	movlt	r5, r3
 800d75c:	2300      	movge	r3, #0
 800d75e:	232d      	movlt	r3, #45	; 0x2d
 800d760:	700b      	strb	r3, [r1, #0]
 800d762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d764:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d768:	4691      	mov	r9, r2
 800d76a:	f023 0820 	bic.w	r8, r3, #32
 800d76e:	bfbc      	itt	lt
 800d770:	4622      	movlt	r2, r4
 800d772:	4614      	movlt	r4, r2
 800d774:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d778:	d005      	beq.n	800d786 <__cvt+0x42>
 800d77a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d77e:	d100      	bne.n	800d782 <__cvt+0x3e>
 800d780:	3601      	adds	r6, #1
 800d782:	2102      	movs	r1, #2
 800d784:	e000      	b.n	800d788 <__cvt+0x44>
 800d786:	2103      	movs	r1, #3
 800d788:	ab03      	add	r3, sp, #12
 800d78a:	9301      	str	r3, [sp, #4]
 800d78c:	ab02      	add	r3, sp, #8
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	ec45 4b10 	vmov	d0, r4, r5
 800d794:	4653      	mov	r3, sl
 800d796:	4632      	mov	r2, r6
 800d798:	f000 ffbe 	bl	800e718 <_dtoa_r>
 800d79c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d7a0:	4607      	mov	r7, r0
 800d7a2:	d102      	bne.n	800d7aa <__cvt+0x66>
 800d7a4:	f019 0f01 	tst.w	r9, #1
 800d7a8:	d022      	beq.n	800d7f0 <__cvt+0xac>
 800d7aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d7ae:	eb07 0906 	add.w	r9, r7, r6
 800d7b2:	d110      	bne.n	800d7d6 <__cvt+0x92>
 800d7b4:	783b      	ldrb	r3, [r7, #0]
 800d7b6:	2b30      	cmp	r3, #48	; 0x30
 800d7b8:	d10a      	bne.n	800d7d0 <__cvt+0x8c>
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2300      	movs	r3, #0
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f3 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7c6:	b918      	cbnz	r0, 800d7d0 <__cvt+0x8c>
 800d7c8:	f1c6 0601 	rsb	r6, r6, #1
 800d7cc:	f8ca 6000 	str.w	r6, [sl]
 800d7d0:	f8da 3000 	ldr.w	r3, [sl]
 800d7d4:	4499      	add	r9, r3
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	2300      	movs	r3, #0
 800d7da:	4620      	mov	r0, r4
 800d7dc:	4629      	mov	r1, r5
 800d7de:	f7f3 f973 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7e2:	b108      	cbz	r0, 800d7e8 <__cvt+0xa4>
 800d7e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7e8:	2230      	movs	r2, #48	; 0x30
 800d7ea:	9b03      	ldr	r3, [sp, #12]
 800d7ec:	454b      	cmp	r3, r9
 800d7ee:	d307      	bcc.n	800d800 <__cvt+0xbc>
 800d7f0:	9b03      	ldr	r3, [sp, #12]
 800d7f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7f4:	1bdb      	subs	r3, r3, r7
 800d7f6:	4638      	mov	r0, r7
 800d7f8:	6013      	str	r3, [r2, #0]
 800d7fa:	b004      	add	sp, #16
 800d7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d800:	1c59      	adds	r1, r3, #1
 800d802:	9103      	str	r1, [sp, #12]
 800d804:	701a      	strb	r2, [r3, #0]
 800d806:	e7f0      	b.n	800d7ea <__cvt+0xa6>

0800d808 <__exponent>:
 800d808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d80a:	4603      	mov	r3, r0
 800d80c:	2900      	cmp	r1, #0
 800d80e:	bfb8      	it	lt
 800d810:	4249      	neglt	r1, r1
 800d812:	f803 2b02 	strb.w	r2, [r3], #2
 800d816:	bfb4      	ite	lt
 800d818:	222d      	movlt	r2, #45	; 0x2d
 800d81a:	222b      	movge	r2, #43	; 0x2b
 800d81c:	2909      	cmp	r1, #9
 800d81e:	7042      	strb	r2, [r0, #1]
 800d820:	dd2a      	ble.n	800d878 <__exponent+0x70>
 800d822:	f10d 0407 	add.w	r4, sp, #7
 800d826:	46a4      	mov	ip, r4
 800d828:	270a      	movs	r7, #10
 800d82a:	46a6      	mov	lr, r4
 800d82c:	460a      	mov	r2, r1
 800d82e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d832:	fb07 1516 	mls	r5, r7, r6, r1
 800d836:	3530      	adds	r5, #48	; 0x30
 800d838:	2a63      	cmp	r2, #99	; 0x63
 800d83a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d83e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d842:	4631      	mov	r1, r6
 800d844:	dcf1      	bgt.n	800d82a <__exponent+0x22>
 800d846:	3130      	adds	r1, #48	; 0x30
 800d848:	f1ae 0502 	sub.w	r5, lr, #2
 800d84c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d850:	1c44      	adds	r4, r0, #1
 800d852:	4629      	mov	r1, r5
 800d854:	4561      	cmp	r1, ip
 800d856:	d30a      	bcc.n	800d86e <__exponent+0x66>
 800d858:	f10d 0209 	add.w	r2, sp, #9
 800d85c:	eba2 020e 	sub.w	r2, r2, lr
 800d860:	4565      	cmp	r5, ip
 800d862:	bf88      	it	hi
 800d864:	2200      	movhi	r2, #0
 800d866:	4413      	add	r3, r2
 800d868:	1a18      	subs	r0, r3, r0
 800d86a:	b003      	add	sp, #12
 800d86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d872:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d876:	e7ed      	b.n	800d854 <__exponent+0x4c>
 800d878:	2330      	movs	r3, #48	; 0x30
 800d87a:	3130      	adds	r1, #48	; 0x30
 800d87c:	7083      	strb	r3, [r0, #2]
 800d87e:	70c1      	strb	r1, [r0, #3]
 800d880:	1d03      	adds	r3, r0, #4
 800d882:	e7f1      	b.n	800d868 <__exponent+0x60>

0800d884 <_printf_float>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	ed2d 8b02 	vpush	{d8}
 800d88c:	b08d      	sub	sp, #52	; 0x34
 800d88e:	460c      	mov	r4, r1
 800d890:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d894:	4616      	mov	r6, r2
 800d896:	461f      	mov	r7, r3
 800d898:	4605      	mov	r5, r0
 800d89a:	f001 fdfd 	bl	800f498 <_localeconv_r>
 800d89e:	f8d0 a000 	ldr.w	sl, [r0]
 800d8a2:	4650      	mov	r0, sl
 800d8a4:	f7f2 fc94 	bl	80001d0 <strlen>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d8ac:	6823      	ldr	r3, [r4, #0]
 800d8ae:	9305      	str	r3, [sp, #20]
 800d8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800d8b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d8b8:	3307      	adds	r3, #7
 800d8ba:	f023 0307 	bic.w	r3, r3, #7
 800d8be:	f103 0208 	add.w	r2, r3, #8
 800d8c2:	f8c8 2000 	str.w	r2, [r8]
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d8ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d8d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d8d6:	9307      	str	r3, [sp, #28]
 800d8d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800d8dc:	ee08 0a10 	vmov	s16, r0
 800d8e0:	4b9f      	ldr	r3, [pc, #636]	; (800db60 <_printf_float+0x2dc>)
 800d8e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ea:	f7f3 f91f 	bl	8000b2c <__aeabi_dcmpun>
 800d8ee:	bb88      	cbnz	r0, 800d954 <_printf_float+0xd0>
 800d8f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8f4:	4b9a      	ldr	r3, [pc, #616]	; (800db60 <_printf_float+0x2dc>)
 800d8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fa:	f7f3 f8f9 	bl	8000af0 <__aeabi_dcmple>
 800d8fe:	bb48      	cbnz	r0, 800d954 <_printf_float+0xd0>
 800d900:	2200      	movs	r2, #0
 800d902:	2300      	movs	r3, #0
 800d904:	4640      	mov	r0, r8
 800d906:	4649      	mov	r1, r9
 800d908:	f7f3 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800d90c:	b110      	cbz	r0, 800d914 <_printf_float+0x90>
 800d90e:	232d      	movs	r3, #45	; 0x2d
 800d910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d914:	4b93      	ldr	r3, [pc, #588]	; (800db64 <_printf_float+0x2e0>)
 800d916:	4894      	ldr	r0, [pc, #592]	; (800db68 <_printf_float+0x2e4>)
 800d918:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d91c:	bf94      	ite	ls
 800d91e:	4698      	movls	r8, r3
 800d920:	4680      	movhi	r8, r0
 800d922:	2303      	movs	r3, #3
 800d924:	6123      	str	r3, [r4, #16]
 800d926:	9b05      	ldr	r3, [sp, #20]
 800d928:	f023 0204 	bic.w	r2, r3, #4
 800d92c:	6022      	str	r2, [r4, #0]
 800d92e:	f04f 0900 	mov.w	r9, #0
 800d932:	9700      	str	r7, [sp, #0]
 800d934:	4633      	mov	r3, r6
 800d936:	aa0b      	add	r2, sp, #44	; 0x2c
 800d938:	4621      	mov	r1, r4
 800d93a:	4628      	mov	r0, r5
 800d93c:	f000 f9d8 	bl	800dcf0 <_printf_common>
 800d940:	3001      	adds	r0, #1
 800d942:	f040 8090 	bne.w	800da66 <_printf_float+0x1e2>
 800d946:	f04f 30ff 	mov.w	r0, #4294967295
 800d94a:	b00d      	add	sp, #52	; 0x34
 800d94c:	ecbd 8b02 	vpop	{d8}
 800d950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d954:	4642      	mov	r2, r8
 800d956:	464b      	mov	r3, r9
 800d958:	4640      	mov	r0, r8
 800d95a:	4649      	mov	r1, r9
 800d95c:	f7f3 f8e6 	bl	8000b2c <__aeabi_dcmpun>
 800d960:	b140      	cbz	r0, 800d974 <_printf_float+0xf0>
 800d962:	464b      	mov	r3, r9
 800d964:	2b00      	cmp	r3, #0
 800d966:	bfbc      	itt	lt
 800d968:	232d      	movlt	r3, #45	; 0x2d
 800d96a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d96e:	487f      	ldr	r0, [pc, #508]	; (800db6c <_printf_float+0x2e8>)
 800d970:	4b7f      	ldr	r3, [pc, #508]	; (800db70 <_printf_float+0x2ec>)
 800d972:	e7d1      	b.n	800d918 <_printf_float+0x94>
 800d974:	6863      	ldr	r3, [r4, #4]
 800d976:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d97a:	9206      	str	r2, [sp, #24]
 800d97c:	1c5a      	adds	r2, r3, #1
 800d97e:	d13f      	bne.n	800da00 <_printf_float+0x17c>
 800d980:	2306      	movs	r3, #6
 800d982:	6063      	str	r3, [r4, #4]
 800d984:	9b05      	ldr	r3, [sp, #20]
 800d986:	6861      	ldr	r1, [r4, #4]
 800d988:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d98c:	2300      	movs	r3, #0
 800d98e:	9303      	str	r3, [sp, #12]
 800d990:	ab0a      	add	r3, sp, #40	; 0x28
 800d992:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d996:	ab09      	add	r3, sp, #36	; 0x24
 800d998:	ec49 8b10 	vmov	d0, r8, r9
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	6022      	str	r2, [r4, #0]
 800d9a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	f7ff fecd 	bl	800d744 <__cvt>
 800d9aa:	9b06      	ldr	r3, [sp, #24]
 800d9ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9ae:	2b47      	cmp	r3, #71	; 0x47
 800d9b0:	4680      	mov	r8, r0
 800d9b2:	d108      	bne.n	800d9c6 <_printf_float+0x142>
 800d9b4:	1cc8      	adds	r0, r1, #3
 800d9b6:	db02      	blt.n	800d9be <_printf_float+0x13a>
 800d9b8:	6863      	ldr	r3, [r4, #4]
 800d9ba:	4299      	cmp	r1, r3
 800d9bc:	dd41      	ble.n	800da42 <_printf_float+0x1be>
 800d9be:	f1ab 0b02 	sub.w	fp, fp, #2
 800d9c2:	fa5f fb8b 	uxtb.w	fp, fp
 800d9c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d9ca:	d820      	bhi.n	800da0e <_printf_float+0x18a>
 800d9cc:	3901      	subs	r1, #1
 800d9ce:	465a      	mov	r2, fp
 800d9d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d9d4:	9109      	str	r1, [sp, #36]	; 0x24
 800d9d6:	f7ff ff17 	bl	800d808 <__exponent>
 800d9da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9dc:	1813      	adds	r3, r2, r0
 800d9de:	2a01      	cmp	r2, #1
 800d9e0:	4681      	mov	r9, r0
 800d9e2:	6123      	str	r3, [r4, #16]
 800d9e4:	dc02      	bgt.n	800d9ec <_printf_float+0x168>
 800d9e6:	6822      	ldr	r2, [r4, #0]
 800d9e8:	07d2      	lsls	r2, r2, #31
 800d9ea:	d501      	bpl.n	800d9f0 <_printf_float+0x16c>
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	6123      	str	r3, [r4, #16]
 800d9f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d09c      	beq.n	800d932 <_printf_float+0xae>
 800d9f8:	232d      	movs	r3, #45	; 0x2d
 800d9fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9fe:	e798      	b.n	800d932 <_printf_float+0xae>
 800da00:	9a06      	ldr	r2, [sp, #24]
 800da02:	2a47      	cmp	r2, #71	; 0x47
 800da04:	d1be      	bne.n	800d984 <_printf_float+0x100>
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1bc      	bne.n	800d984 <_printf_float+0x100>
 800da0a:	2301      	movs	r3, #1
 800da0c:	e7b9      	b.n	800d982 <_printf_float+0xfe>
 800da0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800da12:	d118      	bne.n	800da46 <_printf_float+0x1c2>
 800da14:	2900      	cmp	r1, #0
 800da16:	6863      	ldr	r3, [r4, #4]
 800da18:	dd0b      	ble.n	800da32 <_printf_float+0x1ae>
 800da1a:	6121      	str	r1, [r4, #16]
 800da1c:	b913      	cbnz	r3, 800da24 <_printf_float+0x1a0>
 800da1e:	6822      	ldr	r2, [r4, #0]
 800da20:	07d0      	lsls	r0, r2, #31
 800da22:	d502      	bpl.n	800da2a <_printf_float+0x1a6>
 800da24:	3301      	adds	r3, #1
 800da26:	440b      	add	r3, r1
 800da28:	6123      	str	r3, [r4, #16]
 800da2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800da2c:	f04f 0900 	mov.w	r9, #0
 800da30:	e7de      	b.n	800d9f0 <_printf_float+0x16c>
 800da32:	b913      	cbnz	r3, 800da3a <_printf_float+0x1b6>
 800da34:	6822      	ldr	r2, [r4, #0]
 800da36:	07d2      	lsls	r2, r2, #31
 800da38:	d501      	bpl.n	800da3e <_printf_float+0x1ba>
 800da3a:	3302      	adds	r3, #2
 800da3c:	e7f4      	b.n	800da28 <_printf_float+0x1a4>
 800da3e:	2301      	movs	r3, #1
 800da40:	e7f2      	b.n	800da28 <_printf_float+0x1a4>
 800da42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800da46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da48:	4299      	cmp	r1, r3
 800da4a:	db05      	blt.n	800da58 <_printf_float+0x1d4>
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	6121      	str	r1, [r4, #16]
 800da50:	07d8      	lsls	r0, r3, #31
 800da52:	d5ea      	bpl.n	800da2a <_printf_float+0x1a6>
 800da54:	1c4b      	adds	r3, r1, #1
 800da56:	e7e7      	b.n	800da28 <_printf_float+0x1a4>
 800da58:	2900      	cmp	r1, #0
 800da5a:	bfd4      	ite	le
 800da5c:	f1c1 0202 	rsble	r2, r1, #2
 800da60:	2201      	movgt	r2, #1
 800da62:	4413      	add	r3, r2
 800da64:	e7e0      	b.n	800da28 <_printf_float+0x1a4>
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	055a      	lsls	r2, r3, #21
 800da6a:	d407      	bmi.n	800da7c <_printf_float+0x1f8>
 800da6c:	6923      	ldr	r3, [r4, #16]
 800da6e:	4642      	mov	r2, r8
 800da70:	4631      	mov	r1, r6
 800da72:	4628      	mov	r0, r5
 800da74:	47b8      	blx	r7
 800da76:	3001      	adds	r0, #1
 800da78:	d12c      	bne.n	800dad4 <_printf_float+0x250>
 800da7a:	e764      	b.n	800d946 <_printf_float+0xc2>
 800da7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da80:	f240 80e0 	bls.w	800dc44 <_printf_float+0x3c0>
 800da84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da88:	2200      	movs	r2, #0
 800da8a:	2300      	movs	r3, #0
 800da8c:	f7f3 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800da90:	2800      	cmp	r0, #0
 800da92:	d034      	beq.n	800dafe <_printf_float+0x27a>
 800da94:	4a37      	ldr	r2, [pc, #220]	; (800db74 <_printf_float+0x2f0>)
 800da96:	2301      	movs	r3, #1
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	f43f af51 	beq.w	800d946 <_printf_float+0xc2>
 800daa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800daa8:	429a      	cmp	r2, r3
 800daaa:	db02      	blt.n	800dab2 <_printf_float+0x22e>
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	07d8      	lsls	r0, r3, #31
 800dab0:	d510      	bpl.n	800dad4 <_printf_float+0x250>
 800dab2:	ee18 3a10 	vmov	r3, s16
 800dab6:	4652      	mov	r2, sl
 800dab8:	4631      	mov	r1, r6
 800daba:	4628      	mov	r0, r5
 800dabc:	47b8      	blx	r7
 800dabe:	3001      	adds	r0, #1
 800dac0:	f43f af41 	beq.w	800d946 <_printf_float+0xc2>
 800dac4:	f04f 0800 	mov.w	r8, #0
 800dac8:	f104 091a 	add.w	r9, r4, #26
 800dacc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dace:	3b01      	subs	r3, #1
 800dad0:	4543      	cmp	r3, r8
 800dad2:	dc09      	bgt.n	800dae8 <_printf_float+0x264>
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	079b      	lsls	r3, r3, #30
 800dad8:	f100 8105 	bmi.w	800dce6 <_printf_float+0x462>
 800dadc:	68e0      	ldr	r0, [r4, #12]
 800dade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dae0:	4298      	cmp	r0, r3
 800dae2:	bfb8      	it	lt
 800dae4:	4618      	movlt	r0, r3
 800dae6:	e730      	b.n	800d94a <_printf_float+0xc6>
 800dae8:	2301      	movs	r3, #1
 800daea:	464a      	mov	r2, r9
 800daec:	4631      	mov	r1, r6
 800daee:	4628      	mov	r0, r5
 800daf0:	47b8      	blx	r7
 800daf2:	3001      	adds	r0, #1
 800daf4:	f43f af27 	beq.w	800d946 <_printf_float+0xc2>
 800daf8:	f108 0801 	add.w	r8, r8, #1
 800dafc:	e7e6      	b.n	800dacc <_printf_float+0x248>
 800dafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db00:	2b00      	cmp	r3, #0
 800db02:	dc39      	bgt.n	800db78 <_printf_float+0x2f4>
 800db04:	4a1b      	ldr	r2, [pc, #108]	; (800db74 <_printf_float+0x2f0>)
 800db06:	2301      	movs	r3, #1
 800db08:	4631      	mov	r1, r6
 800db0a:	4628      	mov	r0, r5
 800db0c:	47b8      	blx	r7
 800db0e:	3001      	adds	r0, #1
 800db10:	f43f af19 	beq.w	800d946 <_printf_float+0xc2>
 800db14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db18:	4313      	orrs	r3, r2
 800db1a:	d102      	bne.n	800db22 <_printf_float+0x29e>
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	07d9      	lsls	r1, r3, #31
 800db20:	d5d8      	bpl.n	800dad4 <_printf_float+0x250>
 800db22:	ee18 3a10 	vmov	r3, s16
 800db26:	4652      	mov	r2, sl
 800db28:	4631      	mov	r1, r6
 800db2a:	4628      	mov	r0, r5
 800db2c:	47b8      	blx	r7
 800db2e:	3001      	adds	r0, #1
 800db30:	f43f af09 	beq.w	800d946 <_printf_float+0xc2>
 800db34:	f04f 0900 	mov.w	r9, #0
 800db38:	f104 0a1a 	add.w	sl, r4, #26
 800db3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db3e:	425b      	negs	r3, r3
 800db40:	454b      	cmp	r3, r9
 800db42:	dc01      	bgt.n	800db48 <_printf_float+0x2c4>
 800db44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db46:	e792      	b.n	800da6e <_printf_float+0x1ea>
 800db48:	2301      	movs	r3, #1
 800db4a:	4652      	mov	r2, sl
 800db4c:	4631      	mov	r1, r6
 800db4e:	4628      	mov	r0, r5
 800db50:	47b8      	blx	r7
 800db52:	3001      	adds	r0, #1
 800db54:	f43f aef7 	beq.w	800d946 <_printf_float+0xc2>
 800db58:	f109 0901 	add.w	r9, r9, #1
 800db5c:	e7ee      	b.n	800db3c <_printf_float+0x2b8>
 800db5e:	bf00      	nop
 800db60:	7fefffff 	.word	0x7fefffff
 800db64:	08010ec0 	.word	0x08010ec0
 800db68:	08010ec4 	.word	0x08010ec4
 800db6c:	08010ecc 	.word	0x08010ecc
 800db70:	08010ec8 	.word	0x08010ec8
 800db74:	08010ed0 	.word	0x08010ed0
 800db78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db7c:	429a      	cmp	r2, r3
 800db7e:	bfa8      	it	ge
 800db80:	461a      	movge	r2, r3
 800db82:	2a00      	cmp	r2, #0
 800db84:	4691      	mov	r9, r2
 800db86:	dc37      	bgt.n	800dbf8 <_printf_float+0x374>
 800db88:	f04f 0b00 	mov.w	fp, #0
 800db8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db90:	f104 021a 	add.w	r2, r4, #26
 800db94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db96:	9305      	str	r3, [sp, #20]
 800db98:	eba3 0309 	sub.w	r3, r3, r9
 800db9c:	455b      	cmp	r3, fp
 800db9e:	dc33      	bgt.n	800dc08 <_printf_float+0x384>
 800dba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dba4:	429a      	cmp	r2, r3
 800dba6:	db3b      	blt.n	800dc20 <_printf_float+0x39c>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	07da      	lsls	r2, r3, #31
 800dbac:	d438      	bmi.n	800dc20 <_printf_float+0x39c>
 800dbae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbb0:	9b05      	ldr	r3, [sp, #20]
 800dbb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	eba2 0901 	sub.w	r9, r2, r1
 800dbba:	4599      	cmp	r9, r3
 800dbbc:	bfa8      	it	ge
 800dbbe:	4699      	movge	r9, r3
 800dbc0:	f1b9 0f00 	cmp.w	r9, #0
 800dbc4:	dc35      	bgt.n	800dc32 <_printf_float+0x3ae>
 800dbc6:	f04f 0800 	mov.w	r8, #0
 800dbca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbce:	f104 0a1a 	add.w	sl, r4, #26
 800dbd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbd6:	1a9b      	subs	r3, r3, r2
 800dbd8:	eba3 0309 	sub.w	r3, r3, r9
 800dbdc:	4543      	cmp	r3, r8
 800dbde:	f77f af79 	ble.w	800dad4 <_printf_float+0x250>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	4652      	mov	r2, sl
 800dbe6:	4631      	mov	r1, r6
 800dbe8:	4628      	mov	r0, r5
 800dbea:	47b8      	blx	r7
 800dbec:	3001      	adds	r0, #1
 800dbee:	f43f aeaa 	beq.w	800d946 <_printf_float+0xc2>
 800dbf2:	f108 0801 	add.w	r8, r8, #1
 800dbf6:	e7ec      	b.n	800dbd2 <_printf_float+0x34e>
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	4631      	mov	r1, r6
 800dbfc:	4642      	mov	r2, r8
 800dbfe:	4628      	mov	r0, r5
 800dc00:	47b8      	blx	r7
 800dc02:	3001      	adds	r0, #1
 800dc04:	d1c0      	bne.n	800db88 <_printf_float+0x304>
 800dc06:	e69e      	b.n	800d946 <_printf_float+0xc2>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	9205      	str	r2, [sp, #20]
 800dc10:	47b8      	blx	r7
 800dc12:	3001      	adds	r0, #1
 800dc14:	f43f ae97 	beq.w	800d946 <_printf_float+0xc2>
 800dc18:	9a05      	ldr	r2, [sp, #20]
 800dc1a:	f10b 0b01 	add.w	fp, fp, #1
 800dc1e:	e7b9      	b.n	800db94 <_printf_float+0x310>
 800dc20:	ee18 3a10 	vmov	r3, s16
 800dc24:	4652      	mov	r2, sl
 800dc26:	4631      	mov	r1, r6
 800dc28:	4628      	mov	r0, r5
 800dc2a:	47b8      	blx	r7
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	d1be      	bne.n	800dbae <_printf_float+0x32a>
 800dc30:	e689      	b.n	800d946 <_printf_float+0xc2>
 800dc32:	9a05      	ldr	r2, [sp, #20]
 800dc34:	464b      	mov	r3, r9
 800dc36:	4442      	add	r2, r8
 800dc38:	4631      	mov	r1, r6
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	47b8      	blx	r7
 800dc3e:	3001      	adds	r0, #1
 800dc40:	d1c1      	bne.n	800dbc6 <_printf_float+0x342>
 800dc42:	e680      	b.n	800d946 <_printf_float+0xc2>
 800dc44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc46:	2a01      	cmp	r2, #1
 800dc48:	dc01      	bgt.n	800dc4e <_printf_float+0x3ca>
 800dc4a:	07db      	lsls	r3, r3, #31
 800dc4c:	d538      	bpl.n	800dcc0 <_printf_float+0x43c>
 800dc4e:	2301      	movs	r3, #1
 800dc50:	4642      	mov	r2, r8
 800dc52:	4631      	mov	r1, r6
 800dc54:	4628      	mov	r0, r5
 800dc56:	47b8      	blx	r7
 800dc58:	3001      	adds	r0, #1
 800dc5a:	f43f ae74 	beq.w	800d946 <_printf_float+0xc2>
 800dc5e:	ee18 3a10 	vmov	r3, s16
 800dc62:	4652      	mov	r2, sl
 800dc64:	4631      	mov	r1, r6
 800dc66:	4628      	mov	r0, r5
 800dc68:	47b8      	blx	r7
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	f43f ae6b 	beq.w	800d946 <_printf_float+0xc2>
 800dc70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc74:	2200      	movs	r2, #0
 800dc76:	2300      	movs	r3, #0
 800dc78:	f7f2 ff26 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc7c:	b9d8      	cbnz	r0, 800dcb6 <_printf_float+0x432>
 800dc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc80:	f108 0201 	add.w	r2, r8, #1
 800dc84:	3b01      	subs	r3, #1
 800dc86:	4631      	mov	r1, r6
 800dc88:	4628      	mov	r0, r5
 800dc8a:	47b8      	blx	r7
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	d10e      	bne.n	800dcae <_printf_float+0x42a>
 800dc90:	e659      	b.n	800d946 <_printf_float+0xc2>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4652      	mov	r2, sl
 800dc96:	4631      	mov	r1, r6
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b8      	blx	r7
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	f43f ae52 	beq.w	800d946 <_printf_float+0xc2>
 800dca2:	f108 0801 	add.w	r8, r8, #1
 800dca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	4543      	cmp	r3, r8
 800dcac:	dcf1      	bgt.n	800dc92 <_printf_float+0x40e>
 800dcae:	464b      	mov	r3, r9
 800dcb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dcb4:	e6dc      	b.n	800da70 <_printf_float+0x1ec>
 800dcb6:	f04f 0800 	mov.w	r8, #0
 800dcba:	f104 0a1a 	add.w	sl, r4, #26
 800dcbe:	e7f2      	b.n	800dca6 <_printf_float+0x422>
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	4642      	mov	r2, r8
 800dcc4:	e7df      	b.n	800dc86 <_printf_float+0x402>
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	464a      	mov	r2, r9
 800dcca:	4631      	mov	r1, r6
 800dccc:	4628      	mov	r0, r5
 800dcce:	47b8      	blx	r7
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	f43f ae38 	beq.w	800d946 <_printf_float+0xc2>
 800dcd6:	f108 0801 	add.w	r8, r8, #1
 800dcda:	68e3      	ldr	r3, [r4, #12]
 800dcdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcde:	1a5b      	subs	r3, r3, r1
 800dce0:	4543      	cmp	r3, r8
 800dce2:	dcf0      	bgt.n	800dcc6 <_printf_float+0x442>
 800dce4:	e6fa      	b.n	800dadc <_printf_float+0x258>
 800dce6:	f04f 0800 	mov.w	r8, #0
 800dcea:	f104 0919 	add.w	r9, r4, #25
 800dcee:	e7f4      	b.n	800dcda <_printf_float+0x456>

0800dcf0 <_printf_common>:
 800dcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf4:	4616      	mov	r6, r2
 800dcf6:	4699      	mov	r9, r3
 800dcf8:	688a      	ldr	r2, [r1, #8]
 800dcfa:	690b      	ldr	r3, [r1, #16]
 800dcfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd00:	4293      	cmp	r3, r2
 800dd02:	bfb8      	it	lt
 800dd04:	4613      	movlt	r3, r2
 800dd06:	6033      	str	r3, [r6, #0]
 800dd08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd0c:	4607      	mov	r7, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	b10a      	cbz	r2, 800dd16 <_printf_common+0x26>
 800dd12:	3301      	adds	r3, #1
 800dd14:	6033      	str	r3, [r6, #0]
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	0699      	lsls	r1, r3, #26
 800dd1a:	bf42      	ittt	mi
 800dd1c:	6833      	ldrmi	r3, [r6, #0]
 800dd1e:	3302      	addmi	r3, #2
 800dd20:	6033      	strmi	r3, [r6, #0]
 800dd22:	6825      	ldr	r5, [r4, #0]
 800dd24:	f015 0506 	ands.w	r5, r5, #6
 800dd28:	d106      	bne.n	800dd38 <_printf_common+0x48>
 800dd2a:	f104 0a19 	add.w	sl, r4, #25
 800dd2e:	68e3      	ldr	r3, [r4, #12]
 800dd30:	6832      	ldr	r2, [r6, #0]
 800dd32:	1a9b      	subs	r3, r3, r2
 800dd34:	42ab      	cmp	r3, r5
 800dd36:	dc26      	bgt.n	800dd86 <_printf_common+0x96>
 800dd38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd3c:	1e13      	subs	r3, r2, #0
 800dd3e:	6822      	ldr	r2, [r4, #0]
 800dd40:	bf18      	it	ne
 800dd42:	2301      	movne	r3, #1
 800dd44:	0692      	lsls	r2, r2, #26
 800dd46:	d42b      	bmi.n	800dda0 <_printf_common+0xb0>
 800dd48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd4c:	4649      	mov	r1, r9
 800dd4e:	4638      	mov	r0, r7
 800dd50:	47c0      	blx	r8
 800dd52:	3001      	adds	r0, #1
 800dd54:	d01e      	beq.n	800dd94 <_printf_common+0xa4>
 800dd56:	6823      	ldr	r3, [r4, #0]
 800dd58:	68e5      	ldr	r5, [r4, #12]
 800dd5a:	6832      	ldr	r2, [r6, #0]
 800dd5c:	f003 0306 	and.w	r3, r3, #6
 800dd60:	2b04      	cmp	r3, #4
 800dd62:	bf08      	it	eq
 800dd64:	1aad      	subeq	r5, r5, r2
 800dd66:	68a3      	ldr	r3, [r4, #8]
 800dd68:	6922      	ldr	r2, [r4, #16]
 800dd6a:	bf0c      	ite	eq
 800dd6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd70:	2500      	movne	r5, #0
 800dd72:	4293      	cmp	r3, r2
 800dd74:	bfc4      	itt	gt
 800dd76:	1a9b      	subgt	r3, r3, r2
 800dd78:	18ed      	addgt	r5, r5, r3
 800dd7a:	2600      	movs	r6, #0
 800dd7c:	341a      	adds	r4, #26
 800dd7e:	42b5      	cmp	r5, r6
 800dd80:	d11a      	bne.n	800ddb8 <_printf_common+0xc8>
 800dd82:	2000      	movs	r0, #0
 800dd84:	e008      	b.n	800dd98 <_printf_common+0xa8>
 800dd86:	2301      	movs	r3, #1
 800dd88:	4652      	mov	r2, sl
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	47c0      	blx	r8
 800dd90:	3001      	adds	r0, #1
 800dd92:	d103      	bne.n	800dd9c <_printf_common+0xac>
 800dd94:	f04f 30ff 	mov.w	r0, #4294967295
 800dd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd9c:	3501      	adds	r5, #1
 800dd9e:	e7c6      	b.n	800dd2e <_printf_common+0x3e>
 800dda0:	18e1      	adds	r1, r4, r3
 800dda2:	1c5a      	adds	r2, r3, #1
 800dda4:	2030      	movs	r0, #48	; 0x30
 800dda6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddaa:	4422      	add	r2, r4
 800ddac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddb4:	3302      	adds	r3, #2
 800ddb6:	e7c7      	b.n	800dd48 <_printf_common+0x58>
 800ddb8:	2301      	movs	r3, #1
 800ddba:	4622      	mov	r2, r4
 800ddbc:	4649      	mov	r1, r9
 800ddbe:	4638      	mov	r0, r7
 800ddc0:	47c0      	blx	r8
 800ddc2:	3001      	adds	r0, #1
 800ddc4:	d0e6      	beq.n	800dd94 <_printf_common+0xa4>
 800ddc6:	3601      	adds	r6, #1
 800ddc8:	e7d9      	b.n	800dd7e <_printf_common+0x8e>
	...

0800ddcc <_printf_i>:
 800ddcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd0:	460c      	mov	r4, r1
 800ddd2:	4691      	mov	r9, r2
 800ddd4:	7e27      	ldrb	r7, [r4, #24]
 800ddd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ddd8:	2f78      	cmp	r7, #120	; 0x78
 800ddda:	4680      	mov	r8, r0
 800dddc:	469a      	mov	sl, r3
 800ddde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dde2:	d807      	bhi.n	800ddf4 <_printf_i+0x28>
 800dde4:	2f62      	cmp	r7, #98	; 0x62
 800dde6:	d80a      	bhi.n	800ddfe <_printf_i+0x32>
 800dde8:	2f00      	cmp	r7, #0
 800ddea:	f000 80d8 	beq.w	800df9e <_printf_i+0x1d2>
 800ddee:	2f58      	cmp	r7, #88	; 0x58
 800ddf0:	f000 80a3 	beq.w	800df3a <_printf_i+0x16e>
 800ddf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ddf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ddfc:	e03a      	b.n	800de74 <_printf_i+0xa8>
 800ddfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de02:	2b15      	cmp	r3, #21
 800de04:	d8f6      	bhi.n	800ddf4 <_printf_i+0x28>
 800de06:	a001      	add	r0, pc, #4	; (adr r0, 800de0c <_printf_i+0x40>)
 800de08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800de0c:	0800de65 	.word	0x0800de65
 800de10:	0800de79 	.word	0x0800de79
 800de14:	0800ddf5 	.word	0x0800ddf5
 800de18:	0800ddf5 	.word	0x0800ddf5
 800de1c:	0800ddf5 	.word	0x0800ddf5
 800de20:	0800ddf5 	.word	0x0800ddf5
 800de24:	0800de79 	.word	0x0800de79
 800de28:	0800ddf5 	.word	0x0800ddf5
 800de2c:	0800ddf5 	.word	0x0800ddf5
 800de30:	0800ddf5 	.word	0x0800ddf5
 800de34:	0800ddf5 	.word	0x0800ddf5
 800de38:	0800df85 	.word	0x0800df85
 800de3c:	0800dea9 	.word	0x0800dea9
 800de40:	0800df67 	.word	0x0800df67
 800de44:	0800ddf5 	.word	0x0800ddf5
 800de48:	0800ddf5 	.word	0x0800ddf5
 800de4c:	0800dfa7 	.word	0x0800dfa7
 800de50:	0800ddf5 	.word	0x0800ddf5
 800de54:	0800dea9 	.word	0x0800dea9
 800de58:	0800ddf5 	.word	0x0800ddf5
 800de5c:	0800ddf5 	.word	0x0800ddf5
 800de60:	0800df6f 	.word	0x0800df6f
 800de64:	680b      	ldr	r3, [r1, #0]
 800de66:	1d1a      	adds	r2, r3, #4
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	600a      	str	r2, [r1, #0]
 800de6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de74:	2301      	movs	r3, #1
 800de76:	e0a3      	b.n	800dfc0 <_printf_i+0x1f4>
 800de78:	6825      	ldr	r5, [r4, #0]
 800de7a:	6808      	ldr	r0, [r1, #0]
 800de7c:	062e      	lsls	r6, r5, #24
 800de7e:	f100 0304 	add.w	r3, r0, #4
 800de82:	d50a      	bpl.n	800de9a <_printf_i+0xce>
 800de84:	6805      	ldr	r5, [r0, #0]
 800de86:	600b      	str	r3, [r1, #0]
 800de88:	2d00      	cmp	r5, #0
 800de8a:	da03      	bge.n	800de94 <_printf_i+0xc8>
 800de8c:	232d      	movs	r3, #45	; 0x2d
 800de8e:	426d      	negs	r5, r5
 800de90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de94:	485e      	ldr	r0, [pc, #376]	; (800e010 <_printf_i+0x244>)
 800de96:	230a      	movs	r3, #10
 800de98:	e019      	b.n	800dece <_printf_i+0x102>
 800de9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800de9e:	6805      	ldr	r5, [r0, #0]
 800dea0:	600b      	str	r3, [r1, #0]
 800dea2:	bf18      	it	ne
 800dea4:	b22d      	sxthne	r5, r5
 800dea6:	e7ef      	b.n	800de88 <_printf_i+0xbc>
 800dea8:	680b      	ldr	r3, [r1, #0]
 800deaa:	6825      	ldr	r5, [r4, #0]
 800deac:	1d18      	adds	r0, r3, #4
 800deae:	6008      	str	r0, [r1, #0]
 800deb0:	0628      	lsls	r0, r5, #24
 800deb2:	d501      	bpl.n	800deb8 <_printf_i+0xec>
 800deb4:	681d      	ldr	r5, [r3, #0]
 800deb6:	e002      	b.n	800debe <_printf_i+0xf2>
 800deb8:	0669      	lsls	r1, r5, #25
 800deba:	d5fb      	bpl.n	800deb4 <_printf_i+0xe8>
 800debc:	881d      	ldrh	r5, [r3, #0]
 800debe:	4854      	ldr	r0, [pc, #336]	; (800e010 <_printf_i+0x244>)
 800dec0:	2f6f      	cmp	r7, #111	; 0x6f
 800dec2:	bf0c      	ite	eq
 800dec4:	2308      	moveq	r3, #8
 800dec6:	230a      	movne	r3, #10
 800dec8:	2100      	movs	r1, #0
 800deca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dece:	6866      	ldr	r6, [r4, #4]
 800ded0:	60a6      	str	r6, [r4, #8]
 800ded2:	2e00      	cmp	r6, #0
 800ded4:	bfa2      	ittt	ge
 800ded6:	6821      	ldrge	r1, [r4, #0]
 800ded8:	f021 0104 	bicge.w	r1, r1, #4
 800dedc:	6021      	strge	r1, [r4, #0]
 800dede:	b90d      	cbnz	r5, 800dee4 <_printf_i+0x118>
 800dee0:	2e00      	cmp	r6, #0
 800dee2:	d04d      	beq.n	800df80 <_printf_i+0x1b4>
 800dee4:	4616      	mov	r6, r2
 800dee6:	fbb5 f1f3 	udiv	r1, r5, r3
 800deea:	fb03 5711 	mls	r7, r3, r1, r5
 800deee:	5dc7      	ldrb	r7, [r0, r7]
 800def0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800def4:	462f      	mov	r7, r5
 800def6:	42bb      	cmp	r3, r7
 800def8:	460d      	mov	r5, r1
 800defa:	d9f4      	bls.n	800dee6 <_printf_i+0x11a>
 800defc:	2b08      	cmp	r3, #8
 800defe:	d10b      	bne.n	800df18 <_printf_i+0x14c>
 800df00:	6823      	ldr	r3, [r4, #0]
 800df02:	07df      	lsls	r7, r3, #31
 800df04:	d508      	bpl.n	800df18 <_printf_i+0x14c>
 800df06:	6923      	ldr	r3, [r4, #16]
 800df08:	6861      	ldr	r1, [r4, #4]
 800df0a:	4299      	cmp	r1, r3
 800df0c:	bfde      	ittt	le
 800df0e:	2330      	movle	r3, #48	; 0x30
 800df10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800df18:	1b92      	subs	r2, r2, r6
 800df1a:	6122      	str	r2, [r4, #16]
 800df1c:	f8cd a000 	str.w	sl, [sp]
 800df20:	464b      	mov	r3, r9
 800df22:	aa03      	add	r2, sp, #12
 800df24:	4621      	mov	r1, r4
 800df26:	4640      	mov	r0, r8
 800df28:	f7ff fee2 	bl	800dcf0 <_printf_common>
 800df2c:	3001      	adds	r0, #1
 800df2e:	d14c      	bne.n	800dfca <_printf_i+0x1fe>
 800df30:	f04f 30ff 	mov.w	r0, #4294967295
 800df34:	b004      	add	sp, #16
 800df36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df3a:	4835      	ldr	r0, [pc, #212]	; (800e010 <_printf_i+0x244>)
 800df3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df40:	6823      	ldr	r3, [r4, #0]
 800df42:	680e      	ldr	r6, [r1, #0]
 800df44:	061f      	lsls	r7, r3, #24
 800df46:	f856 5b04 	ldr.w	r5, [r6], #4
 800df4a:	600e      	str	r6, [r1, #0]
 800df4c:	d514      	bpl.n	800df78 <_printf_i+0x1ac>
 800df4e:	07d9      	lsls	r1, r3, #31
 800df50:	bf44      	itt	mi
 800df52:	f043 0320 	orrmi.w	r3, r3, #32
 800df56:	6023      	strmi	r3, [r4, #0]
 800df58:	b91d      	cbnz	r5, 800df62 <_printf_i+0x196>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	f023 0320 	bic.w	r3, r3, #32
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	2310      	movs	r3, #16
 800df64:	e7b0      	b.n	800dec8 <_printf_i+0xfc>
 800df66:	6823      	ldr	r3, [r4, #0]
 800df68:	f043 0320 	orr.w	r3, r3, #32
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	2378      	movs	r3, #120	; 0x78
 800df70:	4828      	ldr	r0, [pc, #160]	; (800e014 <_printf_i+0x248>)
 800df72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df76:	e7e3      	b.n	800df40 <_printf_i+0x174>
 800df78:	065e      	lsls	r6, r3, #25
 800df7a:	bf48      	it	mi
 800df7c:	b2ad      	uxthmi	r5, r5
 800df7e:	e7e6      	b.n	800df4e <_printf_i+0x182>
 800df80:	4616      	mov	r6, r2
 800df82:	e7bb      	b.n	800defc <_printf_i+0x130>
 800df84:	680b      	ldr	r3, [r1, #0]
 800df86:	6826      	ldr	r6, [r4, #0]
 800df88:	6960      	ldr	r0, [r4, #20]
 800df8a:	1d1d      	adds	r5, r3, #4
 800df8c:	600d      	str	r5, [r1, #0]
 800df8e:	0635      	lsls	r5, r6, #24
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	d501      	bpl.n	800df98 <_printf_i+0x1cc>
 800df94:	6018      	str	r0, [r3, #0]
 800df96:	e002      	b.n	800df9e <_printf_i+0x1d2>
 800df98:	0671      	lsls	r1, r6, #25
 800df9a:	d5fb      	bpl.n	800df94 <_printf_i+0x1c8>
 800df9c:	8018      	strh	r0, [r3, #0]
 800df9e:	2300      	movs	r3, #0
 800dfa0:	6123      	str	r3, [r4, #16]
 800dfa2:	4616      	mov	r6, r2
 800dfa4:	e7ba      	b.n	800df1c <_printf_i+0x150>
 800dfa6:	680b      	ldr	r3, [r1, #0]
 800dfa8:	1d1a      	adds	r2, r3, #4
 800dfaa:	600a      	str	r2, [r1, #0]
 800dfac:	681e      	ldr	r6, [r3, #0]
 800dfae:	6862      	ldr	r2, [r4, #4]
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f7f2 f914 	bl	80001e0 <memchr>
 800dfb8:	b108      	cbz	r0, 800dfbe <_printf_i+0x1f2>
 800dfba:	1b80      	subs	r0, r0, r6
 800dfbc:	6060      	str	r0, [r4, #4]
 800dfbe:	6863      	ldr	r3, [r4, #4]
 800dfc0:	6123      	str	r3, [r4, #16]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfc8:	e7a8      	b.n	800df1c <_printf_i+0x150>
 800dfca:	6923      	ldr	r3, [r4, #16]
 800dfcc:	4632      	mov	r2, r6
 800dfce:	4649      	mov	r1, r9
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	47d0      	blx	sl
 800dfd4:	3001      	adds	r0, #1
 800dfd6:	d0ab      	beq.n	800df30 <_printf_i+0x164>
 800dfd8:	6823      	ldr	r3, [r4, #0]
 800dfda:	079b      	lsls	r3, r3, #30
 800dfdc:	d413      	bmi.n	800e006 <_printf_i+0x23a>
 800dfde:	68e0      	ldr	r0, [r4, #12]
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	4298      	cmp	r0, r3
 800dfe4:	bfb8      	it	lt
 800dfe6:	4618      	movlt	r0, r3
 800dfe8:	e7a4      	b.n	800df34 <_printf_i+0x168>
 800dfea:	2301      	movs	r3, #1
 800dfec:	4632      	mov	r2, r6
 800dfee:	4649      	mov	r1, r9
 800dff0:	4640      	mov	r0, r8
 800dff2:	47d0      	blx	sl
 800dff4:	3001      	adds	r0, #1
 800dff6:	d09b      	beq.n	800df30 <_printf_i+0x164>
 800dff8:	3501      	adds	r5, #1
 800dffa:	68e3      	ldr	r3, [r4, #12]
 800dffc:	9903      	ldr	r1, [sp, #12]
 800dffe:	1a5b      	subs	r3, r3, r1
 800e000:	42ab      	cmp	r3, r5
 800e002:	dcf2      	bgt.n	800dfea <_printf_i+0x21e>
 800e004:	e7eb      	b.n	800dfde <_printf_i+0x212>
 800e006:	2500      	movs	r5, #0
 800e008:	f104 0619 	add.w	r6, r4, #25
 800e00c:	e7f5      	b.n	800dffa <_printf_i+0x22e>
 800e00e:	bf00      	nop
 800e010:	08010ed2 	.word	0x08010ed2
 800e014:	08010ee3 	.word	0x08010ee3

0800e018 <iprintf>:
 800e018:	b40f      	push	{r0, r1, r2, r3}
 800e01a:	4b0a      	ldr	r3, [pc, #40]	; (800e044 <iprintf+0x2c>)
 800e01c:	b513      	push	{r0, r1, r4, lr}
 800e01e:	681c      	ldr	r4, [r3, #0]
 800e020:	b124      	cbz	r4, 800e02c <iprintf+0x14>
 800e022:	69a3      	ldr	r3, [r4, #24]
 800e024:	b913      	cbnz	r3, 800e02c <iprintf+0x14>
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff fa56 	bl	800d4d8 <__sinit>
 800e02c:	ab05      	add	r3, sp, #20
 800e02e:	9a04      	ldr	r2, [sp, #16]
 800e030:	68a1      	ldr	r1, [r4, #8]
 800e032:	9301      	str	r3, [sp, #4]
 800e034:	4620      	mov	r0, r4
 800e036:	f002 f821 	bl	801007c <_vfiprintf_r>
 800e03a:	b002      	add	sp, #8
 800e03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e040:	b004      	add	sp, #16
 800e042:	4770      	bx	lr
 800e044:	200000e4 	.word	0x200000e4

0800e048 <_puts_r>:
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	460e      	mov	r6, r1
 800e04c:	4605      	mov	r5, r0
 800e04e:	b118      	cbz	r0, 800e058 <_puts_r+0x10>
 800e050:	6983      	ldr	r3, [r0, #24]
 800e052:	b90b      	cbnz	r3, 800e058 <_puts_r+0x10>
 800e054:	f7ff fa40 	bl	800d4d8 <__sinit>
 800e058:	69ab      	ldr	r3, [r5, #24]
 800e05a:	68ac      	ldr	r4, [r5, #8]
 800e05c:	b913      	cbnz	r3, 800e064 <_puts_r+0x1c>
 800e05e:	4628      	mov	r0, r5
 800e060:	f7ff fa3a 	bl	800d4d8 <__sinit>
 800e064:	4b2c      	ldr	r3, [pc, #176]	; (800e118 <_puts_r+0xd0>)
 800e066:	429c      	cmp	r4, r3
 800e068:	d120      	bne.n	800e0ac <_puts_r+0x64>
 800e06a:	686c      	ldr	r4, [r5, #4]
 800e06c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e06e:	07db      	lsls	r3, r3, #31
 800e070:	d405      	bmi.n	800e07e <_puts_r+0x36>
 800e072:	89a3      	ldrh	r3, [r4, #12]
 800e074:	0598      	lsls	r0, r3, #22
 800e076:	d402      	bmi.n	800e07e <_puts_r+0x36>
 800e078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e07a:	f7ff faf0 	bl	800d65e <__retarget_lock_acquire_recursive>
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	0719      	lsls	r1, r3, #28
 800e082:	d51d      	bpl.n	800e0c0 <_puts_r+0x78>
 800e084:	6923      	ldr	r3, [r4, #16]
 800e086:	b1db      	cbz	r3, 800e0c0 <_puts_r+0x78>
 800e088:	3e01      	subs	r6, #1
 800e08a:	68a3      	ldr	r3, [r4, #8]
 800e08c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e090:	3b01      	subs	r3, #1
 800e092:	60a3      	str	r3, [r4, #8]
 800e094:	bb39      	cbnz	r1, 800e0e6 <_puts_r+0x9e>
 800e096:	2b00      	cmp	r3, #0
 800e098:	da38      	bge.n	800e10c <_puts_r+0xc4>
 800e09a:	4622      	mov	r2, r4
 800e09c:	210a      	movs	r1, #10
 800e09e:	4628      	mov	r0, r5
 800e0a0:	f000 f9ac 	bl	800e3fc <__swbuf_r>
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	d011      	beq.n	800e0cc <_puts_r+0x84>
 800e0a8:	250a      	movs	r5, #10
 800e0aa:	e011      	b.n	800e0d0 <_puts_r+0x88>
 800e0ac:	4b1b      	ldr	r3, [pc, #108]	; (800e11c <_puts_r+0xd4>)
 800e0ae:	429c      	cmp	r4, r3
 800e0b0:	d101      	bne.n	800e0b6 <_puts_r+0x6e>
 800e0b2:	68ac      	ldr	r4, [r5, #8]
 800e0b4:	e7da      	b.n	800e06c <_puts_r+0x24>
 800e0b6:	4b1a      	ldr	r3, [pc, #104]	; (800e120 <_puts_r+0xd8>)
 800e0b8:	429c      	cmp	r4, r3
 800e0ba:	bf08      	it	eq
 800e0bc:	68ec      	ldreq	r4, [r5, #12]
 800e0be:	e7d5      	b.n	800e06c <_puts_r+0x24>
 800e0c0:	4621      	mov	r1, r4
 800e0c2:	4628      	mov	r0, r5
 800e0c4:	f000 f9fe 	bl	800e4c4 <__swsetup_r>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d0dd      	beq.n	800e088 <_puts_r+0x40>
 800e0cc:	f04f 35ff 	mov.w	r5, #4294967295
 800e0d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0d2:	07da      	lsls	r2, r3, #31
 800e0d4:	d405      	bmi.n	800e0e2 <_puts_r+0x9a>
 800e0d6:	89a3      	ldrh	r3, [r4, #12]
 800e0d8:	059b      	lsls	r3, r3, #22
 800e0da:	d402      	bmi.n	800e0e2 <_puts_r+0x9a>
 800e0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0de:	f7ff fabf 	bl	800d660 <__retarget_lock_release_recursive>
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	bd70      	pop	{r4, r5, r6, pc}
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	da04      	bge.n	800e0f4 <_puts_r+0xac>
 800e0ea:	69a2      	ldr	r2, [r4, #24]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	dc06      	bgt.n	800e0fe <_puts_r+0xb6>
 800e0f0:	290a      	cmp	r1, #10
 800e0f2:	d004      	beq.n	800e0fe <_puts_r+0xb6>
 800e0f4:	6823      	ldr	r3, [r4, #0]
 800e0f6:	1c5a      	adds	r2, r3, #1
 800e0f8:	6022      	str	r2, [r4, #0]
 800e0fa:	7019      	strb	r1, [r3, #0]
 800e0fc:	e7c5      	b.n	800e08a <_puts_r+0x42>
 800e0fe:	4622      	mov	r2, r4
 800e100:	4628      	mov	r0, r5
 800e102:	f000 f97b 	bl	800e3fc <__swbuf_r>
 800e106:	3001      	adds	r0, #1
 800e108:	d1bf      	bne.n	800e08a <_puts_r+0x42>
 800e10a:	e7df      	b.n	800e0cc <_puts_r+0x84>
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	250a      	movs	r5, #10
 800e110:	1c5a      	adds	r2, r3, #1
 800e112:	6022      	str	r2, [r4, #0]
 800e114:	701d      	strb	r5, [r3, #0]
 800e116:	e7db      	b.n	800e0d0 <_puts_r+0x88>
 800e118:	08010e7c 	.word	0x08010e7c
 800e11c:	08010e9c 	.word	0x08010e9c
 800e120:	08010e5c 	.word	0x08010e5c

0800e124 <puts>:
 800e124:	4b02      	ldr	r3, [pc, #8]	; (800e130 <puts+0xc>)
 800e126:	4601      	mov	r1, r0
 800e128:	6818      	ldr	r0, [r3, #0]
 800e12a:	f7ff bf8d 	b.w	800e048 <_puts_r>
 800e12e:	bf00      	nop
 800e130:	200000e4 	.word	0x200000e4

0800e134 <cleanup_glue>:
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	460c      	mov	r4, r1
 800e138:	6809      	ldr	r1, [r1, #0]
 800e13a:	4605      	mov	r5, r0
 800e13c:	b109      	cbz	r1, 800e142 <cleanup_glue+0xe>
 800e13e:	f7ff fff9 	bl	800e134 <cleanup_glue>
 800e142:	4621      	mov	r1, r4
 800e144:	4628      	mov	r0, r5
 800e146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e14a:	f001 bdc1 	b.w	800fcd0 <_free_r>
	...

0800e150 <_reclaim_reent>:
 800e150:	4b2c      	ldr	r3, [pc, #176]	; (800e204 <_reclaim_reent+0xb4>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4283      	cmp	r3, r0
 800e156:	b570      	push	{r4, r5, r6, lr}
 800e158:	4604      	mov	r4, r0
 800e15a:	d051      	beq.n	800e200 <_reclaim_reent+0xb0>
 800e15c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e15e:	b143      	cbz	r3, 800e172 <_reclaim_reent+0x22>
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d14a      	bne.n	800e1fc <_reclaim_reent+0xac>
 800e166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e168:	6819      	ldr	r1, [r3, #0]
 800e16a:	b111      	cbz	r1, 800e172 <_reclaim_reent+0x22>
 800e16c:	4620      	mov	r0, r4
 800e16e:	f001 fdaf 	bl	800fcd0 <_free_r>
 800e172:	6961      	ldr	r1, [r4, #20]
 800e174:	b111      	cbz	r1, 800e17c <_reclaim_reent+0x2c>
 800e176:	4620      	mov	r0, r4
 800e178:	f001 fdaa 	bl	800fcd0 <_free_r>
 800e17c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e17e:	b111      	cbz	r1, 800e186 <_reclaim_reent+0x36>
 800e180:	4620      	mov	r0, r4
 800e182:	f001 fda5 	bl	800fcd0 <_free_r>
 800e186:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e188:	b111      	cbz	r1, 800e190 <_reclaim_reent+0x40>
 800e18a:	4620      	mov	r0, r4
 800e18c:	f001 fda0 	bl	800fcd0 <_free_r>
 800e190:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e192:	b111      	cbz	r1, 800e19a <_reclaim_reent+0x4a>
 800e194:	4620      	mov	r0, r4
 800e196:	f001 fd9b 	bl	800fcd0 <_free_r>
 800e19a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e19c:	b111      	cbz	r1, 800e1a4 <_reclaim_reent+0x54>
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f001 fd96 	bl	800fcd0 <_free_r>
 800e1a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e1a6:	b111      	cbz	r1, 800e1ae <_reclaim_reent+0x5e>
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f001 fd91 	bl	800fcd0 <_free_r>
 800e1ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e1b0:	b111      	cbz	r1, 800e1b8 <_reclaim_reent+0x68>
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f001 fd8c 	bl	800fcd0 <_free_r>
 800e1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1ba:	b111      	cbz	r1, 800e1c2 <_reclaim_reent+0x72>
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f001 fd87 	bl	800fcd0 <_free_r>
 800e1c2:	69a3      	ldr	r3, [r4, #24]
 800e1c4:	b1e3      	cbz	r3, 800e200 <_reclaim_reent+0xb0>
 800e1c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	4798      	blx	r3
 800e1cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e1ce:	b1b9      	cbz	r1, 800e200 <_reclaim_reent+0xb0>
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1d6:	f7ff bfad 	b.w	800e134 <cleanup_glue>
 800e1da:	5949      	ldr	r1, [r1, r5]
 800e1dc:	b941      	cbnz	r1, 800e1f0 <_reclaim_reent+0xa0>
 800e1de:	3504      	adds	r5, #4
 800e1e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1e2:	2d80      	cmp	r5, #128	; 0x80
 800e1e4:	68d9      	ldr	r1, [r3, #12]
 800e1e6:	d1f8      	bne.n	800e1da <_reclaim_reent+0x8a>
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	f001 fd71 	bl	800fcd0 <_free_r>
 800e1ee:	e7ba      	b.n	800e166 <_reclaim_reent+0x16>
 800e1f0:	680e      	ldr	r6, [r1, #0]
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	f001 fd6c 	bl	800fcd0 <_free_r>
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	e7ef      	b.n	800e1dc <_reclaim_reent+0x8c>
 800e1fc:	2500      	movs	r5, #0
 800e1fe:	e7ef      	b.n	800e1e0 <_reclaim_reent+0x90>
 800e200:	bd70      	pop	{r4, r5, r6, pc}
 800e202:	bf00      	nop
 800e204:	200000e4 	.word	0x200000e4

0800e208 <_sbrk_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4d06      	ldr	r5, [pc, #24]	; (800e224 <_sbrk_r+0x1c>)
 800e20c:	2300      	movs	r3, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	4608      	mov	r0, r1
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	f7f5 fd8e 	bl	8003d34 <_sbrk>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d102      	bne.n	800e222 <_sbrk_r+0x1a>
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	b103      	cbz	r3, 800e222 <_sbrk_r+0x1a>
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	bd38      	pop	{r3, r4, r5, pc}
 800e224:	20003510 	.word	0x20003510

0800e228 <siprintf>:
 800e228:	b40e      	push	{r1, r2, r3}
 800e22a:	b500      	push	{lr}
 800e22c:	b09c      	sub	sp, #112	; 0x70
 800e22e:	ab1d      	add	r3, sp, #116	; 0x74
 800e230:	9002      	str	r0, [sp, #8]
 800e232:	9006      	str	r0, [sp, #24]
 800e234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e238:	4809      	ldr	r0, [pc, #36]	; (800e260 <siprintf+0x38>)
 800e23a:	9107      	str	r1, [sp, #28]
 800e23c:	9104      	str	r1, [sp, #16]
 800e23e:	4909      	ldr	r1, [pc, #36]	; (800e264 <siprintf+0x3c>)
 800e240:	f853 2b04 	ldr.w	r2, [r3], #4
 800e244:	9105      	str	r1, [sp, #20]
 800e246:	6800      	ldr	r0, [r0, #0]
 800e248:	9301      	str	r3, [sp, #4]
 800e24a:	a902      	add	r1, sp, #8
 800e24c:	f001 fdec 	bl	800fe28 <_svfiprintf_r>
 800e250:	9b02      	ldr	r3, [sp, #8]
 800e252:	2200      	movs	r2, #0
 800e254:	701a      	strb	r2, [r3, #0]
 800e256:	b01c      	add	sp, #112	; 0x70
 800e258:	f85d eb04 	ldr.w	lr, [sp], #4
 800e25c:	b003      	add	sp, #12
 800e25e:	4770      	bx	lr
 800e260:	200000e4 	.word	0x200000e4
 800e264:	ffff0208 	.word	0xffff0208

0800e268 <__sread>:
 800e268:	b510      	push	{r4, lr}
 800e26a:	460c      	mov	r4, r1
 800e26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e270:	f002 f834 	bl	80102dc <_read_r>
 800e274:	2800      	cmp	r0, #0
 800e276:	bfab      	itete	ge
 800e278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e27a:	89a3      	ldrhlt	r3, [r4, #12]
 800e27c:	181b      	addge	r3, r3, r0
 800e27e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e282:	bfac      	ite	ge
 800e284:	6563      	strge	r3, [r4, #84]	; 0x54
 800e286:	81a3      	strhlt	r3, [r4, #12]
 800e288:	bd10      	pop	{r4, pc}

0800e28a <__swrite>:
 800e28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28e:	461f      	mov	r7, r3
 800e290:	898b      	ldrh	r3, [r1, #12]
 800e292:	05db      	lsls	r3, r3, #23
 800e294:	4605      	mov	r5, r0
 800e296:	460c      	mov	r4, r1
 800e298:	4616      	mov	r6, r2
 800e29a:	d505      	bpl.n	800e2a8 <__swrite+0x1e>
 800e29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f001 f8fc 	bl	800f4a0 <_lseek_r>
 800e2a8:	89a3      	ldrh	r3, [r4, #12]
 800e2aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	4632      	mov	r2, r6
 800e2b6:	463b      	mov	r3, r7
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2be:	f000 b8ef 	b.w	800e4a0 <_write_r>

0800e2c2 <__sseek>:
 800e2c2:	b510      	push	{r4, lr}
 800e2c4:	460c      	mov	r4, r1
 800e2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ca:	f001 f8e9 	bl	800f4a0 <_lseek_r>
 800e2ce:	1c43      	adds	r3, r0, #1
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	bf15      	itete	ne
 800e2d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2de:	81a3      	strheq	r3, [r4, #12]
 800e2e0:	bf18      	it	ne
 800e2e2:	81a3      	strhne	r3, [r4, #12]
 800e2e4:	bd10      	pop	{r4, pc}

0800e2e6 <__sclose>:
 800e2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ea:	f000 b977 	b.w	800e5dc <_close_r>

0800e2ee <strncpy>:
 800e2ee:	b510      	push	{r4, lr}
 800e2f0:	3901      	subs	r1, #1
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	b132      	cbz	r2, 800e304 <strncpy+0x16>
 800e2f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e2fa:	f803 4b01 	strb.w	r4, [r3], #1
 800e2fe:	3a01      	subs	r2, #1
 800e300:	2c00      	cmp	r4, #0
 800e302:	d1f7      	bne.n	800e2f4 <strncpy+0x6>
 800e304:	441a      	add	r2, r3
 800e306:	2100      	movs	r1, #0
 800e308:	4293      	cmp	r3, r2
 800e30a:	d100      	bne.n	800e30e <strncpy+0x20>
 800e30c:	bd10      	pop	{r4, pc}
 800e30e:	f803 1b01 	strb.w	r1, [r3], #1
 800e312:	e7f9      	b.n	800e308 <strncpy+0x1a>

0800e314 <strstr>:
 800e314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e316:	780c      	ldrb	r4, [r1, #0]
 800e318:	b164      	cbz	r4, 800e334 <strstr+0x20>
 800e31a:	4603      	mov	r3, r0
 800e31c:	781a      	ldrb	r2, [r3, #0]
 800e31e:	4618      	mov	r0, r3
 800e320:	1c5e      	adds	r6, r3, #1
 800e322:	b90a      	cbnz	r2, 800e328 <strstr+0x14>
 800e324:	4610      	mov	r0, r2
 800e326:	e005      	b.n	800e334 <strstr+0x20>
 800e328:	4294      	cmp	r4, r2
 800e32a:	d108      	bne.n	800e33e <strstr+0x2a>
 800e32c:	460d      	mov	r5, r1
 800e32e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e332:	b902      	cbnz	r2, 800e336 <strstr+0x22>
 800e334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e336:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800e33a:	4297      	cmp	r7, r2
 800e33c:	d0f7      	beq.n	800e32e <strstr+0x1a>
 800e33e:	4633      	mov	r3, r6
 800e340:	e7ec      	b.n	800e31c <strstr+0x8>
	...

0800e344 <strtok>:
 800e344:	4b16      	ldr	r3, [pc, #88]	; (800e3a0 <strtok+0x5c>)
 800e346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e348:	681e      	ldr	r6, [r3, #0]
 800e34a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e34c:	4605      	mov	r5, r0
 800e34e:	b9fc      	cbnz	r4, 800e390 <strtok+0x4c>
 800e350:	2050      	movs	r0, #80	; 0x50
 800e352:	9101      	str	r1, [sp, #4]
 800e354:	f001 f91a 	bl	800f58c <malloc>
 800e358:	9901      	ldr	r1, [sp, #4]
 800e35a:	65b0      	str	r0, [r6, #88]	; 0x58
 800e35c:	4602      	mov	r2, r0
 800e35e:	b920      	cbnz	r0, 800e36a <strtok+0x26>
 800e360:	4b10      	ldr	r3, [pc, #64]	; (800e3a4 <strtok+0x60>)
 800e362:	4811      	ldr	r0, [pc, #68]	; (800e3a8 <strtok+0x64>)
 800e364:	2157      	movs	r1, #87	; 0x57
 800e366:	f000 f91b 	bl	800e5a0 <__assert_func>
 800e36a:	e9c0 4400 	strd	r4, r4, [r0]
 800e36e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e372:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e376:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e37a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e37e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e382:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e386:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e38a:	6184      	str	r4, [r0, #24]
 800e38c:	7704      	strb	r4, [r0, #28]
 800e38e:	6244      	str	r4, [r0, #36]	; 0x24
 800e390:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e392:	2301      	movs	r3, #1
 800e394:	4628      	mov	r0, r5
 800e396:	b002      	add	sp, #8
 800e398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e39c:	f000 b806 	b.w	800e3ac <__strtok_r>
 800e3a0:	200000e4 	.word	0x200000e4
 800e3a4:	08010ef4 	.word	0x08010ef4
 800e3a8:	08010f0b 	.word	0x08010f0b

0800e3ac <__strtok_r>:
 800e3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ae:	b908      	cbnz	r0, 800e3b4 <__strtok_r+0x8>
 800e3b0:	6810      	ldr	r0, [r2, #0]
 800e3b2:	b188      	cbz	r0, 800e3d8 <__strtok_r+0x2c>
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e3bc:	460f      	mov	r7, r1
 800e3be:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e3c2:	b91e      	cbnz	r6, 800e3cc <__strtok_r+0x20>
 800e3c4:	b965      	cbnz	r5, 800e3e0 <__strtok_r+0x34>
 800e3c6:	6015      	str	r5, [r2, #0]
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	e005      	b.n	800e3d8 <__strtok_r+0x2c>
 800e3cc:	42b5      	cmp	r5, r6
 800e3ce:	d1f6      	bne.n	800e3be <__strtok_r+0x12>
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1f0      	bne.n	800e3b6 <__strtok_r+0xa>
 800e3d4:	6014      	str	r4, [r2, #0]
 800e3d6:	7003      	strb	r3, [r0, #0]
 800e3d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3da:	461c      	mov	r4, r3
 800e3dc:	e00c      	b.n	800e3f8 <__strtok_r+0x4c>
 800e3de:	b915      	cbnz	r5, 800e3e6 <__strtok_r+0x3a>
 800e3e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e3e4:	460e      	mov	r6, r1
 800e3e6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e3ea:	42ab      	cmp	r3, r5
 800e3ec:	d1f7      	bne.n	800e3de <__strtok_r+0x32>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d0f3      	beq.n	800e3da <__strtok_r+0x2e>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e3f8:	6014      	str	r4, [r2, #0]
 800e3fa:	e7ed      	b.n	800e3d8 <__strtok_r+0x2c>

0800e3fc <__swbuf_r>:
 800e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fe:	460e      	mov	r6, r1
 800e400:	4614      	mov	r4, r2
 800e402:	4605      	mov	r5, r0
 800e404:	b118      	cbz	r0, 800e40e <__swbuf_r+0x12>
 800e406:	6983      	ldr	r3, [r0, #24]
 800e408:	b90b      	cbnz	r3, 800e40e <__swbuf_r+0x12>
 800e40a:	f7ff f865 	bl	800d4d8 <__sinit>
 800e40e:	4b21      	ldr	r3, [pc, #132]	; (800e494 <__swbuf_r+0x98>)
 800e410:	429c      	cmp	r4, r3
 800e412:	d12b      	bne.n	800e46c <__swbuf_r+0x70>
 800e414:	686c      	ldr	r4, [r5, #4]
 800e416:	69a3      	ldr	r3, [r4, #24]
 800e418:	60a3      	str	r3, [r4, #8]
 800e41a:	89a3      	ldrh	r3, [r4, #12]
 800e41c:	071a      	lsls	r2, r3, #28
 800e41e:	d52f      	bpl.n	800e480 <__swbuf_r+0x84>
 800e420:	6923      	ldr	r3, [r4, #16]
 800e422:	b36b      	cbz	r3, 800e480 <__swbuf_r+0x84>
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	6820      	ldr	r0, [r4, #0]
 800e428:	1ac0      	subs	r0, r0, r3
 800e42a:	6963      	ldr	r3, [r4, #20]
 800e42c:	b2f6      	uxtb	r6, r6
 800e42e:	4283      	cmp	r3, r0
 800e430:	4637      	mov	r7, r6
 800e432:	dc04      	bgt.n	800e43e <__swbuf_r+0x42>
 800e434:	4621      	mov	r1, r4
 800e436:	4628      	mov	r0, r5
 800e438:	f000 ffe0 	bl	800f3fc <_fflush_r>
 800e43c:	bb30      	cbnz	r0, 800e48c <__swbuf_r+0x90>
 800e43e:	68a3      	ldr	r3, [r4, #8]
 800e440:	3b01      	subs	r3, #1
 800e442:	60a3      	str	r3, [r4, #8]
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	1c5a      	adds	r2, r3, #1
 800e448:	6022      	str	r2, [r4, #0]
 800e44a:	701e      	strb	r6, [r3, #0]
 800e44c:	6963      	ldr	r3, [r4, #20]
 800e44e:	3001      	adds	r0, #1
 800e450:	4283      	cmp	r3, r0
 800e452:	d004      	beq.n	800e45e <__swbuf_r+0x62>
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	07db      	lsls	r3, r3, #31
 800e458:	d506      	bpl.n	800e468 <__swbuf_r+0x6c>
 800e45a:	2e0a      	cmp	r6, #10
 800e45c:	d104      	bne.n	800e468 <__swbuf_r+0x6c>
 800e45e:	4621      	mov	r1, r4
 800e460:	4628      	mov	r0, r5
 800e462:	f000 ffcb 	bl	800f3fc <_fflush_r>
 800e466:	b988      	cbnz	r0, 800e48c <__swbuf_r+0x90>
 800e468:	4638      	mov	r0, r7
 800e46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e46c:	4b0a      	ldr	r3, [pc, #40]	; (800e498 <__swbuf_r+0x9c>)
 800e46e:	429c      	cmp	r4, r3
 800e470:	d101      	bne.n	800e476 <__swbuf_r+0x7a>
 800e472:	68ac      	ldr	r4, [r5, #8]
 800e474:	e7cf      	b.n	800e416 <__swbuf_r+0x1a>
 800e476:	4b09      	ldr	r3, [pc, #36]	; (800e49c <__swbuf_r+0xa0>)
 800e478:	429c      	cmp	r4, r3
 800e47a:	bf08      	it	eq
 800e47c:	68ec      	ldreq	r4, [r5, #12]
 800e47e:	e7ca      	b.n	800e416 <__swbuf_r+0x1a>
 800e480:	4621      	mov	r1, r4
 800e482:	4628      	mov	r0, r5
 800e484:	f000 f81e 	bl	800e4c4 <__swsetup_r>
 800e488:	2800      	cmp	r0, #0
 800e48a:	d0cb      	beq.n	800e424 <__swbuf_r+0x28>
 800e48c:	f04f 37ff 	mov.w	r7, #4294967295
 800e490:	e7ea      	b.n	800e468 <__swbuf_r+0x6c>
 800e492:	bf00      	nop
 800e494:	08010e7c 	.word	0x08010e7c
 800e498:	08010e9c 	.word	0x08010e9c
 800e49c:	08010e5c 	.word	0x08010e5c

0800e4a0 <_write_r>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	4d07      	ldr	r5, [pc, #28]	; (800e4c0 <_write_r+0x20>)
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	4608      	mov	r0, r1
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	602a      	str	r2, [r5, #0]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f7f5 fbf0 	bl	8003c94 <_write>
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d102      	bne.n	800e4be <_write_r+0x1e>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	b103      	cbz	r3, 800e4be <_write_r+0x1e>
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	20003510 	.word	0x20003510

0800e4c4 <__swsetup_r>:
 800e4c4:	4b32      	ldr	r3, [pc, #200]	; (800e590 <__swsetup_r+0xcc>)
 800e4c6:	b570      	push	{r4, r5, r6, lr}
 800e4c8:	681d      	ldr	r5, [r3, #0]
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	b125      	cbz	r5, 800e4da <__swsetup_r+0x16>
 800e4d0:	69ab      	ldr	r3, [r5, #24]
 800e4d2:	b913      	cbnz	r3, 800e4da <__swsetup_r+0x16>
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f7fe ffff 	bl	800d4d8 <__sinit>
 800e4da:	4b2e      	ldr	r3, [pc, #184]	; (800e594 <__swsetup_r+0xd0>)
 800e4dc:	429c      	cmp	r4, r3
 800e4de:	d10f      	bne.n	800e500 <__swsetup_r+0x3c>
 800e4e0:	686c      	ldr	r4, [r5, #4]
 800e4e2:	89a3      	ldrh	r3, [r4, #12]
 800e4e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4e8:	0719      	lsls	r1, r3, #28
 800e4ea:	d42c      	bmi.n	800e546 <__swsetup_r+0x82>
 800e4ec:	06dd      	lsls	r5, r3, #27
 800e4ee:	d411      	bmi.n	800e514 <__swsetup_r+0x50>
 800e4f0:	2309      	movs	r3, #9
 800e4f2:	6033      	str	r3, [r6, #0]
 800e4f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4f8:	81a3      	strh	r3, [r4, #12]
 800e4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fe:	e03e      	b.n	800e57e <__swsetup_r+0xba>
 800e500:	4b25      	ldr	r3, [pc, #148]	; (800e598 <__swsetup_r+0xd4>)
 800e502:	429c      	cmp	r4, r3
 800e504:	d101      	bne.n	800e50a <__swsetup_r+0x46>
 800e506:	68ac      	ldr	r4, [r5, #8]
 800e508:	e7eb      	b.n	800e4e2 <__swsetup_r+0x1e>
 800e50a:	4b24      	ldr	r3, [pc, #144]	; (800e59c <__swsetup_r+0xd8>)
 800e50c:	429c      	cmp	r4, r3
 800e50e:	bf08      	it	eq
 800e510:	68ec      	ldreq	r4, [r5, #12]
 800e512:	e7e6      	b.n	800e4e2 <__swsetup_r+0x1e>
 800e514:	0758      	lsls	r0, r3, #29
 800e516:	d512      	bpl.n	800e53e <__swsetup_r+0x7a>
 800e518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e51a:	b141      	cbz	r1, 800e52e <__swsetup_r+0x6a>
 800e51c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e520:	4299      	cmp	r1, r3
 800e522:	d002      	beq.n	800e52a <__swsetup_r+0x66>
 800e524:	4630      	mov	r0, r6
 800e526:	f001 fbd3 	bl	800fcd0 <_free_r>
 800e52a:	2300      	movs	r3, #0
 800e52c:	6363      	str	r3, [r4, #52]	; 0x34
 800e52e:	89a3      	ldrh	r3, [r4, #12]
 800e530:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e534:	81a3      	strh	r3, [r4, #12]
 800e536:	2300      	movs	r3, #0
 800e538:	6063      	str	r3, [r4, #4]
 800e53a:	6923      	ldr	r3, [r4, #16]
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	89a3      	ldrh	r3, [r4, #12]
 800e540:	f043 0308 	orr.w	r3, r3, #8
 800e544:	81a3      	strh	r3, [r4, #12]
 800e546:	6923      	ldr	r3, [r4, #16]
 800e548:	b94b      	cbnz	r3, 800e55e <__swsetup_r+0x9a>
 800e54a:	89a3      	ldrh	r3, [r4, #12]
 800e54c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e554:	d003      	beq.n	800e55e <__swsetup_r+0x9a>
 800e556:	4621      	mov	r1, r4
 800e558:	4630      	mov	r0, r6
 800e55a:	f000 ffd7 	bl	800f50c <__smakebuf_r>
 800e55e:	89a0      	ldrh	r0, [r4, #12]
 800e560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e564:	f010 0301 	ands.w	r3, r0, #1
 800e568:	d00a      	beq.n	800e580 <__swsetup_r+0xbc>
 800e56a:	2300      	movs	r3, #0
 800e56c:	60a3      	str	r3, [r4, #8]
 800e56e:	6963      	ldr	r3, [r4, #20]
 800e570:	425b      	negs	r3, r3
 800e572:	61a3      	str	r3, [r4, #24]
 800e574:	6923      	ldr	r3, [r4, #16]
 800e576:	b943      	cbnz	r3, 800e58a <__swsetup_r+0xc6>
 800e578:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e57c:	d1ba      	bne.n	800e4f4 <__swsetup_r+0x30>
 800e57e:	bd70      	pop	{r4, r5, r6, pc}
 800e580:	0781      	lsls	r1, r0, #30
 800e582:	bf58      	it	pl
 800e584:	6963      	ldrpl	r3, [r4, #20]
 800e586:	60a3      	str	r3, [r4, #8]
 800e588:	e7f4      	b.n	800e574 <__swsetup_r+0xb0>
 800e58a:	2000      	movs	r0, #0
 800e58c:	e7f7      	b.n	800e57e <__swsetup_r+0xba>
 800e58e:	bf00      	nop
 800e590:	200000e4 	.word	0x200000e4
 800e594:	08010e7c 	.word	0x08010e7c
 800e598:	08010e9c 	.word	0x08010e9c
 800e59c:	08010e5c 	.word	0x08010e5c

0800e5a0 <__assert_func>:
 800e5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5a2:	4614      	mov	r4, r2
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <__assert_func+0x2c>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	68d8      	ldr	r0, [r3, #12]
 800e5ae:	b14c      	cbz	r4, 800e5c4 <__assert_func+0x24>
 800e5b0:	4b07      	ldr	r3, [pc, #28]	; (800e5d0 <__assert_func+0x30>)
 800e5b2:	9100      	str	r1, [sp, #0]
 800e5b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5b8:	4906      	ldr	r1, [pc, #24]	; (800e5d4 <__assert_func+0x34>)
 800e5ba:	462b      	mov	r3, r5
 800e5bc:	f000 ff5a 	bl	800f474 <fiprintf>
 800e5c0:	f001 fe9e 	bl	8010300 <abort>
 800e5c4:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <__assert_func+0x38>)
 800e5c6:	461c      	mov	r4, r3
 800e5c8:	e7f3      	b.n	800e5b2 <__assert_func+0x12>
 800e5ca:	bf00      	nop
 800e5cc:	200000e4 	.word	0x200000e4
 800e5d0:	08010f6c 	.word	0x08010f6c
 800e5d4:	08010f79 	.word	0x08010f79
 800e5d8:	08010fa7 	.word	0x08010fa7

0800e5dc <_close_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4d06      	ldr	r5, [pc, #24]	; (800e5f8 <_close_r+0x1c>)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	602b      	str	r3, [r5, #0]
 800e5e8:	f7f5 fb70 	bl	8003ccc <_close>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d102      	bne.n	800e5f6 <_close_r+0x1a>
 800e5f0:	682b      	ldr	r3, [r5, #0]
 800e5f2:	b103      	cbz	r3, 800e5f6 <_close_r+0x1a>
 800e5f4:	6023      	str	r3, [r4, #0]
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	20003510 	.word	0x20003510

0800e5fc <quorem>:
 800e5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e600:	6903      	ldr	r3, [r0, #16]
 800e602:	690c      	ldr	r4, [r1, #16]
 800e604:	42a3      	cmp	r3, r4
 800e606:	4607      	mov	r7, r0
 800e608:	f2c0 8081 	blt.w	800e70e <quorem+0x112>
 800e60c:	3c01      	subs	r4, #1
 800e60e:	f101 0814 	add.w	r8, r1, #20
 800e612:	f100 0514 	add.w	r5, r0, #20
 800e616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e61a:	9301      	str	r3, [sp, #4]
 800e61c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e624:	3301      	adds	r3, #1
 800e626:	429a      	cmp	r2, r3
 800e628:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e62c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e630:	fbb2 f6f3 	udiv	r6, r2, r3
 800e634:	d331      	bcc.n	800e69a <quorem+0x9e>
 800e636:	f04f 0e00 	mov.w	lr, #0
 800e63a:	4640      	mov	r0, r8
 800e63c:	46ac      	mov	ip, r5
 800e63e:	46f2      	mov	sl, lr
 800e640:	f850 2b04 	ldr.w	r2, [r0], #4
 800e644:	b293      	uxth	r3, r2
 800e646:	fb06 e303 	mla	r3, r6, r3, lr
 800e64a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e64e:	b29b      	uxth	r3, r3
 800e650:	ebaa 0303 	sub.w	r3, sl, r3
 800e654:	0c12      	lsrs	r2, r2, #16
 800e656:	f8dc a000 	ldr.w	sl, [ip]
 800e65a:	fb06 e202 	mla	r2, r6, r2, lr
 800e65e:	fa13 f38a 	uxtah	r3, r3, sl
 800e662:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e666:	fa1f fa82 	uxth.w	sl, r2
 800e66a:	f8dc 2000 	ldr.w	r2, [ip]
 800e66e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e672:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e676:	b29b      	uxth	r3, r3
 800e678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e67c:	4581      	cmp	r9, r0
 800e67e:	f84c 3b04 	str.w	r3, [ip], #4
 800e682:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e686:	d2db      	bcs.n	800e640 <quorem+0x44>
 800e688:	f855 300b 	ldr.w	r3, [r5, fp]
 800e68c:	b92b      	cbnz	r3, 800e69a <quorem+0x9e>
 800e68e:	9b01      	ldr	r3, [sp, #4]
 800e690:	3b04      	subs	r3, #4
 800e692:	429d      	cmp	r5, r3
 800e694:	461a      	mov	r2, r3
 800e696:	d32e      	bcc.n	800e6f6 <quorem+0xfa>
 800e698:	613c      	str	r4, [r7, #16]
 800e69a:	4638      	mov	r0, r7
 800e69c:	f001 fa08 	bl	800fab0 <__mcmp>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	db24      	blt.n	800e6ee <quorem+0xf2>
 800e6a4:	3601      	adds	r6, #1
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f04f 0c00 	mov.w	ip, #0
 800e6ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6b0:	f8d0 e000 	ldr.w	lr, [r0]
 800e6b4:	b293      	uxth	r3, r2
 800e6b6:	ebac 0303 	sub.w	r3, ip, r3
 800e6ba:	0c12      	lsrs	r2, r2, #16
 800e6bc:	fa13 f38e 	uxtah	r3, r3, lr
 800e6c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e6c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6ce:	45c1      	cmp	r9, r8
 800e6d0:	f840 3b04 	str.w	r3, [r0], #4
 800e6d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e6d8:	d2e8      	bcs.n	800e6ac <quorem+0xb0>
 800e6da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e6de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e6e2:	b922      	cbnz	r2, 800e6ee <quorem+0xf2>
 800e6e4:	3b04      	subs	r3, #4
 800e6e6:	429d      	cmp	r5, r3
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	d30a      	bcc.n	800e702 <quorem+0x106>
 800e6ec:	613c      	str	r4, [r7, #16]
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	b003      	add	sp, #12
 800e6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f6:	6812      	ldr	r2, [r2, #0]
 800e6f8:	3b04      	subs	r3, #4
 800e6fa:	2a00      	cmp	r2, #0
 800e6fc:	d1cc      	bne.n	800e698 <quorem+0x9c>
 800e6fe:	3c01      	subs	r4, #1
 800e700:	e7c7      	b.n	800e692 <quorem+0x96>
 800e702:	6812      	ldr	r2, [r2, #0]
 800e704:	3b04      	subs	r3, #4
 800e706:	2a00      	cmp	r2, #0
 800e708:	d1f0      	bne.n	800e6ec <quorem+0xf0>
 800e70a:	3c01      	subs	r4, #1
 800e70c:	e7eb      	b.n	800e6e6 <quorem+0xea>
 800e70e:	2000      	movs	r0, #0
 800e710:	e7ee      	b.n	800e6f0 <quorem+0xf4>
 800e712:	0000      	movs	r0, r0
 800e714:	0000      	movs	r0, r0
	...

0800e718 <_dtoa_r>:
 800e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e71c:	ed2d 8b02 	vpush	{d8}
 800e720:	ec57 6b10 	vmov	r6, r7, d0
 800e724:	b095      	sub	sp, #84	; 0x54
 800e726:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e728:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e72c:	9105      	str	r1, [sp, #20]
 800e72e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e732:	4604      	mov	r4, r0
 800e734:	9209      	str	r2, [sp, #36]	; 0x24
 800e736:	930f      	str	r3, [sp, #60]	; 0x3c
 800e738:	b975      	cbnz	r5, 800e758 <_dtoa_r+0x40>
 800e73a:	2010      	movs	r0, #16
 800e73c:	f000 ff26 	bl	800f58c <malloc>
 800e740:	4602      	mov	r2, r0
 800e742:	6260      	str	r0, [r4, #36]	; 0x24
 800e744:	b920      	cbnz	r0, 800e750 <_dtoa_r+0x38>
 800e746:	4bb2      	ldr	r3, [pc, #712]	; (800ea10 <_dtoa_r+0x2f8>)
 800e748:	21ea      	movs	r1, #234	; 0xea
 800e74a:	48b2      	ldr	r0, [pc, #712]	; (800ea14 <_dtoa_r+0x2fc>)
 800e74c:	f7ff ff28 	bl	800e5a0 <__assert_func>
 800e750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e754:	6005      	str	r5, [r0, #0]
 800e756:	60c5      	str	r5, [r0, #12]
 800e758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e75a:	6819      	ldr	r1, [r3, #0]
 800e75c:	b151      	cbz	r1, 800e774 <_dtoa_r+0x5c>
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	604a      	str	r2, [r1, #4]
 800e762:	2301      	movs	r3, #1
 800e764:	4093      	lsls	r3, r2
 800e766:	608b      	str	r3, [r1, #8]
 800e768:	4620      	mov	r0, r4
 800e76a:	f000 ff63 	bl	800f634 <_Bfree>
 800e76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e770:	2200      	movs	r2, #0
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	1e3b      	subs	r3, r7, #0
 800e776:	bfb9      	ittee	lt
 800e778:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e77c:	9303      	strlt	r3, [sp, #12]
 800e77e:	2300      	movge	r3, #0
 800e780:	f8c8 3000 	strge.w	r3, [r8]
 800e784:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e788:	4ba3      	ldr	r3, [pc, #652]	; (800ea18 <_dtoa_r+0x300>)
 800e78a:	bfbc      	itt	lt
 800e78c:	2201      	movlt	r2, #1
 800e78e:	f8c8 2000 	strlt.w	r2, [r8]
 800e792:	ea33 0309 	bics.w	r3, r3, r9
 800e796:	d11b      	bne.n	800e7d0 <_dtoa_r+0xb8>
 800e798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e79a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e79e:	6013      	str	r3, [r2, #0]
 800e7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7a4:	4333      	orrs	r3, r6
 800e7a6:	f000 857a 	beq.w	800f29e <_dtoa_r+0xb86>
 800e7aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7ac:	b963      	cbnz	r3, 800e7c8 <_dtoa_r+0xb0>
 800e7ae:	4b9b      	ldr	r3, [pc, #620]	; (800ea1c <_dtoa_r+0x304>)
 800e7b0:	e024      	b.n	800e7fc <_dtoa_r+0xe4>
 800e7b2:	4b9b      	ldr	r3, [pc, #620]	; (800ea20 <_dtoa_r+0x308>)
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	3308      	adds	r3, #8
 800e7b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7ba:	6013      	str	r3, [r2, #0]
 800e7bc:	9800      	ldr	r0, [sp, #0]
 800e7be:	b015      	add	sp, #84	; 0x54
 800e7c0:	ecbd 8b02 	vpop	{d8}
 800e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c8:	4b94      	ldr	r3, [pc, #592]	; (800ea1c <_dtoa_r+0x304>)
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	3303      	adds	r3, #3
 800e7ce:	e7f3      	b.n	800e7b8 <_dtoa_r+0xa0>
 800e7d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	ec51 0b17 	vmov	r0, r1, d7
 800e7da:	2300      	movs	r3, #0
 800e7dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e7e0:	f7f2 f972 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7e4:	4680      	mov	r8, r0
 800e7e6:	b158      	cbz	r0, 800e800 <_dtoa_r+0xe8>
 800e7e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	6013      	str	r3, [r2, #0]
 800e7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 8551 	beq.w	800f298 <_dtoa_r+0xb80>
 800e7f6:	488b      	ldr	r0, [pc, #556]	; (800ea24 <_dtoa_r+0x30c>)
 800e7f8:	6018      	str	r0, [r3, #0]
 800e7fa:	1e43      	subs	r3, r0, #1
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	e7dd      	b.n	800e7bc <_dtoa_r+0xa4>
 800e800:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e804:	aa12      	add	r2, sp, #72	; 0x48
 800e806:	a913      	add	r1, sp, #76	; 0x4c
 800e808:	4620      	mov	r0, r4
 800e80a:	f001 f9f5 	bl	800fbf8 <__d2b>
 800e80e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e812:	4683      	mov	fp, r0
 800e814:	2d00      	cmp	r5, #0
 800e816:	d07c      	beq.n	800e912 <_dtoa_r+0x1fa>
 800e818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e81a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e81e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e822:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e826:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e82a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e82e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e832:	4b7d      	ldr	r3, [pc, #500]	; (800ea28 <_dtoa_r+0x310>)
 800e834:	2200      	movs	r2, #0
 800e836:	4630      	mov	r0, r6
 800e838:	4639      	mov	r1, r7
 800e83a:	f7f1 fd25 	bl	8000288 <__aeabi_dsub>
 800e83e:	a36e      	add	r3, pc, #440	; (adr r3, 800e9f8 <_dtoa_r+0x2e0>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f7f1 fed8 	bl	80005f8 <__aeabi_dmul>
 800e848:	a36d      	add	r3, pc, #436	; (adr r3, 800ea00 <_dtoa_r+0x2e8>)
 800e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84e:	f7f1 fd1d 	bl	800028c <__adddf3>
 800e852:	4606      	mov	r6, r0
 800e854:	4628      	mov	r0, r5
 800e856:	460f      	mov	r7, r1
 800e858:	f7f1 fe64 	bl	8000524 <__aeabi_i2d>
 800e85c:	a36a      	add	r3, pc, #424	; (adr r3, 800ea08 <_dtoa_r+0x2f0>)
 800e85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e862:	f7f1 fec9 	bl	80005f8 <__aeabi_dmul>
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	4630      	mov	r0, r6
 800e86c:	4639      	mov	r1, r7
 800e86e:	f7f1 fd0d 	bl	800028c <__adddf3>
 800e872:	4606      	mov	r6, r0
 800e874:	460f      	mov	r7, r1
 800e876:	f7f2 f96f 	bl	8000b58 <__aeabi_d2iz>
 800e87a:	2200      	movs	r2, #0
 800e87c:	4682      	mov	sl, r0
 800e87e:	2300      	movs	r3, #0
 800e880:	4630      	mov	r0, r6
 800e882:	4639      	mov	r1, r7
 800e884:	f7f2 f92a 	bl	8000adc <__aeabi_dcmplt>
 800e888:	b148      	cbz	r0, 800e89e <_dtoa_r+0x186>
 800e88a:	4650      	mov	r0, sl
 800e88c:	f7f1 fe4a 	bl	8000524 <__aeabi_i2d>
 800e890:	4632      	mov	r2, r6
 800e892:	463b      	mov	r3, r7
 800e894:	f7f2 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 800e898:	b908      	cbnz	r0, 800e89e <_dtoa_r+0x186>
 800e89a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e89e:	f1ba 0f16 	cmp.w	sl, #22
 800e8a2:	d854      	bhi.n	800e94e <_dtoa_r+0x236>
 800e8a4:	4b61      	ldr	r3, [pc, #388]	; (800ea2c <_dtoa_r+0x314>)
 800e8a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e8b2:	f7f2 f913 	bl	8000adc <__aeabi_dcmplt>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d04b      	beq.n	800e952 <_dtoa_r+0x23a>
 800e8ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8be:	2300      	movs	r3, #0
 800e8c0:	930e      	str	r3, [sp, #56]	; 0x38
 800e8c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e8c4:	1b5d      	subs	r5, r3, r5
 800e8c6:	1e6b      	subs	r3, r5, #1
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	bf43      	ittte	mi
 800e8cc:	2300      	movmi	r3, #0
 800e8ce:	f1c5 0801 	rsbmi	r8, r5, #1
 800e8d2:	9304      	strmi	r3, [sp, #16]
 800e8d4:	f04f 0800 	movpl.w	r8, #0
 800e8d8:	f1ba 0f00 	cmp.w	sl, #0
 800e8dc:	db3b      	blt.n	800e956 <_dtoa_r+0x23e>
 800e8de:	9b04      	ldr	r3, [sp, #16]
 800e8e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e8e4:	4453      	add	r3, sl
 800e8e6:	9304      	str	r3, [sp, #16]
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	9306      	str	r3, [sp, #24]
 800e8ec:	9b05      	ldr	r3, [sp, #20]
 800e8ee:	2b09      	cmp	r3, #9
 800e8f0:	d869      	bhi.n	800e9c6 <_dtoa_r+0x2ae>
 800e8f2:	2b05      	cmp	r3, #5
 800e8f4:	bfc4      	itt	gt
 800e8f6:	3b04      	subgt	r3, #4
 800e8f8:	9305      	strgt	r3, [sp, #20]
 800e8fa:	9b05      	ldr	r3, [sp, #20]
 800e8fc:	f1a3 0302 	sub.w	r3, r3, #2
 800e900:	bfcc      	ite	gt
 800e902:	2500      	movgt	r5, #0
 800e904:	2501      	movle	r5, #1
 800e906:	2b03      	cmp	r3, #3
 800e908:	d869      	bhi.n	800e9de <_dtoa_r+0x2c6>
 800e90a:	e8df f003 	tbb	[pc, r3]
 800e90e:	4e2c      	.short	0x4e2c
 800e910:	5a4c      	.short	0x5a4c
 800e912:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e916:	441d      	add	r5, r3
 800e918:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e91c:	2b20      	cmp	r3, #32
 800e91e:	bfc1      	itttt	gt
 800e920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e924:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e928:	fa09 f303 	lslgt.w	r3, r9, r3
 800e92c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e930:	bfda      	itte	le
 800e932:	f1c3 0320 	rsble	r3, r3, #32
 800e936:	fa06 f003 	lslle.w	r0, r6, r3
 800e93a:	4318      	orrgt	r0, r3
 800e93c:	f7f1 fde2 	bl	8000504 <__aeabi_ui2d>
 800e940:	2301      	movs	r3, #1
 800e942:	4606      	mov	r6, r0
 800e944:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e948:	3d01      	subs	r5, #1
 800e94a:	9310      	str	r3, [sp, #64]	; 0x40
 800e94c:	e771      	b.n	800e832 <_dtoa_r+0x11a>
 800e94e:	2301      	movs	r3, #1
 800e950:	e7b6      	b.n	800e8c0 <_dtoa_r+0x1a8>
 800e952:	900e      	str	r0, [sp, #56]	; 0x38
 800e954:	e7b5      	b.n	800e8c2 <_dtoa_r+0x1aa>
 800e956:	f1ca 0300 	rsb	r3, sl, #0
 800e95a:	9306      	str	r3, [sp, #24]
 800e95c:	2300      	movs	r3, #0
 800e95e:	eba8 080a 	sub.w	r8, r8, sl
 800e962:	930d      	str	r3, [sp, #52]	; 0x34
 800e964:	e7c2      	b.n	800e8ec <_dtoa_r+0x1d4>
 800e966:	2300      	movs	r3, #0
 800e968:	9308      	str	r3, [sp, #32]
 800e96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	dc39      	bgt.n	800e9e4 <_dtoa_r+0x2cc>
 800e970:	f04f 0901 	mov.w	r9, #1
 800e974:	f8cd 9004 	str.w	r9, [sp, #4]
 800e978:	464b      	mov	r3, r9
 800e97a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800e97e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e980:	2200      	movs	r2, #0
 800e982:	6042      	str	r2, [r0, #4]
 800e984:	2204      	movs	r2, #4
 800e986:	f102 0614 	add.w	r6, r2, #20
 800e98a:	429e      	cmp	r6, r3
 800e98c:	6841      	ldr	r1, [r0, #4]
 800e98e:	d92f      	bls.n	800e9f0 <_dtoa_r+0x2d8>
 800e990:	4620      	mov	r0, r4
 800e992:	f000 fe0f 	bl	800f5b4 <_Balloc>
 800e996:	9000      	str	r0, [sp, #0]
 800e998:	2800      	cmp	r0, #0
 800e99a:	d14b      	bne.n	800ea34 <_dtoa_r+0x31c>
 800e99c:	4b24      	ldr	r3, [pc, #144]	; (800ea30 <_dtoa_r+0x318>)
 800e99e:	4602      	mov	r2, r0
 800e9a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e9a4:	e6d1      	b.n	800e74a <_dtoa_r+0x32>
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e7de      	b.n	800e968 <_dtoa_r+0x250>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	9308      	str	r3, [sp, #32]
 800e9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b0:	eb0a 0903 	add.w	r9, sl, r3
 800e9b4:	f109 0301 	add.w	r3, r9, #1
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	9301      	str	r3, [sp, #4]
 800e9bc:	bfb8      	it	lt
 800e9be:	2301      	movlt	r3, #1
 800e9c0:	e7dd      	b.n	800e97e <_dtoa_r+0x266>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e7f2      	b.n	800e9ac <_dtoa_r+0x294>
 800e9c6:	2501      	movs	r5, #1
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	9305      	str	r3, [sp, #20]
 800e9cc:	9508      	str	r5, [sp, #32]
 800e9ce:	f04f 39ff 	mov.w	r9, #4294967295
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9d8:	2312      	movs	r3, #18
 800e9da:	9209      	str	r2, [sp, #36]	; 0x24
 800e9dc:	e7cf      	b.n	800e97e <_dtoa_r+0x266>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	9308      	str	r3, [sp, #32]
 800e9e2:	e7f4      	b.n	800e9ce <_dtoa_r+0x2b6>
 800e9e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e9e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800e9ec:	464b      	mov	r3, r9
 800e9ee:	e7c6      	b.n	800e97e <_dtoa_r+0x266>
 800e9f0:	3101      	adds	r1, #1
 800e9f2:	6041      	str	r1, [r0, #4]
 800e9f4:	0052      	lsls	r2, r2, #1
 800e9f6:	e7c6      	b.n	800e986 <_dtoa_r+0x26e>
 800e9f8:	636f4361 	.word	0x636f4361
 800e9fc:	3fd287a7 	.word	0x3fd287a7
 800ea00:	8b60c8b3 	.word	0x8b60c8b3
 800ea04:	3fc68a28 	.word	0x3fc68a28
 800ea08:	509f79fb 	.word	0x509f79fb
 800ea0c:	3fd34413 	.word	0x3fd34413
 800ea10:	08010ef4 	.word	0x08010ef4
 800ea14:	08010fb5 	.word	0x08010fb5
 800ea18:	7ff00000 	.word	0x7ff00000
 800ea1c:	08010fb1 	.word	0x08010fb1
 800ea20:	08010fa8 	.word	0x08010fa8
 800ea24:	08010ed1 	.word	0x08010ed1
 800ea28:	3ff80000 	.word	0x3ff80000
 800ea2c:	080110b0 	.word	0x080110b0
 800ea30:	08011014 	.word	0x08011014
 800ea34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea36:	9a00      	ldr	r2, [sp, #0]
 800ea38:	601a      	str	r2, [r3, #0]
 800ea3a:	9b01      	ldr	r3, [sp, #4]
 800ea3c:	2b0e      	cmp	r3, #14
 800ea3e:	f200 80ad 	bhi.w	800eb9c <_dtoa_r+0x484>
 800ea42:	2d00      	cmp	r5, #0
 800ea44:	f000 80aa 	beq.w	800eb9c <_dtoa_r+0x484>
 800ea48:	f1ba 0f00 	cmp.w	sl, #0
 800ea4c:	dd36      	ble.n	800eabc <_dtoa_r+0x3a4>
 800ea4e:	4ac3      	ldr	r2, [pc, #780]	; (800ed5c <_dtoa_r+0x644>)
 800ea50:	f00a 030f 	and.w	r3, sl, #15
 800ea54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea58:	ed93 7b00 	vldr	d7, [r3]
 800ea5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ea60:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ea64:	eeb0 8a47 	vmov.f32	s16, s14
 800ea68:	eef0 8a67 	vmov.f32	s17, s15
 800ea6c:	d016      	beq.n	800ea9c <_dtoa_r+0x384>
 800ea6e:	4bbc      	ldr	r3, [pc, #752]	; (800ed60 <_dtoa_r+0x648>)
 800ea70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea78:	f7f1 fee8 	bl	800084c <__aeabi_ddiv>
 800ea7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea80:	f007 070f 	and.w	r7, r7, #15
 800ea84:	2503      	movs	r5, #3
 800ea86:	4eb6      	ldr	r6, [pc, #728]	; (800ed60 <_dtoa_r+0x648>)
 800ea88:	b957      	cbnz	r7, 800eaa0 <_dtoa_r+0x388>
 800ea8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea8e:	ec53 2b18 	vmov	r2, r3, d8
 800ea92:	f7f1 fedb 	bl	800084c <__aeabi_ddiv>
 800ea96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea9a:	e029      	b.n	800eaf0 <_dtoa_r+0x3d8>
 800ea9c:	2502      	movs	r5, #2
 800ea9e:	e7f2      	b.n	800ea86 <_dtoa_r+0x36e>
 800eaa0:	07f9      	lsls	r1, r7, #31
 800eaa2:	d508      	bpl.n	800eab6 <_dtoa_r+0x39e>
 800eaa4:	ec51 0b18 	vmov	r0, r1, d8
 800eaa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eaac:	f7f1 fda4 	bl	80005f8 <__aeabi_dmul>
 800eab0:	ec41 0b18 	vmov	d8, r0, r1
 800eab4:	3501      	adds	r5, #1
 800eab6:	107f      	asrs	r7, r7, #1
 800eab8:	3608      	adds	r6, #8
 800eaba:	e7e5      	b.n	800ea88 <_dtoa_r+0x370>
 800eabc:	f000 80a6 	beq.w	800ec0c <_dtoa_r+0x4f4>
 800eac0:	f1ca 0600 	rsb	r6, sl, #0
 800eac4:	4ba5      	ldr	r3, [pc, #660]	; (800ed5c <_dtoa_r+0x644>)
 800eac6:	4fa6      	ldr	r7, [pc, #664]	; (800ed60 <_dtoa_r+0x648>)
 800eac8:	f006 020f 	and.w	r2, r6, #15
 800eacc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ead0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ead8:	f7f1 fd8e 	bl	80005f8 <__aeabi_dmul>
 800eadc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eae0:	1136      	asrs	r6, r6, #4
 800eae2:	2300      	movs	r3, #0
 800eae4:	2502      	movs	r5, #2
 800eae6:	2e00      	cmp	r6, #0
 800eae8:	f040 8085 	bne.w	800ebf6 <_dtoa_r+0x4de>
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d1d2      	bne.n	800ea96 <_dtoa_r+0x37e>
 800eaf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 808c 	beq.w	800ec10 <_dtoa_r+0x4f8>
 800eaf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eafc:	4b99      	ldr	r3, [pc, #612]	; (800ed64 <_dtoa_r+0x64c>)
 800eafe:	2200      	movs	r2, #0
 800eb00:	4630      	mov	r0, r6
 800eb02:	4639      	mov	r1, r7
 800eb04:	f7f1 ffea 	bl	8000adc <__aeabi_dcmplt>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	f000 8081 	beq.w	800ec10 <_dtoa_r+0x4f8>
 800eb0e:	9b01      	ldr	r3, [sp, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d07d      	beq.n	800ec10 <_dtoa_r+0x4f8>
 800eb14:	f1b9 0f00 	cmp.w	r9, #0
 800eb18:	dd3c      	ble.n	800eb94 <_dtoa_r+0x47c>
 800eb1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eb1e:	9307      	str	r3, [sp, #28]
 800eb20:	2200      	movs	r2, #0
 800eb22:	4b91      	ldr	r3, [pc, #580]	; (800ed68 <_dtoa_r+0x650>)
 800eb24:	4630      	mov	r0, r6
 800eb26:	4639      	mov	r1, r7
 800eb28:	f7f1 fd66 	bl	80005f8 <__aeabi_dmul>
 800eb2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb30:	3501      	adds	r5, #1
 800eb32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800eb36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f7f1 fcf2 	bl	8000524 <__aeabi_i2d>
 800eb40:	4632      	mov	r2, r6
 800eb42:	463b      	mov	r3, r7
 800eb44:	f7f1 fd58 	bl	80005f8 <__aeabi_dmul>
 800eb48:	4b88      	ldr	r3, [pc, #544]	; (800ed6c <_dtoa_r+0x654>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f7f1 fb9e 	bl	800028c <__adddf3>
 800eb50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800eb54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb58:	9303      	str	r3, [sp, #12]
 800eb5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d15c      	bne.n	800ec1a <_dtoa_r+0x502>
 800eb60:	4b83      	ldr	r3, [pc, #524]	; (800ed70 <_dtoa_r+0x658>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	4630      	mov	r0, r6
 800eb66:	4639      	mov	r1, r7
 800eb68:	f7f1 fb8e 	bl	8000288 <__aeabi_dsub>
 800eb6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb70:	4606      	mov	r6, r0
 800eb72:	460f      	mov	r7, r1
 800eb74:	f7f1 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	f040 8296 	bne.w	800f0aa <_dtoa_r+0x992>
 800eb7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eb82:	4630      	mov	r0, r6
 800eb84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb88:	4639      	mov	r1, r7
 800eb8a:	f7f1 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	f040 8288 	bne.w	800f0a4 <_dtoa_r+0x98c>
 800eb94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eb98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f2c0 8158 	blt.w	800ee54 <_dtoa_r+0x73c>
 800eba4:	f1ba 0f0e 	cmp.w	sl, #14
 800eba8:	f300 8154 	bgt.w	800ee54 <_dtoa_r+0x73c>
 800ebac:	4b6b      	ldr	r3, [pc, #428]	; (800ed5c <_dtoa_r+0x644>)
 800ebae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ebb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f280 80e3 	bge.w	800ed84 <_dtoa_r+0x66c>
 800ebbe:	9b01      	ldr	r3, [sp, #4]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f300 80df 	bgt.w	800ed84 <_dtoa_r+0x66c>
 800ebc6:	f040 826d 	bne.w	800f0a4 <_dtoa_r+0x98c>
 800ebca:	4b69      	ldr	r3, [pc, #420]	; (800ed70 <_dtoa_r+0x658>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	4640      	mov	r0, r8
 800ebd0:	4649      	mov	r1, r9
 800ebd2:	f7f1 fd11 	bl	80005f8 <__aeabi_dmul>
 800ebd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ebda:	f7f1 ff93 	bl	8000b04 <__aeabi_dcmpge>
 800ebde:	9e01      	ldr	r6, [sp, #4]
 800ebe0:	4637      	mov	r7, r6
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	f040 8243 	bne.w	800f06e <_dtoa_r+0x956>
 800ebe8:	9d00      	ldr	r5, [sp, #0]
 800ebea:	2331      	movs	r3, #49	; 0x31
 800ebec:	f805 3b01 	strb.w	r3, [r5], #1
 800ebf0:	f10a 0a01 	add.w	sl, sl, #1
 800ebf4:	e23f      	b.n	800f076 <_dtoa_r+0x95e>
 800ebf6:	07f2      	lsls	r2, r6, #31
 800ebf8:	d505      	bpl.n	800ec06 <_dtoa_r+0x4ee>
 800ebfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebfe:	f7f1 fcfb 	bl	80005f8 <__aeabi_dmul>
 800ec02:	3501      	adds	r5, #1
 800ec04:	2301      	movs	r3, #1
 800ec06:	1076      	asrs	r6, r6, #1
 800ec08:	3708      	adds	r7, #8
 800ec0a:	e76c      	b.n	800eae6 <_dtoa_r+0x3ce>
 800ec0c:	2502      	movs	r5, #2
 800ec0e:	e76f      	b.n	800eaf0 <_dtoa_r+0x3d8>
 800ec10:	9b01      	ldr	r3, [sp, #4]
 800ec12:	f8cd a01c 	str.w	sl, [sp, #28]
 800ec16:	930c      	str	r3, [sp, #48]	; 0x30
 800ec18:	e78d      	b.n	800eb36 <_dtoa_r+0x41e>
 800ec1a:	9900      	ldr	r1, [sp, #0]
 800ec1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ec1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec20:	4b4e      	ldr	r3, [pc, #312]	; (800ed5c <_dtoa_r+0x644>)
 800ec22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec26:	4401      	add	r1, r0
 800ec28:	9102      	str	r1, [sp, #8]
 800ec2a:	9908      	ldr	r1, [sp, #32]
 800ec2c:	eeb0 8a47 	vmov.f32	s16, s14
 800ec30:	eef0 8a67 	vmov.f32	s17, s15
 800ec34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec3c:	2900      	cmp	r1, #0
 800ec3e:	d045      	beq.n	800eccc <_dtoa_r+0x5b4>
 800ec40:	494c      	ldr	r1, [pc, #304]	; (800ed74 <_dtoa_r+0x65c>)
 800ec42:	2000      	movs	r0, #0
 800ec44:	f7f1 fe02 	bl	800084c <__aeabi_ddiv>
 800ec48:	ec53 2b18 	vmov	r2, r3, d8
 800ec4c:	f7f1 fb1c 	bl	8000288 <__aeabi_dsub>
 800ec50:	9d00      	ldr	r5, [sp, #0]
 800ec52:	ec41 0b18 	vmov	d8, r0, r1
 800ec56:	4639      	mov	r1, r7
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f7f1 ff7d 	bl	8000b58 <__aeabi_d2iz>
 800ec5e:	900c      	str	r0, [sp, #48]	; 0x30
 800ec60:	f7f1 fc60 	bl	8000524 <__aeabi_i2d>
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	4630      	mov	r0, r6
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 fb0c 	bl	8000288 <__aeabi_dsub>
 800ec70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec72:	3330      	adds	r3, #48	; 0x30
 800ec74:	f805 3b01 	strb.w	r3, [r5], #1
 800ec78:	ec53 2b18 	vmov	r2, r3, d8
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	460f      	mov	r7, r1
 800ec80:	f7f1 ff2c 	bl	8000adc <__aeabi_dcmplt>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d165      	bne.n	800ed54 <_dtoa_r+0x63c>
 800ec88:	4632      	mov	r2, r6
 800ec8a:	463b      	mov	r3, r7
 800ec8c:	4935      	ldr	r1, [pc, #212]	; (800ed64 <_dtoa_r+0x64c>)
 800ec8e:	2000      	movs	r0, #0
 800ec90:	f7f1 fafa 	bl	8000288 <__aeabi_dsub>
 800ec94:	ec53 2b18 	vmov	r2, r3, d8
 800ec98:	f7f1 ff20 	bl	8000adc <__aeabi_dcmplt>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	f040 80b9 	bne.w	800ee14 <_dtoa_r+0x6fc>
 800eca2:	9b02      	ldr	r3, [sp, #8]
 800eca4:	429d      	cmp	r5, r3
 800eca6:	f43f af75 	beq.w	800eb94 <_dtoa_r+0x47c>
 800ecaa:	4b2f      	ldr	r3, [pc, #188]	; (800ed68 <_dtoa_r+0x650>)
 800ecac:	ec51 0b18 	vmov	r0, r1, d8
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f7f1 fca1 	bl	80005f8 <__aeabi_dmul>
 800ecb6:	4b2c      	ldr	r3, [pc, #176]	; (800ed68 <_dtoa_r+0x650>)
 800ecb8:	ec41 0b18 	vmov	d8, r0, r1
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	4639      	mov	r1, r7
 800ecc2:	f7f1 fc99 	bl	80005f8 <__aeabi_dmul>
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	460f      	mov	r7, r1
 800ecca:	e7c4      	b.n	800ec56 <_dtoa_r+0x53e>
 800eccc:	ec51 0b17 	vmov	r0, r1, d7
 800ecd0:	f7f1 fc92 	bl	80005f8 <__aeabi_dmul>
 800ecd4:	9b02      	ldr	r3, [sp, #8]
 800ecd6:	9d00      	ldr	r5, [sp, #0]
 800ecd8:	930c      	str	r3, [sp, #48]	; 0x30
 800ecda:	ec41 0b18 	vmov	d8, r0, r1
 800ecde:	4639      	mov	r1, r7
 800ece0:	4630      	mov	r0, r6
 800ece2:	f7f1 ff39 	bl	8000b58 <__aeabi_d2iz>
 800ece6:	9011      	str	r0, [sp, #68]	; 0x44
 800ece8:	f7f1 fc1c 	bl	8000524 <__aeabi_i2d>
 800ecec:	4602      	mov	r2, r0
 800ecee:	460b      	mov	r3, r1
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	4639      	mov	r1, r7
 800ecf4:	f7f1 fac8 	bl	8000288 <__aeabi_dsub>
 800ecf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecfa:	3330      	adds	r3, #48	; 0x30
 800ecfc:	f805 3b01 	strb.w	r3, [r5], #1
 800ed00:	9b02      	ldr	r3, [sp, #8]
 800ed02:	429d      	cmp	r5, r3
 800ed04:	4606      	mov	r6, r0
 800ed06:	460f      	mov	r7, r1
 800ed08:	f04f 0200 	mov.w	r2, #0
 800ed0c:	d134      	bne.n	800ed78 <_dtoa_r+0x660>
 800ed0e:	4b19      	ldr	r3, [pc, #100]	; (800ed74 <_dtoa_r+0x65c>)
 800ed10:	ec51 0b18 	vmov	r0, r1, d8
 800ed14:	f7f1 faba 	bl	800028c <__adddf3>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	4639      	mov	r1, r7
 800ed20:	f7f1 fefa 	bl	8000b18 <__aeabi_dcmpgt>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d175      	bne.n	800ee14 <_dtoa_r+0x6fc>
 800ed28:	ec53 2b18 	vmov	r2, r3, d8
 800ed2c:	4911      	ldr	r1, [pc, #68]	; (800ed74 <_dtoa_r+0x65c>)
 800ed2e:	2000      	movs	r0, #0
 800ed30:	f7f1 faaa 	bl	8000288 <__aeabi_dsub>
 800ed34:	4602      	mov	r2, r0
 800ed36:	460b      	mov	r3, r1
 800ed38:	4630      	mov	r0, r6
 800ed3a:	4639      	mov	r1, r7
 800ed3c:	f7f1 fece 	bl	8000adc <__aeabi_dcmplt>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	f43f af27 	beq.w	800eb94 <_dtoa_r+0x47c>
 800ed46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed48:	1e6b      	subs	r3, r5, #1
 800ed4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ed4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed50:	2b30      	cmp	r3, #48	; 0x30
 800ed52:	d0f8      	beq.n	800ed46 <_dtoa_r+0x62e>
 800ed54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ed58:	e04a      	b.n	800edf0 <_dtoa_r+0x6d8>
 800ed5a:	bf00      	nop
 800ed5c:	080110b0 	.word	0x080110b0
 800ed60:	08011088 	.word	0x08011088
 800ed64:	3ff00000 	.word	0x3ff00000
 800ed68:	40240000 	.word	0x40240000
 800ed6c:	401c0000 	.word	0x401c0000
 800ed70:	40140000 	.word	0x40140000
 800ed74:	3fe00000 	.word	0x3fe00000
 800ed78:	4baf      	ldr	r3, [pc, #700]	; (800f038 <_dtoa_r+0x920>)
 800ed7a:	f7f1 fc3d 	bl	80005f8 <__aeabi_dmul>
 800ed7e:	4606      	mov	r6, r0
 800ed80:	460f      	mov	r7, r1
 800ed82:	e7ac      	b.n	800ecde <_dtoa_r+0x5c6>
 800ed84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed88:	9d00      	ldr	r5, [sp, #0]
 800ed8a:	4642      	mov	r2, r8
 800ed8c:	464b      	mov	r3, r9
 800ed8e:	4630      	mov	r0, r6
 800ed90:	4639      	mov	r1, r7
 800ed92:	f7f1 fd5b 	bl	800084c <__aeabi_ddiv>
 800ed96:	f7f1 fedf 	bl	8000b58 <__aeabi_d2iz>
 800ed9a:	9002      	str	r0, [sp, #8]
 800ed9c:	f7f1 fbc2 	bl	8000524 <__aeabi_i2d>
 800eda0:	4642      	mov	r2, r8
 800eda2:	464b      	mov	r3, r9
 800eda4:	f7f1 fc28 	bl	80005f8 <__aeabi_dmul>
 800eda8:	4602      	mov	r2, r0
 800edaa:	460b      	mov	r3, r1
 800edac:	4630      	mov	r0, r6
 800edae:	4639      	mov	r1, r7
 800edb0:	f7f1 fa6a 	bl	8000288 <__aeabi_dsub>
 800edb4:	9e02      	ldr	r6, [sp, #8]
 800edb6:	9f01      	ldr	r7, [sp, #4]
 800edb8:	3630      	adds	r6, #48	; 0x30
 800edba:	f805 6b01 	strb.w	r6, [r5], #1
 800edbe:	9e00      	ldr	r6, [sp, #0]
 800edc0:	1bae      	subs	r6, r5, r6
 800edc2:	42b7      	cmp	r7, r6
 800edc4:	4602      	mov	r2, r0
 800edc6:	460b      	mov	r3, r1
 800edc8:	d137      	bne.n	800ee3a <_dtoa_r+0x722>
 800edca:	f7f1 fa5f 	bl	800028c <__adddf3>
 800edce:	4642      	mov	r2, r8
 800edd0:	464b      	mov	r3, r9
 800edd2:	4606      	mov	r6, r0
 800edd4:	460f      	mov	r7, r1
 800edd6:	f7f1 fe9f 	bl	8000b18 <__aeabi_dcmpgt>
 800edda:	b9c8      	cbnz	r0, 800ee10 <_dtoa_r+0x6f8>
 800eddc:	4642      	mov	r2, r8
 800edde:	464b      	mov	r3, r9
 800ede0:	4630      	mov	r0, r6
 800ede2:	4639      	mov	r1, r7
 800ede4:	f7f1 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 800ede8:	b110      	cbz	r0, 800edf0 <_dtoa_r+0x6d8>
 800edea:	9b02      	ldr	r3, [sp, #8]
 800edec:	07d9      	lsls	r1, r3, #31
 800edee:	d40f      	bmi.n	800ee10 <_dtoa_r+0x6f8>
 800edf0:	4620      	mov	r0, r4
 800edf2:	4659      	mov	r1, fp
 800edf4:	f000 fc1e 	bl	800f634 <_Bfree>
 800edf8:	2300      	movs	r3, #0
 800edfa:	702b      	strb	r3, [r5, #0]
 800edfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edfe:	f10a 0001 	add.w	r0, sl, #1
 800ee02:	6018      	str	r0, [r3, #0]
 800ee04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	f43f acd8 	beq.w	800e7bc <_dtoa_r+0xa4>
 800ee0c:	601d      	str	r5, [r3, #0]
 800ee0e:	e4d5      	b.n	800e7bc <_dtoa_r+0xa4>
 800ee10:	f8cd a01c 	str.w	sl, [sp, #28]
 800ee14:	462b      	mov	r3, r5
 800ee16:	461d      	mov	r5, r3
 800ee18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee1c:	2a39      	cmp	r2, #57	; 0x39
 800ee1e:	d108      	bne.n	800ee32 <_dtoa_r+0x71a>
 800ee20:	9a00      	ldr	r2, [sp, #0]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d1f7      	bne.n	800ee16 <_dtoa_r+0x6fe>
 800ee26:	9a07      	ldr	r2, [sp, #28]
 800ee28:	9900      	ldr	r1, [sp, #0]
 800ee2a:	3201      	adds	r2, #1
 800ee2c:	9207      	str	r2, [sp, #28]
 800ee2e:	2230      	movs	r2, #48	; 0x30
 800ee30:	700a      	strb	r2, [r1, #0]
 800ee32:	781a      	ldrb	r2, [r3, #0]
 800ee34:	3201      	adds	r2, #1
 800ee36:	701a      	strb	r2, [r3, #0]
 800ee38:	e78c      	b.n	800ed54 <_dtoa_r+0x63c>
 800ee3a:	4b7f      	ldr	r3, [pc, #508]	; (800f038 <_dtoa_r+0x920>)
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f7f1 fbdb 	bl	80005f8 <__aeabi_dmul>
 800ee42:	2200      	movs	r2, #0
 800ee44:	2300      	movs	r3, #0
 800ee46:	4606      	mov	r6, r0
 800ee48:	460f      	mov	r7, r1
 800ee4a:	f7f1 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee4e:	2800      	cmp	r0, #0
 800ee50:	d09b      	beq.n	800ed8a <_dtoa_r+0x672>
 800ee52:	e7cd      	b.n	800edf0 <_dtoa_r+0x6d8>
 800ee54:	9a08      	ldr	r2, [sp, #32]
 800ee56:	2a00      	cmp	r2, #0
 800ee58:	f000 80c4 	beq.w	800efe4 <_dtoa_r+0x8cc>
 800ee5c:	9a05      	ldr	r2, [sp, #20]
 800ee5e:	2a01      	cmp	r2, #1
 800ee60:	f300 80a8 	bgt.w	800efb4 <_dtoa_r+0x89c>
 800ee64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee66:	2a00      	cmp	r2, #0
 800ee68:	f000 80a0 	beq.w	800efac <_dtoa_r+0x894>
 800ee6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee70:	9e06      	ldr	r6, [sp, #24]
 800ee72:	4645      	mov	r5, r8
 800ee74:	9a04      	ldr	r2, [sp, #16]
 800ee76:	2101      	movs	r1, #1
 800ee78:	441a      	add	r2, r3
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	4498      	add	r8, r3
 800ee7e:	9204      	str	r2, [sp, #16]
 800ee80:	f000 fc94 	bl	800f7ac <__i2b>
 800ee84:	4607      	mov	r7, r0
 800ee86:	2d00      	cmp	r5, #0
 800ee88:	dd0b      	ble.n	800eea2 <_dtoa_r+0x78a>
 800ee8a:	9b04      	ldr	r3, [sp, #16]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	dd08      	ble.n	800eea2 <_dtoa_r+0x78a>
 800ee90:	42ab      	cmp	r3, r5
 800ee92:	9a04      	ldr	r2, [sp, #16]
 800ee94:	bfa8      	it	ge
 800ee96:	462b      	movge	r3, r5
 800ee98:	eba8 0803 	sub.w	r8, r8, r3
 800ee9c:	1aed      	subs	r5, r5, r3
 800ee9e:	1ad3      	subs	r3, r2, r3
 800eea0:	9304      	str	r3, [sp, #16]
 800eea2:	9b06      	ldr	r3, [sp, #24]
 800eea4:	b1fb      	cbz	r3, 800eee6 <_dtoa_r+0x7ce>
 800eea6:	9b08      	ldr	r3, [sp, #32]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f000 809f 	beq.w	800efec <_dtoa_r+0x8d4>
 800eeae:	2e00      	cmp	r6, #0
 800eeb0:	dd11      	ble.n	800eed6 <_dtoa_r+0x7be>
 800eeb2:	4639      	mov	r1, r7
 800eeb4:	4632      	mov	r2, r6
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f000 fd34 	bl	800f924 <__pow5mult>
 800eebc:	465a      	mov	r2, fp
 800eebe:	4601      	mov	r1, r0
 800eec0:	4607      	mov	r7, r0
 800eec2:	4620      	mov	r0, r4
 800eec4:	f000 fc88 	bl	800f7d8 <__multiply>
 800eec8:	4659      	mov	r1, fp
 800eeca:	9007      	str	r0, [sp, #28]
 800eecc:	4620      	mov	r0, r4
 800eece:	f000 fbb1 	bl	800f634 <_Bfree>
 800eed2:	9b07      	ldr	r3, [sp, #28]
 800eed4:	469b      	mov	fp, r3
 800eed6:	9b06      	ldr	r3, [sp, #24]
 800eed8:	1b9a      	subs	r2, r3, r6
 800eeda:	d004      	beq.n	800eee6 <_dtoa_r+0x7ce>
 800eedc:	4659      	mov	r1, fp
 800eede:	4620      	mov	r0, r4
 800eee0:	f000 fd20 	bl	800f924 <__pow5mult>
 800eee4:	4683      	mov	fp, r0
 800eee6:	2101      	movs	r1, #1
 800eee8:	4620      	mov	r0, r4
 800eeea:	f000 fc5f 	bl	800f7ac <__i2b>
 800eeee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	4606      	mov	r6, r0
 800eef4:	dd7c      	ble.n	800eff0 <_dtoa_r+0x8d8>
 800eef6:	461a      	mov	r2, r3
 800eef8:	4601      	mov	r1, r0
 800eefa:	4620      	mov	r0, r4
 800eefc:	f000 fd12 	bl	800f924 <__pow5mult>
 800ef00:	9b05      	ldr	r3, [sp, #20]
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	4606      	mov	r6, r0
 800ef06:	dd76      	ble.n	800eff6 <_dtoa_r+0x8de>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	9306      	str	r3, [sp, #24]
 800ef0c:	6933      	ldr	r3, [r6, #16]
 800ef0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef12:	6918      	ldr	r0, [r3, #16]
 800ef14:	f000 fbfa 	bl	800f70c <__hi0bits>
 800ef18:	f1c0 0020 	rsb	r0, r0, #32
 800ef1c:	9b04      	ldr	r3, [sp, #16]
 800ef1e:	4418      	add	r0, r3
 800ef20:	f010 001f 	ands.w	r0, r0, #31
 800ef24:	f000 8086 	beq.w	800f034 <_dtoa_r+0x91c>
 800ef28:	f1c0 0320 	rsb	r3, r0, #32
 800ef2c:	2b04      	cmp	r3, #4
 800ef2e:	dd7f      	ble.n	800f030 <_dtoa_r+0x918>
 800ef30:	f1c0 001c 	rsb	r0, r0, #28
 800ef34:	9b04      	ldr	r3, [sp, #16]
 800ef36:	4403      	add	r3, r0
 800ef38:	4480      	add	r8, r0
 800ef3a:	4405      	add	r5, r0
 800ef3c:	9304      	str	r3, [sp, #16]
 800ef3e:	f1b8 0f00 	cmp.w	r8, #0
 800ef42:	dd05      	ble.n	800ef50 <_dtoa_r+0x838>
 800ef44:	4659      	mov	r1, fp
 800ef46:	4642      	mov	r2, r8
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f000 fd45 	bl	800f9d8 <__lshift>
 800ef4e:	4683      	mov	fp, r0
 800ef50:	9b04      	ldr	r3, [sp, #16]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	dd05      	ble.n	800ef62 <_dtoa_r+0x84a>
 800ef56:	4631      	mov	r1, r6
 800ef58:	461a      	mov	r2, r3
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	f000 fd3c 	bl	800f9d8 <__lshift>
 800ef60:	4606      	mov	r6, r0
 800ef62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d069      	beq.n	800f03c <_dtoa_r+0x924>
 800ef68:	4631      	mov	r1, r6
 800ef6a:	4658      	mov	r0, fp
 800ef6c:	f000 fda0 	bl	800fab0 <__mcmp>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	da63      	bge.n	800f03c <_dtoa_r+0x924>
 800ef74:	2300      	movs	r3, #0
 800ef76:	4659      	mov	r1, fp
 800ef78:	220a      	movs	r2, #10
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f000 fb7c 	bl	800f678 <__multadd>
 800ef80:	9b08      	ldr	r3, [sp, #32]
 800ef82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef86:	4683      	mov	fp, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f000 818f 	beq.w	800f2ac <_dtoa_r+0xb94>
 800ef8e:	4639      	mov	r1, r7
 800ef90:	2300      	movs	r3, #0
 800ef92:	220a      	movs	r2, #10
 800ef94:	4620      	mov	r0, r4
 800ef96:	f000 fb6f 	bl	800f678 <__multadd>
 800ef9a:	f1b9 0f00 	cmp.w	r9, #0
 800ef9e:	4607      	mov	r7, r0
 800efa0:	f300 808e 	bgt.w	800f0c0 <_dtoa_r+0x9a8>
 800efa4:	9b05      	ldr	r3, [sp, #20]
 800efa6:	2b02      	cmp	r3, #2
 800efa8:	dc50      	bgt.n	800f04c <_dtoa_r+0x934>
 800efaa:	e089      	b.n	800f0c0 <_dtoa_r+0x9a8>
 800efac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800efae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efb2:	e75d      	b.n	800ee70 <_dtoa_r+0x758>
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	1e5e      	subs	r6, r3, #1
 800efb8:	9b06      	ldr	r3, [sp, #24]
 800efba:	42b3      	cmp	r3, r6
 800efbc:	bfbf      	itttt	lt
 800efbe:	9b06      	ldrlt	r3, [sp, #24]
 800efc0:	9606      	strlt	r6, [sp, #24]
 800efc2:	1af2      	sublt	r2, r6, r3
 800efc4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800efc6:	bfb6      	itet	lt
 800efc8:	189b      	addlt	r3, r3, r2
 800efca:	1b9e      	subge	r6, r3, r6
 800efcc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800efce:	9b01      	ldr	r3, [sp, #4]
 800efd0:	bfb8      	it	lt
 800efd2:	2600      	movlt	r6, #0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	bfb5      	itete	lt
 800efd8:	eba8 0503 	sublt.w	r5, r8, r3
 800efdc:	9b01      	ldrge	r3, [sp, #4]
 800efde:	2300      	movlt	r3, #0
 800efe0:	4645      	movge	r5, r8
 800efe2:	e747      	b.n	800ee74 <_dtoa_r+0x75c>
 800efe4:	9e06      	ldr	r6, [sp, #24]
 800efe6:	9f08      	ldr	r7, [sp, #32]
 800efe8:	4645      	mov	r5, r8
 800efea:	e74c      	b.n	800ee86 <_dtoa_r+0x76e>
 800efec:	9a06      	ldr	r2, [sp, #24]
 800efee:	e775      	b.n	800eedc <_dtoa_r+0x7c4>
 800eff0:	9b05      	ldr	r3, [sp, #20]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	dc18      	bgt.n	800f028 <_dtoa_r+0x910>
 800eff6:	9b02      	ldr	r3, [sp, #8]
 800eff8:	b9b3      	cbnz	r3, 800f028 <_dtoa_r+0x910>
 800effa:	9b03      	ldr	r3, [sp, #12]
 800effc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f000:	b9a3      	cbnz	r3, 800f02c <_dtoa_r+0x914>
 800f002:	9b03      	ldr	r3, [sp, #12]
 800f004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f008:	0d1b      	lsrs	r3, r3, #20
 800f00a:	051b      	lsls	r3, r3, #20
 800f00c:	b12b      	cbz	r3, 800f01a <_dtoa_r+0x902>
 800f00e:	9b04      	ldr	r3, [sp, #16]
 800f010:	3301      	adds	r3, #1
 800f012:	9304      	str	r3, [sp, #16]
 800f014:	f108 0801 	add.w	r8, r8, #1
 800f018:	2301      	movs	r3, #1
 800f01a:	9306      	str	r3, [sp, #24]
 800f01c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f47f af74 	bne.w	800ef0c <_dtoa_r+0x7f4>
 800f024:	2001      	movs	r0, #1
 800f026:	e779      	b.n	800ef1c <_dtoa_r+0x804>
 800f028:	2300      	movs	r3, #0
 800f02a:	e7f6      	b.n	800f01a <_dtoa_r+0x902>
 800f02c:	9b02      	ldr	r3, [sp, #8]
 800f02e:	e7f4      	b.n	800f01a <_dtoa_r+0x902>
 800f030:	d085      	beq.n	800ef3e <_dtoa_r+0x826>
 800f032:	4618      	mov	r0, r3
 800f034:	301c      	adds	r0, #28
 800f036:	e77d      	b.n	800ef34 <_dtoa_r+0x81c>
 800f038:	40240000 	.word	0x40240000
 800f03c:	9b01      	ldr	r3, [sp, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	dc38      	bgt.n	800f0b4 <_dtoa_r+0x99c>
 800f042:	9b05      	ldr	r3, [sp, #20]
 800f044:	2b02      	cmp	r3, #2
 800f046:	dd35      	ble.n	800f0b4 <_dtoa_r+0x99c>
 800f048:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f04c:	f1b9 0f00 	cmp.w	r9, #0
 800f050:	d10d      	bne.n	800f06e <_dtoa_r+0x956>
 800f052:	4631      	mov	r1, r6
 800f054:	464b      	mov	r3, r9
 800f056:	2205      	movs	r2, #5
 800f058:	4620      	mov	r0, r4
 800f05a:	f000 fb0d 	bl	800f678 <__multadd>
 800f05e:	4601      	mov	r1, r0
 800f060:	4606      	mov	r6, r0
 800f062:	4658      	mov	r0, fp
 800f064:	f000 fd24 	bl	800fab0 <__mcmp>
 800f068:	2800      	cmp	r0, #0
 800f06a:	f73f adbd 	bgt.w	800ebe8 <_dtoa_r+0x4d0>
 800f06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f070:	9d00      	ldr	r5, [sp, #0]
 800f072:	ea6f 0a03 	mvn.w	sl, r3
 800f076:	f04f 0800 	mov.w	r8, #0
 800f07a:	4631      	mov	r1, r6
 800f07c:	4620      	mov	r0, r4
 800f07e:	f000 fad9 	bl	800f634 <_Bfree>
 800f082:	2f00      	cmp	r7, #0
 800f084:	f43f aeb4 	beq.w	800edf0 <_dtoa_r+0x6d8>
 800f088:	f1b8 0f00 	cmp.w	r8, #0
 800f08c:	d005      	beq.n	800f09a <_dtoa_r+0x982>
 800f08e:	45b8      	cmp	r8, r7
 800f090:	d003      	beq.n	800f09a <_dtoa_r+0x982>
 800f092:	4641      	mov	r1, r8
 800f094:	4620      	mov	r0, r4
 800f096:	f000 facd 	bl	800f634 <_Bfree>
 800f09a:	4639      	mov	r1, r7
 800f09c:	4620      	mov	r0, r4
 800f09e:	f000 fac9 	bl	800f634 <_Bfree>
 800f0a2:	e6a5      	b.n	800edf0 <_dtoa_r+0x6d8>
 800f0a4:	2600      	movs	r6, #0
 800f0a6:	4637      	mov	r7, r6
 800f0a8:	e7e1      	b.n	800f06e <_dtoa_r+0x956>
 800f0aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f0ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f0b0:	4637      	mov	r7, r6
 800f0b2:	e599      	b.n	800ebe8 <_dtoa_r+0x4d0>
 800f0b4:	9b08      	ldr	r3, [sp, #32]
 800f0b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	f000 80fd 	beq.w	800f2ba <_dtoa_r+0xba2>
 800f0c0:	2d00      	cmp	r5, #0
 800f0c2:	dd05      	ble.n	800f0d0 <_dtoa_r+0x9b8>
 800f0c4:	4639      	mov	r1, r7
 800f0c6:	462a      	mov	r2, r5
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f000 fc85 	bl	800f9d8 <__lshift>
 800f0ce:	4607      	mov	r7, r0
 800f0d0:	9b06      	ldr	r3, [sp, #24]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d05c      	beq.n	800f190 <_dtoa_r+0xa78>
 800f0d6:	6879      	ldr	r1, [r7, #4]
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f000 fa6b 	bl	800f5b4 <_Balloc>
 800f0de:	4605      	mov	r5, r0
 800f0e0:	b928      	cbnz	r0, 800f0ee <_dtoa_r+0x9d6>
 800f0e2:	4b80      	ldr	r3, [pc, #512]	; (800f2e4 <_dtoa_r+0xbcc>)
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f0ea:	f7ff bb2e 	b.w	800e74a <_dtoa_r+0x32>
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	3202      	adds	r2, #2
 800f0f2:	0092      	lsls	r2, r2, #2
 800f0f4:	f107 010c 	add.w	r1, r7, #12
 800f0f8:	300c      	adds	r0, #12
 800f0fa:	f7fe fab2 	bl	800d662 <memcpy>
 800f0fe:	2201      	movs	r2, #1
 800f100:	4629      	mov	r1, r5
 800f102:	4620      	mov	r0, r4
 800f104:	f000 fc68 	bl	800f9d8 <__lshift>
 800f108:	9b00      	ldr	r3, [sp, #0]
 800f10a:	3301      	adds	r3, #1
 800f10c:	9301      	str	r3, [sp, #4]
 800f10e:	9b00      	ldr	r3, [sp, #0]
 800f110:	444b      	add	r3, r9
 800f112:	9307      	str	r3, [sp, #28]
 800f114:	9b02      	ldr	r3, [sp, #8]
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	46b8      	mov	r8, r7
 800f11c:	9306      	str	r3, [sp, #24]
 800f11e:	4607      	mov	r7, r0
 800f120:	9b01      	ldr	r3, [sp, #4]
 800f122:	4631      	mov	r1, r6
 800f124:	3b01      	subs	r3, #1
 800f126:	4658      	mov	r0, fp
 800f128:	9302      	str	r3, [sp, #8]
 800f12a:	f7ff fa67 	bl	800e5fc <quorem>
 800f12e:	4603      	mov	r3, r0
 800f130:	3330      	adds	r3, #48	; 0x30
 800f132:	9004      	str	r0, [sp, #16]
 800f134:	4641      	mov	r1, r8
 800f136:	4658      	mov	r0, fp
 800f138:	9308      	str	r3, [sp, #32]
 800f13a:	f000 fcb9 	bl	800fab0 <__mcmp>
 800f13e:	463a      	mov	r2, r7
 800f140:	4681      	mov	r9, r0
 800f142:	4631      	mov	r1, r6
 800f144:	4620      	mov	r0, r4
 800f146:	f000 fccf 	bl	800fae8 <__mdiff>
 800f14a:	68c2      	ldr	r2, [r0, #12]
 800f14c:	9b08      	ldr	r3, [sp, #32]
 800f14e:	4605      	mov	r5, r0
 800f150:	bb02      	cbnz	r2, 800f194 <_dtoa_r+0xa7c>
 800f152:	4601      	mov	r1, r0
 800f154:	4658      	mov	r0, fp
 800f156:	f000 fcab 	bl	800fab0 <__mcmp>
 800f15a:	9b08      	ldr	r3, [sp, #32]
 800f15c:	4602      	mov	r2, r0
 800f15e:	4629      	mov	r1, r5
 800f160:	4620      	mov	r0, r4
 800f162:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f166:	f000 fa65 	bl	800f634 <_Bfree>
 800f16a:	9b05      	ldr	r3, [sp, #20]
 800f16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f16e:	9d01      	ldr	r5, [sp, #4]
 800f170:	ea43 0102 	orr.w	r1, r3, r2
 800f174:	9b06      	ldr	r3, [sp, #24]
 800f176:	430b      	orrs	r3, r1
 800f178:	9b08      	ldr	r3, [sp, #32]
 800f17a:	d10d      	bne.n	800f198 <_dtoa_r+0xa80>
 800f17c:	2b39      	cmp	r3, #57	; 0x39
 800f17e:	d029      	beq.n	800f1d4 <_dtoa_r+0xabc>
 800f180:	f1b9 0f00 	cmp.w	r9, #0
 800f184:	dd01      	ble.n	800f18a <_dtoa_r+0xa72>
 800f186:	9b04      	ldr	r3, [sp, #16]
 800f188:	3331      	adds	r3, #49	; 0x31
 800f18a:	9a02      	ldr	r2, [sp, #8]
 800f18c:	7013      	strb	r3, [r2, #0]
 800f18e:	e774      	b.n	800f07a <_dtoa_r+0x962>
 800f190:	4638      	mov	r0, r7
 800f192:	e7b9      	b.n	800f108 <_dtoa_r+0x9f0>
 800f194:	2201      	movs	r2, #1
 800f196:	e7e2      	b.n	800f15e <_dtoa_r+0xa46>
 800f198:	f1b9 0f00 	cmp.w	r9, #0
 800f19c:	db06      	blt.n	800f1ac <_dtoa_r+0xa94>
 800f19e:	9905      	ldr	r1, [sp, #20]
 800f1a0:	ea41 0909 	orr.w	r9, r1, r9
 800f1a4:	9906      	ldr	r1, [sp, #24]
 800f1a6:	ea59 0101 	orrs.w	r1, r9, r1
 800f1aa:	d120      	bne.n	800f1ee <_dtoa_r+0xad6>
 800f1ac:	2a00      	cmp	r2, #0
 800f1ae:	ddec      	ble.n	800f18a <_dtoa_r+0xa72>
 800f1b0:	4659      	mov	r1, fp
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	9301      	str	r3, [sp, #4]
 800f1b8:	f000 fc0e 	bl	800f9d8 <__lshift>
 800f1bc:	4631      	mov	r1, r6
 800f1be:	4683      	mov	fp, r0
 800f1c0:	f000 fc76 	bl	800fab0 <__mcmp>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	dc02      	bgt.n	800f1d0 <_dtoa_r+0xab8>
 800f1ca:	d1de      	bne.n	800f18a <_dtoa_r+0xa72>
 800f1cc:	07da      	lsls	r2, r3, #31
 800f1ce:	d5dc      	bpl.n	800f18a <_dtoa_r+0xa72>
 800f1d0:	2b39      	cmp	r3, #57	; 0x39
 800f1d2:	d1d8      	bne.n	800f186 <_dtoa_r+0xa6e>
 800f1d4:	9a02      	ldr	r2, [sp, #8]
 800f1d6:	2339      	movs	r3, #57	; 0x39
 800f1d8:	7013      	strb	r3, [r2, #0]
 800f1da:	462b      	mov	r3, r5
 800f1dc:	461d      	mov	r5, r3
 800f1de:	3b01      	subs	r3, #1
 800f1e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f1e4:	2a39      	cmp	r2, #57	; 0x39
 800f1e6:	d050      	beq.n	800f28a <_dtoa_r+0xb72>
 800f1e8:	3201      	adds	r2, #1
 800f1ea:	701a      	strb	r2, [r3, #0]
 800f1ec:	e745      	b.n	800f07a <_dtoa_r+0x962>
 800f1ee:	2a00      	cmp	r2, #0
 800f1f0:	dd03      	ble.n	800f1fa <_dtoa_r+0xae2>
 800f1f2:	2b39      	cmp	r3, #57	; 0x39
 800f1f4:	d0ee      	beq.n	800f1d4 <_dtoa_r+0xabc>
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	e7c7      	b.n	800f18a <_dtoa_r+0xa72>
 800f1fa:	9a01      	ldr	r2, [sp, #4]
 800f1fc:	9907      	ldr	r1, [sp, #28]
 800f1fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f202:	428a      	cmp	r2, r1
 800f204:	d02a      	beq.n	800f25c <_dtoa_r+0xb44>
 800f206:	4659      	mov	r1, fp
 800f208:	2300      	movs	r3, #0
 800f20a:	220a      	movs	r2, #10
 800f20c:	4620      	mov	r0, r4
 800f20e:	f000 fa33 	bl	800f678 <__multadd>
 800f212:	45b8      	cmp	r8, r7
 800f214:	4683      	mov	fp, r0
 800f216:	f04f 0300 	mov.w	r3, #0
 800f21a:	f04f 020a 	mov.w	r2, #10
 800f21e:	4641      	mov	r1, r8
 800f220:	4620      	mov	r0, r4
 800f222:	d107      	bne.n	800f234 <_dtoa_r+0xb1c>
 800f224:	f000 fa28 	bl	800f678 <__multadd>
 800f228:	4680      	mov	r8, r0
 800f22a:	4607      	mov	r7, r0
 800f22c:	9b01      	ldr	r3, [sp, #4]
 800f22e:	3301      	adds	r3, #1
 800f230:	9301      	str	r3, [sp, #4]
 800f232:	e775      	b.n	800f120 <_dtoa_r+0xa08>
 800f234:	f000 fa20 	bl	800f678 <__multadd>
 800f238:	4639      	mov	r1, r7
 800f23a:	4680      	mov	r8, r0
 800f23c:	2300      	movs	r3, #0
 800f23e:	220a      	movs	r2, #10
 800f240:	4620      	mov	r0, r4
 800f242:	f000 fa19 	bl	800f678 <__multadd>
 800f246:	4607      	mov	r7, r0
 800f248:	e7f0      	b.n	800f22c <_dtoa_r+0xb14>
 800f24a:	f1b9 0f00 	cmp.w	r9, #0
 800f24e:	9a00      	ldr	r2, [sp, #0]
 800f250:	bfcc      	ite	gt
 800f252:	464d      	movgt	r5, r9
 800f254:	2501      	movle	r5, #1
 800f256:	4415      	add	r5, r2
 800f258:	f04f 0800 	mov.w	r8, #0
 800f25c:	4659      	mov	r1, fp
 800f25e:	2201      	movs	r2, #1
 800f260:	4620      	mov	r0, r4
 800f262:	9301      	str	r3, [sp, #4]
 800f264:	f000 fbb8 	bl	800f9d8 <__lshift>
 800f268:	4631      	mov	r1, r6
 800f26a:	4683      	mov	fp, r0
 800f26c:	f000 fc20 	bl	800fab0 <__mcmp>
 800f270:	2800      	cmp	r0, #0
 800f272:	dcb2      	bgt.n	800f1da <_dtoa_r+0xac2>
 800f274:	d102      	bne.n	800f27c <_dtoa_r+0xb64>
 800f276:	9b01      	ldr	r3, [sp, #4]
 800f278:	07db      	lsls	r3, r3, #31
 800f27a:	d4ae      	bmi.n	800f1da <_dtoa_r+0xac2>
 800f27c:	462b      	mov	r3, r5
 800f27e:	461d      	mov	r5, r3
 800f280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f284:	2a30      	cmp	r2, #48	; 0x30
 800f286:	d0fa      	beq.n	800f27e <_dtoa_r+0xb66>
 800f288:	e6f7      	b.n	800f07a <_dtoa_r+0x962>
 800f28a:	9a00      	ldr	r2, [sp, #0]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d1a5      	bne.n	800f1dc <_dtoa_r+0xac4>
 800f290:	f10a 0a01 	add.w	sl, sl, #1
 800f294:	2331      	movs	r3, #49	; 0x31
 800f296:	e779      	b.n	800f18c <_dtoa_r+0xa74>
 800f298:	4b13      	ldr	r3, [pc, #76]	; (800f2e8 <_dtoa_r+0xbd0>)
 800f29a:	f7ff baaf 	b.w	800e7fc <_dtoa_r+0xe4>
 800f29e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f47f aa86 	bne.w	800e7b2 <_dtoa_r+0x9a>
 800f2a6:	4b11      	ldr	r3, [pc, #68]	; (800f2ec <_dtoa_r+0xbd4>)
 800f2a8:	f7ff baa8 	b.w	800e7fc <_dtoa_r+0xe4>
 800f2ac:	f1b9 0f00 	cmp.w	r9, #0
 800f2b0:	dc03      	bgt.n	800f2ba <_dtoa_r+0xba2>
 800f2b2:	9b05      	ldr	r3, [sp, #20]
 800f2b4:	2b02      	cmp	r3, #2
 800f2b6:	f73f aec9 	bgt.w	800f04c <_dtoa_r+0x934>
 800f2ba:	9d00      	ldr	r5, [sp, #0]
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4658      	mov	r0, fp
 800f2c0:	f7ff f99c 	bl	800e5fc <quorem>
 800f2c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f2c8:	f805 3b01 	strb.w	r3, [r5], #1
 800f2cc:	9a00      	ldr	r2, [sp, #0]
 800f2ce:	1aaa      	subs	r2, r5, r2
 800f2d0:	4591      	cmp	r9, r2
 800f2d2:	ddba      	ble.n	800f24a <_dtoa_r+0xb32>
 800f2d4:	4659      	mov	r1, fp
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	220a      	movs	r2, #10
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f000 f9cc 	bl	800f678 <__multadd>
 800f2e0:	4683      	mov	fp, r0
 800f2e2:	e7eb      	b.n	800f2bc <_dtoa_r+0xba4>
 800f2e4:	08011014 	.word	0x08011014
 800f2e8:	08010ed0 	.word	0x08010ed0
 800f2ec:	08010fa8 	.word	0x08010fa8

0800f2f0 <__sflush_r>:
 800f2f0:	898a      	ldrh	r2, [r1, #12]
 800f2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f6:	4605      	mov	r5, r0
 800f2f8:	0710      	lsls	r0, r2, #28
 800f2fa:	460c      	mov	r4, r1
 800f2fc:	d458      	bmi.n	800f3b0 <__sflush_r+0xc0>
 800f2fe:	684b      	ldr	r3, [r1, #4]
 800f300:	2b00      	cmp	r3, #0
 800f302:	dc05      	bgt.n	800f310 <__sflush_r+0x20>
 800f304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f306:	2b00      	cmp	r3, #0
 800f308:	dc02      	bgt.n	800f310 <__sflush_r+0x20>
 800f30a:	2000      	movs	r0, #0
 800f30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f312:	2e00      	cmp	r6, #0
 800f314:	d0f9      	beq.n	800f30a <__sflush_r+0x1a>
 800f316:	2300      	movs	r3, #0
 800f318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f31c:	682f      	ldr	r7, [r5, #0]
 800f31e:	602b      	str	r3, [r5, #0]
 800f320:	d032      	beq.n	800f388 <__sflush_r+0x98>
 800f322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f324:	89a3      	ldrh	r3, [r4, #12]
 800f326:	075a      	lsls	r2, r3, #29
 800f328:	d505      	bpl.n	800f336 <__sflush_r+0x46>
 800f32a:	6863      	ldr	r3, [r4, #4]
 800f32c:	1ac0      	subs	r0, r0, r3
 800f32e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f330:	b10b      	cbz	r3, 800f336 <__sflush_r+0x46>
 800f332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f334:	1ac0      	subs	r0, r0, r3
 800f336:	2300      	movs	r3, #0
 800f338:	4602      	mov	r2, r0
 800f33a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f33c:	6a21      	ldr	r1, [r4, #32]
 800f33e:	4628      	mov	r0, r5
 800f340:	47b0      	blx	r6
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	d106      	bne.n	800f356 <__sflush_r+0x66>
 800f348:	6829      	ldr	r1, [r5, #0]
 800f34a:	291d      	cmp	r1, #29
 800f34c:	d82c      	bhi.n	800f3a8 <__sflush_r+0xb8>
 800f34e:	4a2a      	ldr	r2, [pc, #168]	; (800f3f8 <__sflush_r+0x108>)
 800f350:	40ca      	lsrs	r2, r1
 800f352:	07d6      	lsls	r6, r2, #31
 800f354:	d528      	bpl.n	800f3a8 <__sflush_r+0xb8>
 800f356:	2200      	movs	r2, #0
 800f358:	6062      	str	r2, [r4, #4]
 800f35a:	04d9      	lsls	r1, r3, #19
 800f35c:	6922      	ldr	r2, [r4, #16]
 800f35e:	6022      	str	r2, [r4, #0]
 800f360:	d504      	bpl.n	800f36c <__sflush_r+0x7c>
 800f362:	1c42      	adds	r2, r0, #1
 800f364:	d101      	bne.n	800f36a <__sflush_r+0x7a>
 800f366:	682b      	ldr	r3, [r5, #0]
 800f368:	b903      	cbnz	r3, 800f36c <__sflush_r+0x7c>
 800f36a:	6560      	str	r0, [r4, #84]	; 0x54
 800f36c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f36e:	602f      	str	r7, [r5, #0]
 800f370:	2900      	cmp	r1, #0
 800f372:	d0ca      	beq.n	800f30a <__sflush_r+0x1a>
 800f374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f378:	4299      	cmp	r1, r3
 800f37a:	d002      	beq.n	800f382 <__sflush_r+0x92>
 800f37c:	4628      	mov	r0, r5
 800f37e:	f000 fca7 	bl	800fcd0 <_free_r>
 800f382:	2000      	movs	r0, #0
 800f384:	6360      	str	r0, [r4, #52]	; 0x34
 800f386:	e7c1      	b.n	800f30c <__sflush_r+0x1c>
 800f388:	6a21      	ldr	r1, [r4, #32]
 800f38a:	2301      	movs	r3, #1
 800f38c:	4628      	mov	r0, r5
 800f38e:	47b0      	blx	r6
 800f390:	1c41      	adds	r1, r0, #1
 800f392:	d1c7      	bne.n	800f324 <__sflush_r+0x34>
 800f394:	682b      	ldr	r3, [r5, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d0c4      	beq.n	800f324 <__sflush_r+0x34>
 800f39a:	2b1d      	cmp	r3, #29
 800f39c:	d001      	beq.n	800f3a2 <__sflush_r+0xb2>
 800f39e:	2b16      	cmp	r3, #22
 800f3a0:	d101      	bne.n	800f3a6 <__sflush_r+0xb6>
 800f3a2:	602f      	str	r7, [r5, #0]
 800f3a4:	e7b1      	b.n	800f30a <__sflush_r+0x1a>
 800f3a6:	89a3      	ldrh	r3, [r4, #12]
 800f3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3ac:	81a3      	strh	r3, [r4, #12]
 800f3ae:	e7ad      	b.n	800f30c <__sflush_r+0x1c>
 800f3b0:	690f      	ldr	r7, [r1, #16]
 800f3b2:	2f00      	cmp	r7, #0
 800f3b4:	d0a9      	beq.n	800f30a <__sflush_r+0x1a>
 800f3b6:	0793      	lsls	r3, r2, #30
 800f3b8:	680e      	ldr	r6, [r1, #0]
 800f3ba:	bf08      	it	eq
 800f3bc:	694b      	ldreq	r3, [r1, #20]
 800f3be:	600f      	str	r7, [r1, #0]
 800f3c0:	bf18      	it	ne
 800f3c2:	2300      	movne	r3, #0
 800f3c4:	eba6 0807 	sub.w	r8, r6, r7
 800f3c8:	608b      	str	r3, [r1, #8]
 800f3ca:	f1b8 0f00 	cmp.w	r8, #0
 800f3ce:	dd9c      	ble.n	800f30a <__sflush_r+0x1a>
 800f3d0:	6a21      	ldr	r1, [r4, #32]
 800f3d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f3d4:	4643      	mov	r3, r8
 800f3d6:	463a      	mov	r2, r7
 800f3d8:	4628      	mov	r0, r5
 800f3da:	47b0      	blx	r6
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	dc06      	bgt.n	800f3ee <__sflush_r+0xfe>
 800f3e0:	89a3      	ldrh	r3, [r4, #12]
 800f3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3e6:	81a3      	strh	r3, [r4, #12]
 800f3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3ec:	e78e      	b.n	800f30c <__sflush_r+0x1c>
 800f3ee:	4407      	add	r7, r0
 800f3f0:	eba8 0800 	sub.w	r8, r8, r0
 800f3f4:	e7e9      	b.n	800f3ca <__sflush_r+0xda>
 800f3f6:	bf00      	nop
 800f3f8:	20400001 	.word	0x20400001

0800f3fc <_fflush_r>:
 800f3fc:	b538      	push	{r3, r4, r5, lr}
 800f3fe:	690b      	ldr	r3, [r1, #16]
 800f400:	4605      	mov	r5, r0
 800f402:	460c      	mov	r4, r1
 800f404:	b913      	cbnz	r3, 800f40c <_fflush_r+0x10>
 800f406:	2500      	movs	r5, #0
 800f408:	4628      	mov	r0, r5
 800f40a:	bd38      	pop	{r3, r4, r5, pc}
 800f40c:	b118      	cbz	r0, 800f416 <_fflush_r+0x1a>
 800f40e:	6983      	ldr	r3, [r0, #24]
 800f410:	b90b      	cbnz	r3, 800f416 <_fflush_r+0x1a>
 800f412:	f7fe f861 	bl	800d4d8 <__sinit>
 800f416:	4b14      	ldr	r3, [pc, #80]	; (800f468 <_fflush_r+0x6c>)
 800f418:	429c      	cmp	r4, r3
 800f41a:	d11b      	bne.n	800f454 <_fflush_r+0x58>
 800f41c:	686c      	ldr	r4, [r5, #4]
 800f41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d0ef      	beq.n	800f406 <_fflush_r+0xa>
 800f426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f428:	07d0      	lsls	r0, r2, #31
 800f42a:	d404      	bmi.n	800f436 <_fflush_r+0x3a>
 800f42c:	0599      	lsls	r1, r3, #22
 800f42e:	d402      	bmi.n	800f436 <_fflush_r+0x3a>
 800f430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f432:	f7fe f914 	bl	800d65e <__retarget_lock_acquire_recursive>
 800f436:	4628      	mov	r0, r5
 800f438:	4621      	mov	r1, r4
 800f43a:	f7ff ff59 	bl	800f2f0 <__sflush_r>
 800f43e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f440:	07da      	lsls	r2, r3, #31
 800f442:	4605      	mov	r5, r0
 800f444:	d4e0      	bmi.n	800f408 <_fflush_r+0xc>
 800f446:	89a3      	ldrh	r3, [r4, #12]
 800f448:	059b      	lsls	r3, r3, #22
 800f44a:	d4dd      	bmi.n	800f408 <_fflush_r+0xc>
 800f44c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f44e:	f7fe f907 	bl	800d660 <__retarget_lock_release_recursive>
 800f452:	e7d9      	b.n	800f408 <_fflush_r+0xc>
 800f454:	4b05      	ldr	r3, [pc, #20]	; (800f46c <_fflush_r+0x70>)
 800f456:	429c      	cmp	r4, r3
 800f458:	d101      	bne.n	800f45e <_fflush_r+0x62>
 800f45a:	68ac      	ldr	r4, [r5, #8]
 800f45c:	e7df      	b.n	800f41e <_fflush_r+0x22>
 800f45e:	4b04      	ldr	r3, [pc, #16]	; (800f470 <_fflush_r+0x74>)
 800f460:	429c      	cmp	r4, r3
 800f462:	bf08      	it	eq
 800f464:	68ec      	ldreq	r4, [r5, #12]
 800f466:	e7da      	b.n	800f41e <_fflush_r+0x22>
 800f468:	08010e7c 	.word	0x08010e7c
 800f46c:	08010e9c 	.word	0x08010e9c
 800f470:	08010e5c 	.word	0x08010e5c

0800f474 <fiprintf>:
 800f474:	b40e      	push	{r1, r2, r3}
 800f476:	b503      	push	{r0, r1, lr}
 800f478:	4601      	mov	r1, r0
 800f47a:	ab03      	add	r3, sp, #12
 800f47c:	4805      	ldr	r0, [pc, #20]	; (800f494 <fiprintf+0x20>)
 800f47e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f482:	6800      	ldr	r0, [r0, #0]
 800f484:	9301      	str	r3, [sp, #4]
 800f486:	f000 fdf9 	bl	801007c <_vfiprintf_r>
 800f48a:	b002      	add	sp, #8
 800f48c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f490:	b003      	add	sp, #12
 800f492:	4770      	bx	lr
 800f494:	200000e4 	.word	0x200000e4

0800f498 <_localeconv_r>:
 800f498:	4800      	ldr	r0, [pc, #0]	; (800f49c <_localeconv_r+0x4>)
 800f49a:	4770      	bx	lr
 800f49c:	20000238 	.word	0x20000238

0800f4a0 <_lseek_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	4d07      	ldr	r5, [pc, #28]	; (800f4c0 <_lseek_r+0x20>)
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	4608      	mov	r0, r1
 800f4a8:	4611      	mov	r1, r2
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	602a      	str	r2, [r5, #0]
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	f7f4 fc33 	bl	8003d1a <_lseek>
 800f4b4:	1c43      	adds	r3, r0, #1
 800f4b6:	d102      	bne.n	800f4be <_lseek_r+0x1e>
 800f4b8:	682b      	ldr	r3, [r5, #0]
 800f4ba:	b103      	cbz	r3, 800f4be <_lseek_r+0x1e>
 800f4bc:	6023      	str	r3, [r4, #0]
 800f4be:	bd38      	pop	{r3, r4, r5, pc}
 800f4c0:	20003510 	.word	0x20003510

0800f4c4 <__swhatbuf_r>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	460e      	mov	r6, r1
 800f4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4cc:	2900      	cmp	r1, #0
 800f4ce:	b096      	sub	sp, #88	; 0x58
 800f4d0:	4614      	mov	r4, r2
 800f4d2:	461d      	mov	r5, r3
 800f4d4:	da07      	bge.n	800f4e6 <__swhatbuf_r+0x22>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	89b3      	ldrh	r3, [r6, #12]
 800f4dc:	061a      	lsls	r2, r3, #24
 800f4de:	d410      	bmi.n	800f502 <__swhatbuf_r+0x3e>
 800f4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4e4:	e00e      	b.n	800f504 <__swhatbuf_r+0x40>
 800f4e6:	466a      	mov	r2, sp
 800f4e8:	f000 ff12 	bl	8010310 <_fstat_r>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	dbf2      	blt.n	800f4d6 <__swhatbuf_r+0x12>
 800f4f0:	9a01      	ldr	r2, [sp, #4]
 800f4f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4fa:	425a      	negs	r2, r3
 800f4fc:	415a      	adcs	r2, r3
 800f4fe:	602a      	str	r2, [r5, #0]
 800f500:	e7ee      	b.n	800f4e0 <__swhatbuf_r+0x1c>
 800f502:	2340      	movs	r3, #64	; 0x40
 800f504:	2000      	movs	r0, #0
 800f506:	6023      	str	r3, [r4, #0]
 800f508:	b016      	add	sp, #88	; 0x58
 800f50a:	bd70      	pop	{r4, r5, r6, pc}

0800f50c <__smakebuf_r>:
 800f50c:	898b      	ldrh	r3, [r1, #12]
 800f50e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f510:	079d      	lsls	r5, r3, #30
 800f512:	4606      	mov	r6, r0
 800f514:	460c      	mov	r4, r1
 800f516:	d507      	bpl.n	800f528 <__smakebuf_r+0x1c>
 800f518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f51c:	6023      	str	r3, [r4, #0]
 800f51e:	6123      	str	r3, [r4, #16]
 800f520:	2301      	movs	r3, #1
 800f522:	6163      	str	r3, [r4, #20]
 800f524:	b002      	add	sp, #8
 800f526:	bd70      	pop	{r4, r5, r6, pc}
 800f528:	ab01      	add	r3, sp, #4
 800f52a:	466a      	mov	r2, sp
 800f52c:	f7ff ffca 	bl	800f4c4 <__swhatbuf_r>
 800f530:	9900      	ldr	r1, [sp, #0]
 800f532:	4605      	mov	r5, r0
 800f534:	4630      	mov	r0, r6
 800f536:	f7fe f8ab 	bl	800d690 <_malloc_r>
 800f53a:	b948      	cbnz	r0, 800f550 <__smakebuf_r+0x44>
 800f53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f540:	059a      	lsls	r2, r3, #22
 800f542:	d4ef      	bmi.n	800f524 <__smakebuf_r+0x18>
 800f544:	f023 0303 	bic.w	r3, r3, #3
 800f548:	f043 0302 	orr.w	r3, r3, #2
 800f54c:	81a3      	strh	r3, [r4, #12]
 800f54e:	e7e3      	b.n	800f518 <__smakebuf_r+0xc>
 800f550:	4b0d      	ldr	r3, [pc, #52]	; (800f588 <__smakebuf_r+0x7c>)
 800f552:	62b3      	str	r3, [r6, #40]	; 0x28
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	6020      	str	r0, [r4, #0]
 800f558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f55c:	81a3      	strh	r3, [r4, #12]
 800f55e:	9b00      	ldr	r3, [sp, #0]
 800f560:	6163      	str	r3, [r4, #20]
 800f562:	9b01      	ldr	r3, [sp, #4]
 800f564:	6120      	str	r0, [r4, #16]
 800f566:	b15b      	cbz	r3, 800f580 <__smakebuf_r+0x74>
 800f568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f56c:	4630      	mov	r0, r6
 800f56e:	f000 fee1 	bl	8010334 <_isatty_r>
 800f572:	b128      	cbz	r0, 800f580 <__smakebuf_r+0x74>
 800f574:	89a3      	ldrh	r3, [r4, #12]
 800f576:	f023 0303 	bic.w	r3, r3, #3
 800f57a:	f043 0301 	orr.w	r3, r3, #1
 800f57e:	81a3      	strh	r3, [r4, #12]
 800f580:	89a0      	ldrh	r0, [r4, #12]
 800f582:	4305      	orrs	r5, r0
 800f584:	81a5      	strh	r5, [r4, #12]
 800f586:	e7cd      	b.n	800f524 <__smakebuf_r+0x18>
 800f588:	0800d471 	.word	0x0800d471

0800f58c <malloc>:
 800f58c:	4b02      	ldr	r3, [pc, #8]	; (800f598 <malloc+0xc>)
 800f58e:	4601      	mov	r1, r0
 800f590:	6818      	ldr	r0, [r3, #0]
 800f592:	f7fe b87d 	b.w	800d690 <_malloc_r>
 800f596:	bf00      	nop
 800f598:	200000e4 	.word	0x200000e4

0800f59c <__malloc_lock>:
 800f59c:	4801      	ldr	r0, [pc, #4]	; (800f5a4 <__malloc_lock+0x8>)
 800f59e:	f7fe b85e 	b.w	800d65e <__retarget_lock_acquire_recursive>
 800f5a2:	bf00      	nop
 800f5a4:	20003508 	.word	0x20003508

0800f5a8 <__malloc_unlock>:
 800f5a8:	4801      	ldr	r0, [pc, #4]	; (800f5b0 <__malloc_unlock+0x8>)
 800f5aa:	f7fe b859 	b.w	800d660 <__retarget_lock_release_recursive>
 800f5ae:	bf00      	nop
 800f5b0:	20003508 	.word	0x20003508

0800f5b4 <_Balloc>:
 800f5b4:	b570      	push	{r4, r5, r6, lr}
 800f5b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f5b8:	4604      	mov	r4, r0
 800f5ba:	460d      	mov	r5, r1
 800f5bc:	b976      	cbnz	r6, 800f5dc <_Balloc+0x28>
 800f5be:	2010      	movs	r0, #16
 800f5c0:	f7ff ffe4 	bl	800f58c <malloc>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	6260      	str	r0, [r4, #36]	; 0x24
 800f5c8:	b920      	cbnz	r0, 800f5d4 <_Balloc+0x20>
 800f5ca:	4b18      	ldr	r3, [pc, #96]	; (800f62c <_Balloc+0x78>)
 800f5cc:	4818      	ldr	r0, [pc, #96]	; (800f630 <_Balloc+0x7c>)
 800f5ce:	2166      	movs	r1, #102	; 0x66
 800f5d0:	f7fe ffe6 	bl	800e5a0 <__assert_func>
 800f5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5d8:	6006      	str	r6, [r0, #0]
 800f5da:	60c6      	str	r6, [r0, #12]
 800f5dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f5de:	68f3      	ldr	r3, [r6, #12]
 800f5e0:	b183      	cbz	r3, 800f604 <_Balloc+0x50>
 800f5e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f5ea:	b9b8      	cbnz	r0, 800f61c <_Balloc+0x68>
 800f5ec:	2101      	movs	r1, #1
 800f5ee:	fa01 f605 	lsl.w	r6, r1, r5
 800f5f2:	1d72      	adds	r2, r6, #5
 800f5f4:	0092      	lsls	r2, r2, #2
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f000 fb5a 	bl	800fcb0 <_calloc_r>
 800f5fc:	b160      	cbz	r0, 800f618 <_Balloc+0x64>
 800f5fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f602:	e00e      	b.n	800f622 <_Balloc+0x6e>
 800f604:	2221      	movs	r2, #33	; 0x21
 800f606:	2104      	movs	r1, #4
 800f608:	4620      	mov	r0, r4
 800f60a:	f000 fb51 	bl	800fcb0 <_calloc_r>
 800f60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f610:	60f0      	str	r0, [r6, #12]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d1e4      	bne.n	800f5e2 <_Balloc+0x2e>
 800f618:	2000      	movs	r0, #0
 800f61a:	bd70      	pop	{r4, r5, r6, pc}
 800f61c:	6802      	ldr	r2, [r0, #0]
 800f61e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f622:	2300      	movs	r3, #0
 800f624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f628:	e7f7      	b.n	800f61a <_Balloc+0x66>
 800f62a:	bf00      	nop
 800f62c:	08010ef4 	.word	0x08010ef4
 800f630:	08011025 	.word	0x08011025

0800f634 <_Bfree>:
 800f634:	b570      	push	{r4, r5, r6, lr}
 800f636:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f638:	4605      	mov	r5, r0
 800f63a:	460c      	mov	r4, r1
 800f63c:	b976      	cbnz	r6, 800f65c <_Bfree+0x28>
 800f63e:	2010      	movs	r0, #16
 800f640:	f7ff ffa4 	bl	800f58c <malloc>
 800f644:	4602      	mov	r2, r0
 800f646:	6268      	str	r0, [r5, #36]	; 0x24
 800f648:	b920      	cbnz	r0, 800f654 <_Bfree+0x20>
 800f64a:	4b09      	ldr	r3, [pc, #36]	; (800f670 <_Bfree+0x3c>)
 800f64c:	4809      	ldr	r0, [pc, #36]	; (800f674 <_Bfree+0x40>)
 800f64e:	218a      	movs	r1, #138	; 0x8a
 800f650:	f7fe ffa6 	bl	800e5a0 <__assert_func>
 800f654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f658:	6006      	str	r6, [r0, #0]
 800f65a:	60c6      	str	r6, [r0, #12]
 800f65c:	b13c      	cbz	r4, 800f66e <_Bfree+0x3a>
 800f65e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f660:	6862      	ldr	r2, [r4, #4]
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f668:	6021      	str	r1, [r4, #0]
 800f66a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f66e:	bd70      	pop	{r4, r5, r6, pc}
 800f670:	08010ef4 	.word	0x08010ef4
 800f674:	08011025 	.word	0x08011025

0800f678 <__multadd>:
 800f678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f67c:	690e      	ldr	r6, [r1, #16]
 800f67e:	4607      	mov	r7, r0
 800f680:	4698      	mov	r8, r3
 800f682:	460c      	mov	r4, r1
 800f684:	f101 0014 	add.w	r0, r1, #20
 800f688:	2300      	movs	r3, #0
 800f68a:	6805      	ldr	r5, [r0, #0]
 800f68c:	b2a9      	uxth	r1, r5
 800f68e:	fb02 8101 	mla	r1, r2, r1, r8
 800f692:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f696:	0c2d      	lsrs	r5, r5, #16
 800f698:	fb02 c505 	mla	r5, r2, r5, ip
 800f69c:	b289      	uxth	r1, r1
 800f69e:	3301      	adds	r3, #1
 800f6a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f6a4:	429e      	cmp	r6, r3
 800f6a6:	f840 1b04 	str.w	r1, [r0], #4
 800f6aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f6ae:	dcec      	bgt.n	800f68a <__multadd+0x12>
 800f6b0:	f1b8 0f00 	cmp.w	r8, #0
 800f6b4:	d022      	beq.n	800f6fc <__multadd+0x84>
 800f6b6:	68a3      	ldr	r3, [r4, #8]
 800f6b8:	42b3      	cmp	r3, r6
 800f6ba:	dc19      	bgt.n	800f6f0 <__multadd+0x78>
 800f6bc:	6861      	ldr	r1, [r4, #4]
 800f6be:	4638      	mov	r0, r7
 800f6c0:	3101      	adds	r1, #1
 800f6c2:	f7ff ff77 	bl	800f5b4 <_Balloc>
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	b928      	cbnz	r0, 800f6d6 <__multadd+0x5e>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	4b0d      	ldr	r3, [pc, #52]	; (800f704 <__multadd+0x8c>)
 800f6ce:	480e      	ldr	r0, [pc, #56]	; (800f708 <__multadd+0x90>)
 800f6d0:	21b5      	movs	r1, #181	; 0xb5
 800f6d2:	f7fe ff65 	bl	800e5a0 <__assert_func>
 800f6d6:	6922      	ldr	r2, [r4, #16]
 800f6d8:	3202      	adds	r2, #2
 800f6da:	f104 010c 	add.w	r1, r4, #12
 800f6de:	0092      	lsls	r2, r2, #2
 800f6e0:	300c      	adds	r0, #12
 800f6e2:	f7fd ffbe 	bl	800d662 <memcpy>
 800f6e6:	4621      	mov	r1, r4
 800f6e8:	4638      	mov	r0, r7
 800f6ea:	f7ff ffa3 	bl	800f634 <_Bfree>
 800f6ee:	462c      	mov	r4, r5
 800f6f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f6f4:	3601      	adds	r6, #1
 800f6f6:	f8c3 8014 	str.w	r8, [r3, #20]
 800f6fa:	6126      	str	r6, [r4, #16]
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f702:	bf00      	nop
 800f704:	08011014 	.word	0x08011014
 800f708:	08011025 	.word	0x08011025

0800f70c <__hi0bits>:
 800f70c:	0c03      	lsrs	r3, r0, #16
 800f70e:	041b      	lsls	r3, r3, #16
 800f710:	b9d3      	cbnz	r3, 800f748 <__hi0bits+0x3c>
 800f712:	0400      	lsls	r0, r0, #16
 800f714:	2310      	movs	r3, #16
 800f716:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f71a:	bf04      	itt	eq
 800f71c:	0200      	lsleq	r0, r0, #8
 800f71e:	3308      	addeq	r3, #8
 800f720:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f724:	bf04      	itt	eq
 800f726:	0100      	lsleq	r0, r0, #4
 800f728:	3304      	addeq	r3, #4
 800f72a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f72e:	bf04      	itt	eq
 800f730:	0080      	lsleq	r0, r0, #2
 800f732:	3302      	addeq	r3, #2
 800f734:	2800      	cmp	r0, #0
 800f736:	db05      	blt.n	800f744 <__hi0bits+0x38>
 800f738:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f73c:	f103 0301 	add.w	r3, r3, #1
 800f740:	bf08      	it	eq
 800f742:	2320      	moveq	r3, #32
 800f744:	4618      	mov	r0, r3
 800f746:	4770      	bx	lr
 800f748:	2300      	movs	r3, #0
 800f74a:	e7e4      	b.n	800f716 <__hi0bits+0xa>

0800f74c <__lo0bits>:
 800f74c:	6803      	ldr	r3, [r0, #0]
 800f74e:	f013 0207 	ands.w	r2, r3, #7
 800f752:	4601      	mov	r1, r0
 800f754:	d00b      	beq.n	800f76e <__lo0bits+0x22>
 800f756:	07da      	lsls	r2, r3, #31
 800f758:	d424      	bmi.n	800f7a4 <__lo0bits+0x58>
 800f75a:	0798      	lsls	r0, r3, #30
 800f75c:	bf49      	itett	mi
 800f75e:	085b      	lsrmi	r3, r3, #1
 800f760:	089b      	lsrpl	r3, r3, #2
 800f762:	2001      	movmi	r0, #1
 800f764:	600b      	strmi	r3, [r1, #0]
 800f766:	bf5c      	itt	pl
 800f768:	600b      	strpl	r3, [r1, #0]
 800f76a:	2002      	movpl	r0, #2
 800f76c:	4770      	bx	lr
 800f76e:	b298      	uxth	r0, r3
 800f770:	b9b0      	cbnz	r0, 800f7a0 <__lo0bits+0x54>
 800f772:	0c1b      	lsrs	r3, r3, #16
 800f774:	2010      	movs	r0, #16
 800f776:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f77a:	bf04      	itt	eq
 800f77c:	0a1b      	lsreq	r3, r3, #8
 800f77e:	3008      	addeq	r0, #8
 800f780:	071a      	lsls	r2, r3, #28
 800f782:	bf04      	itt	eq
 800f784:	091b      	lsreq	r3, r3, #4
 800f786:	3004      	addeq	r0, #4
 800f788:	079a      	lsls	r2, r3, #30
 800f78a:	bf04      	itt	eq
 800f78c:	089b      	lsreq	r3, r3, #2
 800f78e:	3002      	addeq	r0, #2
 800f790:	07da      	lsls	r2, r3, #31
 800f792:	d403      	bmi.n	800f79c <__lo0bits+0x50>
 800f794:	085b      	lsrs	r3, r3, #1
 800f796:	f100 0001 	add.w	r0, r0, #1
 800f79a:	d005      	beq.n	800f7a8 <__lo0bits+0x5c>
 800f79c:	600b      	str	r3, [r1, #0]
 800f79e:	4770      	bx	lr
 800f7a0:	4610      	mov	r0, r2
 800f7a2:	e7e8      	b.n	800f776 <__lo0bits+0x2a>
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	4770      	bx	lr
 800f7a8:	2020      	movs	r0, #32
 800f7aa:	4770      	bx	lr

0800f7ac <__i2b>:
 800f7ac:	b510      	push	{r4, lr}
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	2101      	movs	r1, #1
 800f7b2:	f7ff feff 	bl	800f5b4 <_Balloc>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	b928      	cbnz	r0, 800f7c6 <__i2b+0x1a>
 800f7ba:	4b05      	ldr	r3, [pc, #20]	; (800f7d0 <__i2b+0x24>)
 800f7bc:	4805      	ldr	r0, [pc, #20]	; (800f7d4 <__i2b+0x28>)
 800f7be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f7c2:	f7fe feed 	bl	800e5a0 <__assert_func>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	6144      	str	r4, [r0, #20]
 800f7ca:	6103      	str	r3, [r0, #16]
 800f7cc:	bd10      	pop	{r4, pc}
 800f7ce:	bf00      	nop
 800f7d0:	08011014 	.word	0x08011014
 800f7d4:	08011025 	.word	0x08011025

0800f7d8 <__multiply>:
 800f7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7dc:	4614      	mov	r4, r2
 800f7de:	690a      	ldr	r2, [r1, #16]
 800f7e0:	6923      	ldr	r3, [r4, #16]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	bfb8      	it	lt
 800f7e6:	460b      	movlt	r3, r1
 800f7e8:	460d      	mov	r5, r1
 800f7ea:	bfbc      	itt	lt
 800f7ec:	4625      	movlt	r5, r4
 800f7ee:	461c      	movlt	r4, r3
 800f7f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f7f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f7f8:	68ab      	ldr	r3, [r5, #8]
 800f7fa:	6869      	ldr	r1, [r5, #4]
 800f7fc:	eb0a 0709 	add.w	r7, sl, r9
 800f800:	42bb      	cmp	r3, r7
 800f802:	b085      	sub	sp, #20
 800f804:	bfb8      	it	lt
 800f806:	3101      	addlt	r1, #1
 800f808:	f7ff fed4 	bl	800f5b4 <_Balloc>
 800f80c:	b930      	cbnz	r0, 800f81c <__multiply+0x44>
 800f80e:	4602      	mov	r2, r0
 800f810:	4b42      	ldr	r3, [pc, #264]	; (800f91c <__multiply+0x144>)
 800f812:	4843      	ldr	r0, [pc, #268]	; (800f920 <__multiply+0x148>)
 800f814:	f240 115d 	movw	r1, #349	; 0x15d
 800f818:	f7fe fec2 	bl	800e5a0 <__assert_func>
 800f81c:	f100 0614 	add.w	r6, r0, #20
 800f820:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f824:	4633      	mov	r3, r6
 800f826:	2200      	movs	r2, #0
 800f828:	4543      	cmp	r3, r8
 800f82a:	d31e      	bcc.n	800f86a <__multiply+0x92>
 800f82c:	f105 0c14 	add.w	ip, r5, #20
 800f830:	f104 0314 	add.w	r3, r4, #20
 800f834:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f838:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f83c:	9202      	str	r2, [sp, #8]
 800f83e:	ebac 0205 	sub.w	r2, ip, r5
 800f842:	3a15      	subs	r2, #21
 800f844:	f022 0203 	bic.w	r2, r2, #3
 800f848:	3204      	adds	r2, #4
 800f84a:	f105 0115 	add.w	r1, r5, #21
 800f84e:	458c      	cmp	ip, r1
 800f850:	bf38      	it	cc
 800f852:	2204      	movcc	r2, #4
 800f854:	9201      	str	r2, [sp, #4]
 800f856:	9a02      	ldr	r2, [sp, #8]
 800f858:	9303      	str	r3, [sp, #12]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d808      	bhi.n	800f870 <__multiply+0x98>
 800f85e:	2f00      	cmp	r7, #0
 800f860:	dc55      	bgt.n	800f90e <__multiply+0x136>
 800f862:	6107      	str	r7, [r0, #16]
 800f864:	b005      	add	sp, #20
 800f866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f86a:	f843 2b04 	str.w	r2, [r3], #4
 800f86e:	e7db      	b.n	800f828 <__multiply+0x50>
 800f870:	f8b3 a000 	ldrh.w	sl, [r3]
 800f874:	f1ba 0f00 	cmp.w	sl, #0
 800f878:	d020      	beq.n	800f8bc <__multiply+0xe4>
 800f87a:	f105 0e14 	add.w	lr, r5, #20
 800f87e:	46b1      	mov	r9, r6
 800f880:	2200      	movs	r2, #0
 800f882:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f886:	f8d9 b000 	ldr.w	fp, [r9]
 800f88a:	b2a1      	uxth	r1, r4
 800f88c:	fa1f fb8b 	uxth.w	fp, fp
 800f890:	fb0a b101 	mla	r1, sl, r1, fp
 800f894:	4411      	add	r1, r2
 800f896:	f8d9 2000 	ldr.w	r2, [r9]
 800f89a:	0c24      	lsrs	r4, r4, #16
 800f89c:	0c12      	lsrs	r2, r2, #16
 800f89e:	fb0a 2404 	mla	r4, sl, r4, r2
 800f8a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f8a6:	b289      	uxth	r1, r1
 800f8a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f8ac:	45f4      	cmp	ip, lr
 800f8ae:	f849 1b04 	str.w	r1, [r9], #4
 800f8b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f8b6:	d8e4      	bhi.n	800f882 <__multiply+0xaa>
 800f8b8:	9901      	ldr	r1, [sp, #4]
 800f8ba:	5072      	str	r2, [r6, r1]
 800f8bc:	9a03      	ldr	r2, [sp, #12]
 800f8be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	f1b9 0f00 	cmp.w	r9, #0
 800f8c8:	d01f      	beq.n	800f90a <__multiply+0x132>
 800f8ca:	6834      	ldr	r4, [r6, #0]
 800f8cc:	f105 0114 	add.w	r1, r5, #20
 800f8d0:	46b6      	mov	lr, r6
 800f8d2:	f04f 0a00 	mov.w	sl, #0
 800f8d6:	880a      	ldrh	r2, [r1, #0]
 800f8d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f8dc:	fb09 b202 	mla	r2, r9, r2, fp
 800f8e0:	4492      	add	sl, r2
 800f8e2:	b2a4      	uxth	r4, r4
 800f8e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f8e8:	f84e 4b04 	str.w	r4, [lr], #4
 800f8ec:	f851 4b04 	ldr.w	r4, [r1], #4
 800f8f0:	f8be 2000 	ldrh.w	r2, [lr]
 800f8f4:	0c24      	lsrs	r4, r4, #16
 800f8f6:	fb09 2404 	mla	r4, r9, r4, r2
 800f8fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f8fe:	458c      	cmp	ip, r1
 800f900:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f904:	d8e7      	bhi.n	800f8d6 <__multiply+0xfe>
 800f906:	9a01      	ldr	r2, [sp, #4]
 800f908:	50b4      	str	r4, [r6, r2]
 800f90a:	3604      	adds	r6, #4
 800f90c:	e7a3      	b.n	800f856 <__multiply+0x7e>
 800f90e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1a5      	bne.n	800f862 <__multiply+0x8a>
 800f916:	3f01      	subs	r7, #1
 800f918:	e7a1      	b.n	800f85e <__multiply+0x86>
 800f91a:	bf00      	nop
 800f91c:	08011014 	.word	0x08011014
 800f920:	08011025 	.word	0x08011025

0800f924 <__pow5mult>:
 800f924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f928:	4615      	mov	r5, r2
 800f92a:	f012 0203 	ands.w	r2, r2, #3
 800f92e:	4606      	mov	r6, r0
 800f930:	460f      	mov	r7, r1
 800f932:	d007      	beq.n	800f944 <__pow5mult+0x20>
 800f934:	4c25      	ldr	r4, [pc, #148]	; (800f9cc <__pow5mult+0xa8>)
 800f936:	3a01      	subs	r2, #1
 800f938:	2300      	movs	r3, #0
 800f93a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f93e:	f7ff fe9b 	bl	800f678 <__multadd>
 800f942:	4607      	mov	r7, r0
 800f944:	10ad      	asrs	r5, r5, #2
 800f946:	d03d      	beq.n	800f9c4 <__pow5mult+0xa0>
 800f948:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f94a:	b97c      	cbnz	r4, 800f96c <__pow5mult+0x48>
 800f94c:	2010      	movs	r0, #16
 800f94e:	f7ff fe1d 	bl	800f58c <malloc>
 800f952:	4602      	mov	r2, r0
 800f954:	6270      	str	r0, [r6, #36]	; 0x24
 800f956:	b928      	cbnz	r0, 800f964 <__pow5mult+0x40>
 800f958:	4b1d      	ldr	r3, [pc, #116]	; (800f9d0 <__pow5mult+0xac>)
 800f95a:	481e      	ldr	r0, [pc, #120]	; (800f9d4 <__pow5mult+0xb0>)
 800f95c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f960:	f7fe fe1e 	bl	800e5a0 <__assert_func>
 800f964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f968:	6004      	str	r4, [r0, #0]
 800f96a:	60c4      	str	r4, [r0, #12]
 800f96c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f974:	b94c      	cbnz	r4, 800f98a <__pow5mult+0x66>
 800f976:	f240 2171 	movw	r1, #625	; 0x271
 800f97a:	4630      	mov	r0, r6
 800f97c:	f7ff ff16 	bl	800f7ac <__i2b>
 800f980:	2300      	movs	r3, #0
 800f982:	f8c8 0008 	str.w	r0, [r8, #8]
 800f986:	4604      	mov	r4, r0
 800f988:	6003      	str	r3, [r0, #0]
 800f98a:	f04f 0900 	mov.w	r9, #0
 800f98e:	07eb      	lsls	r3, r5, #31
 800f990:	d50a      	bpl.n	800f9a8 <__pow5mult+0x84>
 800f992:	4639      	mov	r1, r7
 800f994:	4622      	mov	r2, r4
 800f996:	4630      	mov	r0, r6
 800f998:	f7ff ff1e 	bl	800f7d8 <__multiply>
 800f99c:	4639      	mov	r1, r7
 800f99e:	4680      	mov	r8, r0
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	f7ff fe47 	bl	800f634 <_Bfree>
 800f9a6:	4647      	mov	r7, r8
 800f9a8:	106d      	asrs	r5, r5, #1
 800f9aa:	d00b      	beq.n	800f9c4 <__pow5mult+0xa0>
 800f9ac:	6820      	ldr	r0, [r4, #0]
 800f9ae:	b938      	cbnz	r0, 800f9c0 <__pow5mult+0x9c>
 800f9b0:	4622      	mov	r2, r4
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f7ff ff0f 	bl	800f7d8 <__multiply>
 800f9ba:	6020      	str	r0, [r4, #0]
 800f9bc:	f8c0 9000 	str.w	r9, [r0]
 800f9c0:	4604      	mov	r4, r0
 800f9c2:	e7e4      	b.n	800f98e <__pow5mult+0x6a>
 800f9c4:	4638      	mov	r0, r7
 800f9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ca:	bf00      	nop
 800f9cc:	08011178 	.word	0x08011178
 800f9d0:	08010ef4 	.word	0x08010ef4
 800f9d4:	08011025 	.word	0x08011025

0800f9d8 <__lshift>:
 800f9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9dc:	460c      	mov	r4, r1
 800f9de:	6849      	ldr	r1, [r1, #4]
 800f9e0:	6923      	ldr	r3, [r4, #16]
 800f9e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9e6:	68a3      	ldr	r3, [r4, #8]
 800f9e8:	4607      	mov	r7, r0
 800f9ea:	4691      	mov	r9, r2
 800f9ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9f0:	f108 0601 	add.w	r6, r8, #1
 800f9f4:	42b3      	cmp	r3, r6
 800f9f6:	db0b      	blt.n	800fa10 <__lshift+0x38>
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	f7ff fddb 	bl	800f5b4 <_Balloc>
 800f9fe:	4605      	mov	r5, r0
 800fa00:	b948      	cbnz	r0, 800fa16 <__lshift+0x3e>
 800fa02:	4602      	mov	r2, r0
 800fa04:	4b28      	ldr	r3, [pc, #160]	; (800faa8 <__lshift+0xd0>)
 800fa06:	4829      	ldr	r0, [pc, #164]	; (800faac <__lshift+0xd4>)
 800fa08:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fa0c:	f7fe fdc8 	bl	800e5a0 <__assert_func>
 800fa10:	3101      	adds	r1, #1
 800fa12:	005b      	lsls	r3, r3, #1
 800fa14:	e7ee      	b.n	800f9f4 <__lshift+0x1c>
 800fa16:	2300      	movs	r3, #0
 800fa18:	f100 0114 	add.w	r1, r0, #20
 800fa1c:	f100 0210 	add.w	r2, r0, #16
 800fa20:	4618      	mov	r0, r3
 800fa22:	4553      	cmp	r3, sl
 800fa24:	db33      	blt.n	800fa8e <__lshift+0xb6>
 800fa26:	6920      	ldr	r0, [r4, #16]
 800fa28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa2c:	f104 0314 	add.w	r3, r4, #20
 800fa30:	f019 091f 	ands.w	r9, r9, #31
 800fa34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa3c:	d02b      	beq.n	800fa96 <__lshift+0xbe>
 800fa3e:	f1c9 0e20 	rsb	lr, r9, #32
 800fa42:	468a      	mov	sl, r1
 800fa44:	2200      	movs	r2, #0
 800fa46:	6818      	ldr	r0, [r3, #0]
 800fa48:	fa00 f009 	lsl.w	r0, r0, r9
 800fa4c:	4302      	orrs	r2, r0
 800fa4e:	f84a 2b04 	str.w	r2, [sl], #4
 800fa52:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa56:	459c      	cmp	ip, r3
 800fa58:	fa22 f20e 	lsr.w	r2, r2, lr
 800fa5c:	d8f3      	bhi.n	800fa46 <__lshift+0x6e>
 800fa5e:	ebac 0304 	sub.w	r3, ip, r4
 800fa62:	3b15      	subs	r3, #21
 800fa64:	f023 0303 	bic.w	r3, r3, #3
 800fa68:	3304      	adds	r3, #4
 800fa6a:	f104 0015 	add.w	r0, r4, #21
 800fa6e:	4584      	cmp	ip, r0
 800fa70:	bf38      	it	cc
 800fa72:	2304      	movcc	r3, #4
 800fa74:	50ca      	str	r2, [r1, r3]
 800fa76:	b10a      	cbz	r2, 800fa7c <__lshift+0xa4>
 800fa78:	f108 0602 	add.w	r6, r8, #2
 800fa7c:	3e01      	subs	r6, #1
 800fa7e:	4638      	mov	r0, r7
 800fa80:	612e      	str	r6, [r5, #16]
 800fa82:	4621      	mov	r1, r4
 800fa84:	f7ff fdd6 	bl	800f634 <_Bfree>
 800fa88:	4628      	mov	r0, r5
 800fa8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa92:	3301      	adds	r3, #1
 800fa94:	e7c5      	b.n	800fa22 <__lshift+0x4a>
 800fa96:	3904      	subs	r1, #4
 800fa98:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800faa0:	459c      	cmp	ip, r3
 800faa2:	d8f9      	bhi.n	800fa98 <__lshift+0xc0>
 800faa4:	e7ea      	b.n	800fa7c <__lshift+0xa4>
 800faa6:	bf00      	nop
 800faa8:	08011014 	.word	0x08011014
 800faac:	08011025 	.word	0x08011025

0800fab0 <__mcmp>:
 800fab0:	b530      	push	{r4, r5, lr}
 800fab2:	6902      	ldr	r2, [r0, #16]
 800fab4:	690c      	ldr	r4, [r1, #16]
 800fab6:	1b12      	subs	r2, r2, r4
 800fab8:	d10e      	bne.n	800fad8 <__mcmp+0x28>
 800faba:	f100 0314 	add.w	r3, r0, #20
 800fabe:	3114      	adds	r1, #20
 800fac0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fac4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fac8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800facc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fad0:	42a5      	cmp	r5, r4
 800fad2:	d003      	beq.n	800fadc <__mcmp+0x2c>
 800fad4:	d305      	bcc.n	800fae2 <__mcmp+0x32>
 800fad6:	2201      	movs	r2, #1
 800fad8:	4610      	mov	r0, r2
 800fada:	bd30      	pop	{r4, r5, pc}
 800fadc:	4283      	cmp	r3, r0
 800fade:	d3f3      	bcc.n	800fac8 <__mcmp+0x18>
 800fae0:	e7fa      	b.n	800fad8 <__mcmp+0x28>
 800fae2:	f04f 32ff 	mov.w	r2, #4294967295
 800fae6:	e7f7      	b.n	800fad8 <__mcmp+0x28>

0800fae8 <__mdiff>:
 800fae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faec:	460c      	mov	r4, r1
 800faee:	4606      	mov	r6, r0
 800faf0:	4611      	mov	r1, r2
 800faf2:	4620      	mov	r0, r4
 800faf4:	4617      	mov	r7, r2
 800faf6:	f7ff ffdb 	bl	800fab0 <__mcmp>
 800fafa:	1e05      	subs	r5, r0, #0
 800fafc:	d110      	bne.n	800fb20 <__mdiff+0x38>
 800fafe:	4629      	mov	r1, r5
 800fb00:	4630      	mov	r0, r6
 800fb02:	f7ff fd57 	bl	800f5b4 <_Balloc>
 800fb06:	b930      	cbnz	r0, 800fb16 <__mdiff+0x2e>
 800fb08:	4b39      	ldr	r3, [pc, #228]	; (800fbf0 <__mdiff+0x108>)
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	f240 2132 	movw	r1, #562	; 0x232
 800fb10:	4838      	ldr	r0, [pc, #224]	; (800fbf4 <__mdiff+0x10c>)
 800fb12:	f7fe fd45 	bl	800e5a0 <__assert_func>
 800fb16:	2301      	movs	r3, #1
 800fb18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb20:	bfa4      	itt	ge
 800fb22:	463b      	movge	r3, r7
 800fb24:	4627      	movge	r7, r4
 800fb26:	4630      	mov	r0, r6
 800fb28:	6879      	ldr	r1, [r7, #4]
 800fb2a:	bfa6      	itte	ge
 800fb2c:	461c      	movge	r4, r3
 800fb2e:	2500      	movge	r5, #0
 800fb30:	2501      	movlt	r5, #1
 800fb32:	f7ff fd3f 	bl	800f5b4 <_Balloc>
 800fb36:	b920      	cbnz	r0, 800fb42 <__mdiff+0x5a>
 800fb38:	4b2d      	ldr	r3, [pc, #180]	; (800fbf0 <__mdiff+0x108>)
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fb40:	e7e6      	b.n	800fb10 <__mdiff+0x28>
 800fb42:	693e      	ldr	r6, [r7, #16]
 800fb44:	60c5      	str	r5, [r0, #12]
 800fb46:	6925      	ldr	r5, [r4, #16]
 800fb48:	f107 0114 	add.w	r1, r7, #20
 800fb4c:	f104 0914 	add.w	r9, r4, #20
 800fb50:	f100 0e14 	add.w	lr, r0, #20
 800fb54:	f107 0210 	add.w	r2, r7, #16
 800fb58:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fb5c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fb60:	46f2      	mov	sl, lr
 800fb62:	2700      	movs	r7, #0
 800fb64:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb6c:	fa1f f883 	uxth.w	r8, r3
 800fb70:	fa17 f78b 	uxtah	r7, r7, fp
 800fb74:	0c1b      	lsrs	r3, r3, #16
 800fb76:	eba7 0808 	sub.w	r8, r7, r8
 800fb7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb82:	fa1f f888 	uxth.w	r8, r8
 800fb86:	141f      	asrs	r7, r3, #16
 800fb88:	454d      	cmp	r5, r9
 800fb8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb8e:	f84a 3b04 	str.w	r3, [sl], #4
 800fb92:	d8e7      	bhi.n	800fb64 <__mdiff+0x7c>
 800fb94:	1b2b      	subs	r3, r5, r4
 800fb96:	3b15      	subs	r3, #21
 800fb98:	f023 0303 	bic.w	r3, r3, #3
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	3415      	adds	r4, #21
 800fba0:	42a5      	cmp	r5, r4
 800fba2:	bf38      	it	cc
 800fba4:	2304      	movcc	r3, #4
 800fba6:	4419      	add	r1, r3
 800fba8:	4473      	add	r3, lr
 800fbaa:	469e      	mov	lr, r3
 800fbac:	460d      	mov	r5, r1
 800fbae:	4565      	cmp	r5, ip
 800fbb0:	d30e      	bcc.n	800fbd0 <__mdiff+0xe8>
 800fbb2:	f10c 0203 	add.w	r2, ip, #3
 800fbb6:	1a52      	subs	r2, r2, r1
 800fbb8:	f022 0203 	bic.w	r2, r2, #3
 800fbbc:	3903      	subs	r1, #3
 800fbbe:	458c      	cmp	ip, r1
 800fbc0:	bf38      	it	cc
 800fbc2:	2200      	movcc	r2, #0
 800fbc4:	441a      	add	r2, r3
 800fbc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fbca:	b17b      	cbz	r3, 800fbec <__mdiff+0x104>
 800fbcc:	6106      	str	r6, [r0, #16]
 800fbce:	e7a5      	b.n	800fb1c <__mdiff+0x34>
 800fbd0:	f855 8b04 	ldr.w	r8, [r5], #4
 800fbd4:	fa17 f488 	uxtah	r4, r7, r8
 800fbd8:	1422      	asrs	r2, r4, #16
 800fbda:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fbde:	b2a4      	uxth	r4, r4
 800fbe0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fbe4:	f84e 4b04 	str.w	r4, [lr], #4
 800fbe8:	1417      	asrs	r7, r2, #16
 800fbea:	e7e0      	b.n	800fbae <__mdiff+0xc6>
 800fbec:	3e01      	subs	r6, #1
 800fbee:	e7ea      	b.n	800fbc6 <__mdiff+0xde>
 800fbf0:	08011014 	.word	0x08011014
 800fbf4:	08011025 	.word	0x08011025

0800fbf8 <__d2b>:
 800fbf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbfc:	4689      	mov	r9, r1
 800fbfe:	2101      	movs	r1, #1
 800fc00:	ec57 6b10 	vmov	r6, r7, d0
 800fc04:	4690      	mov	r8, r2
 800fc06:	f7ff fcd5 	bl	800f5b4 <_Balloc>
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	b930      	cbnz	r0, 800fc1c <__d2b+0x24>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	4b25      	ldr	r3, [pc, #148]	; (800fca8 <__d2b+0xb0>)
 800fc12:	4826      	ldr	r0, [pc, #152]	; (800fcac <__d2b+0xb4>)
 800fc14:	f240 310a 	movw	r1, #778	; 0x30a
 800fc18:	f7fe fcc2 	bl	800e5a0 <__assert_func>
 800fc1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fc20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc24:	bb35      	cbnz	r5, 800fc74 <__d2b+0x7c>
 800fc26:	2e00      	cmp	r6, #0
 800fc28:	9301      	str	r3, [sp, #4]
 800fc2a:	d028      	beq.n	800fc7e <__d2b+0x86>
 800fc2c:	4668      	mov	r0, sp
 800fc2e:	9600      	str	r6, [sp, #0]
 800fc30:	f7ff fd8c 	bl	800f74c <__lo0bits>
 800fc34:	9900      	ldr	r1, [sp, #0]
 800fc36:	b300      	cbz	r0, 800fc7a <__d2b+0x82>
 800fc38:	9a01      	ldr	r2, [sp, #4]
 800fc3a:	f1c0 0320 	rsb	r3, r0, #32
 800fc3e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc42:	430b      	orrs	r3, r1
 800fc44:	40c2      	lsrs	r2, r0
 800fc46:	6163      	str	r3, [r4, #20]
 800fc48:	9201      	str	r2, [sp, #4]
 800fc4a:	9b01      	ldr	r3, [sp, #4]
 800fc4c:	61a3      	str	r3, [r4, #24]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	bf14      	ite	ne
 800fc52:	2202      	movne	r2, #2
 800fc54:	2201      	moveq	r2, #1
 800fc56:	6122      	str	r2, [r4, #16]
 800fc58:	b1d5      	cbz	r5, 800fc90 <__d2b+0x98>
 800fc5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc5e:	4405      	add	r5, r0
 800fc60:	f8c9 5000 	str.w	r5, [r9]
 800fc64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc68:	f8c8 0000 	str.w	r0, [r8]
 800fc6c:	4620      	mov	r0, r4
 800fc6e:	b003      	add	sp, #12
 800fc70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc78:	e7d5      	b.n	800fc26 <__d2b+0x2e>
 800fc7a:	6161      	str	r1, [r4, #20]
 800fc7c:	e7e5      	b.n	800fc4a <__d2b+0x52>
 800fc7e:	a801      	add	r0, sp, #4
 800fc80:	f7ff fd64 	bl	800f74c <__lo0bits>
 800fc84:	9b01      	ldr	r3, [sp, #4]
 800fc86:	6163      	str	r3, [r4, #20]
 800fc88:	2201      	movs	r2, #1
 800fc8a:	6122      	str	r2, [r4, #16]
 800fc8c:	3020      	adds	r0, #32
 800fc8e:	e7e3      	b.n	800fc58 <__d2b+0x60>
 800fc90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc98:	f8c9 0000 	str.w	r0, [r9]
 800fc9c:	6918      	ldr	r0, [r3, #16]
 800fc9e:	f7ff fd35 	bl	800f70c <__hi0bits>
 800fca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fca6:	e7df      	b.n	800fc68 <__d2b+0x70>
 800fca8:	08011014 	.word	0x08011014
 800fcac:	08011025 	.word	0x08011025

0800fcb0 <_calloc_r>:
 800fcb0:	b513      	push	{r0, r1, r4, lr}
 800fcb2:	434a      	muls	r2, r1
 800fcb4:	4611      	mov	r1, r2
 800fcb6:	9201      	str	r2, [sp, #4]
 800fcb8:	f7fd fcea 	bl	800d690 <_malloc_r>
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	b118      	cbz	r0, 800fcc8 <_calloc_r+0x18>
 800fcc0:	9a01      	ldr	r2, [sp, #4]
 800fcc2:	2100      	movs	r1, #0
 800fcc4:	f7fd fcdb 	bl	800d67e <memset>
 800fcc8:	4620      	mov	r0, r4
 800fcca:	b002      	add	sp, #8
 800fccc:	bd10      	pop	{r4, pc}
	...

0800fcd0 <_free_r>:
 800fcd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fcd2:	2900      	cmp	r1, #0
 800fcd4:	d048      	beq.n	800fd68 <_free_r+0x98>
 800fcd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcda:	9001      	str	r0, [sp, #4]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f1a1 0404 	sub.w	r4, r1, #4
 800fce2:	bfb8      	it	lt
 800fce4:	18e4      	addlt	r4, r4, r3
 800fce6:	f7ff fc59 	bl	800f59c <__malloc_lock>
 800fcea:	4a20      	ldr	r2, [pc, #128]	; (800fd6c <_free_r+0x9c>)
 800fcec:	9801      	ldr	r0, [sp, #4]
 800fcee:	6813      	ldr	r3, [r2, #0]
 800fcf0:	4615      	mov	r5, r2
 800fcf2:	b933      	cbnz	r3, 800fd02 <_free_r+0x32>
 800fcf4:	6063      	str	r3, [r4, #4]
 800fcf6:	6014      	str	r4, [r2, #0]
 800fcf8:	b003      	add	sp, #12
 800fcfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcfe:	f7ff bc53 	b.w	800f5a8 <__malloc_unlock>
 800fd02:	42a3      	cmp	r3, r4
 800fd04:	d90b      	bls.n	800fd1e <_free_r+0x4e>
 800fd06:	6821      	ldr	r1, [r4, #0]
 800fd08:	1862      	adds	r2, r4, r1
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	bf04      	itt	eq
 800fd0e:	681a      	ldreq	r2, [r3, #0]
 800fd10:	685b      	ldreq	r3, [r3, #4]
 800fd12:	6063      	str	r3, [r4, #4]
 800fd14:	bf04      	itt	eq
 800fd16:	1852      	addeq	r2, r2, r1
 800fd18:	6022      	streq	r2, [r4, #0]
 800fd1a:	602c      	str	r4, [r5, #0]
 800fd1c:	e7ec      	b.n	800fcf8 <_free_r+0x28>
 800fd1e:	461a      	mov	r2, r3
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	b10b      	cbz	r3, 800fd28 <_free_r+0x58>
 800fd24:	42a3      	cmp	r3, r4
 800fd26:	d9fa      	bls.n	800fd1e <_free_r+0x4e>
 800fd28:	6811      	ldr	r1, [r2, #0]
 800fd2a:	1855      	adds	r5, r2, r1
 800fd2c:	42a5      	cmp	r5, r4
 800fd2e:	d10b      	bne.n	800fd48 <_free_r+0x78>
 800fd30:	6824      	ldr	r4, [r4, #0]
 800fd32:	4421      	add	r1, r4
 800fd34:	1854      	adds	r4, r2, r1
 800fd36:	42a3      	cmp	r3, r4
 800fd38:	6011      	str	r1, [r2, #0]
 800fd3a:	d1dd      	bne.n	800fcf8 <_free_r+0x28>
 800fd3c:	681c      	ldr	r4, [r3, #0]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	6053      	str	r3, [r2, #4]
 800fd42:	4421      	add	r1, r4
 800fd44:	6011      	str	r1, [r2, #0]
 800fd46:	e7d7      	b.n	800fcf8 <_free_r+0x28>
 800fd48:	d902      	bls.n	800fd50 <_free_r+0x80>
 800fd4a:	230c      	movs	r3, #12
 800fd4c:	6003      	str	r3, [r0, #0]
 800fd4e:	e7d3      	b.n	800fcf8 <_free_r+0x28>
 800fd50:	6825      	ldr	r5, [r4, #0]
 800fd52:	1961      	adds	r1, r4, r5
 800fd54:	428b      	cmp	r3, r1
 800fd56:	bf04      	itt	eq
 800fd58:	6819      	ldreq	r1, [r3, #0]
 800fd5a:	685b      	ldreq	r3, [r3, #4]
 800fd5c:	6063      	str	r3, [r4, #4]
 800fd5e:	bf04      	itt	eq
 800fd60:	1949      	addeq	r1, r1, r5
 800fd62:	6021      	streq	r1, [r4, #0]
 800fd64:	6054      	str	r4, [r2, #4]
 800fd66:	e7c7      	b.n	800fcf8 <_free_r+0x28>
 800fd68:	b003      	add	sp, #12
 800fd6a:	bd30      	pop	{r4, r5, pc}
 800fd6c:	20002a30 	.word	0x20002a30

0800fd70 <__ssputs_r>:
 800fd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd74:	688e      	ldr	r6, [r1, #8]
 800fd76:	429e      	cmp	r6, r3
 800fd78:	4682      	mov	sl, r0
 800fd7a:	460c      	mov	r4, r1
 800fd7c:	4690      	mov	r8, r2
 800fd7e:	461f      	mov	r7, r3
 800fd80:	d838      	bhi.n	800fdf4 <__ssputs_r+0x84>
 800fd82:	898a      	ldrh	r2, [r1, #12]
 800fd84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd88:	d032      	beq.n	800fdf0 <__ssputs_r+0x80>
 800fd8a:	6825      	ldr	r5, [r4, #0]
 800fd8c:	6909      	ldr	r1, [r1, #16]
 800fd8e:	eba5 0901 	sub.w	r9, r5, r1
 800fd92:	6965      	ldr	r5, [r4, #20]
 800fd94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	444b      	add	r3, r9
 800fda0:	106d      	asrs	r5, r5, #1
 800fda2:	429d      	cmp	r5, r3
 800fda4:	bf38      	it	cc
 800fda6:	461d      	movcc	r5, r3
 800fda8:	0553      	lsls	r3, r2, #21
 800fdaa:	d531      	bpl.n	800fe10 <__ssputs_r+0xa0>
 800fdac:	4629      	mov	r1, r5
 800fdae:	f7fd fc6f 	bl	800d690 <_malloc_r>
 800fdb2:	4606      	mov	r6, r0
 800fdb4:	b950      	cbnz	r0, 800fdcc <__ssputs_r+0x5c>
 800fdb6:	230c      	movs	r3, #12
 800fdb8:	f8ca 3000 	str.w	r3, [sl]
 800fdbc:	89a3      	ldrh	r3, [r4, #12]
 800fdbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdc2:	81a3      	strh	r3, [r4, #12]
 800fdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdcc:	6921      	ldr	r1, [r4, #16]
 800fdce:	464a      	mov	r2, r9
 800fdd0:	f7fd fc47 	bl	800d662 <memcpy>
 800fdd4:	89a3      	ldrh	r3, [r4, #12]
 800fdd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fdda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdde:	81a3      	strh	r3, [r4, #12]
 800fde0:	6126      	str	r6, [r4, #16]
 800fde2:	6165      	str	r5, [r4, #20]
 800fde4:	444e      	add	r6, r9
 800fde6:	eba5 0509 	sub.w	r5, r5, r9
 800fdea:	6026      	str	r6, [r4, #0]
 800fdec:	60a5      	str	r5, [r4, #8]
 800fdee:	463e      	mov	r6, r7
 800fdf0:	42be      	cmp	r6, r7
 800fdf2:	d900      	bls.n	800fdf6 <__ssputs_r+0x86>
 800fdf4:	463e      	mov	r6, r7
 800fdf6:	4632      	mov	r2, r6
 800fdf8:	6820      	ldr	r0, [r4, #0]
 800fdfa:	4641      	mov	r1, r8
 800fdfc:	f000 fabc 	bl	8010378 <memmove>
 800fe00:	68a3      	ldr	r3, [r4, #8]
 800fe02:	6822      	ldr	r2, [r4, #0]
 800fe04:	1b9b      	subs	r3, r3, r6
 800fe06:	4432      	add	r2, r6
 800fe08:	60a3      	str	r3, [r4, #8]
 800fe0a:	6022      	str	r2, [r4, #0]
 800fe0c:	2000      	movs	r0, #0
 800fe0e:	e7db      	b.n	800fdc8 <__ssputs_r+0x58>
 800fe10:	462a      	mov	r2, r5
 800fe12:	f000 facb 	bl	80103ac <_realloc_r>
 800fe16:	4606      	mov	r6, r0
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	d1e1      	bne.n	800fde0 <__ssputs_r+0x70>
 800fe1c:	6921      	ldr	r1, [r4, #16]
 800fe1e:	4650      	mov	r0, sl
 800fe20:	f7ff ff56 	bl	800fcd0 <_free_r>
 800fe24:	e7c7      	b.n	800fdb6 <__ssputs_r+0x46>
	...

0800fe28 <_svfiprintf_r>:
 800fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2c:	4698      	mov	r8, r3
 800fe2e:	898b      	ldrh	r3, [r1, #12]
 800fe30:	061b      	lsls	r3, r3, #24
 800fe32:	b09d      	sub	sp, #116	; 0x74
 800fe34:	4607      	mov	r7, r0
 800fe36:	460d      	mov	r5, r1
 800fe38:	4614      	mov	r4, r2
 800fe3a:	d50e      	bpl.n	800fe5a <_svfiprintf_r+0x32>
 800fe3c:	690b      	ldr	r3, [r1, #16]
 800fe3e:	b963      	cbnz	r3, 800fe5a <_svfiprintf_r+0x32>
 800fe40:	2140      	movs	r1, #64	; 0x40
 800fe42:	f7fd fc25 	bl	800d690 <_malloc_r>
 800fe46:	6028      	str	r0, [r5, #0]
 800fe48:	6128      	str	r0, [r5, #16]
 800fe4a:	b920      	cbnz	r0, 800fe56 <_svfiprintf_r+0x2e>
 800fe4c:	230c      	movs	r3, #12
 800fe4e:	603b      	str	r3, [r7, #0]
 800fe50:	f04f 30ff 	mov.w	r0, #4294967295
 800fe54:	e0d1      	b.n	800fffa <_svfiprintf_r+0x1d2>
 800fe56:	2340      	movs	r3, #64	; 0x40
 800fe58:	616b      	str	r3, [r5, #20]
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe5e:	2320      	movs	r3, #32
 800fe60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe64:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe68:	2330      	movs	r3, #48	; 0x30
 800fe6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010014 <_svfiprintf_r+0x1ec>
 800fe6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe72:	f04f 0901 	mov.w	r9, #1
 800fe76:	4623      	mov	r3, r4
 800fe78:	469a      	mov	sl, r3
 800fe7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe7e:	b10a      	cbz	r2, 800fe84 <_svfiprintf_r+0x5c>
 800fe80:	2a25      	cmp	r2, #37	; 0x25
 800fe82:	d1f9      	bne.n	800fe78 <_svfiprintf_r+0x50>
 800fe84:	ebba 0b04 	subs.w	fp, sl, r4
 800fe88:	d00b      	beq.n	800fea2 <_svfiprintf_r+0x7a>
 800fe8a:	465b      	mov	r3, fp
 800fe8c:	4622      	mov	r2, r4
 800fe8e:	4629      	mov	r1, r5
 800fe90:	4638      	mov	r0, r7
 800fe92:	f7ff ff6d 	bl	800fd70 <__ssputs_r>
 800fe96:	3001      	adds	r0, #1
 800fe98:	f000 80aa 	beq.w	800fff0 <_svfiprintf_r+0x1c8>
 800fe9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe9e:	445a      	add	r2, fp
 800fea0:	9209      	str	r2, [sp, #36]	; 0x24
 800fea2:	f89a 3000 	ldrb.w	r3, [sl]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	f000 80a2 	beq.w	800fff0 <_svfiprintf_r+0x1c8>
 800feac:	2300      	movs	r3, #0
 800feae:	f04f 32ff 	mov.w	r2, #4294967295
 800feb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800feb6:	f10a 0a01 	add.w	sl, sl, #1
 800feba:	9304      	str	r3, [sp, #16]
 800febc:	9307      	str	r3, [sp, #28]
 800febe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fec2:	931a      	str	r3, [sp, #104]	; 0x68
 800fec4:	4654      	mov	r4, sl
 800fec6:	2205      	movs	r2, #5
 800fec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fecc:	4851      	ldr	r0, [pc, #324]	; (8010014 <_svfiprintf_r+0x1ec>)
 800fece:	f7f0 f987 	bl	80001e0 <memchr>
 800fed2:	9a04      	ldr	r2, [sp, #16]
 800fed4:	b9d8      	cbnz	r0, 800ff0e <_svfiprintf_r+0xe6>
 800fed6:	06d0      	lsls	r0, r2, #27
 800fed8:	bf44      	itt	mi
 800feda:	2320      	movmi	r3, #32
 800fedc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fee0:	0711      	lsls	r1, r2, #28
 800fee2:	bf44      	itt	mi
 800fee4:	232b      	movmi	r3, #43	; 0x2b
 800fee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800feea:	f89a 3000 	ldrb.w	r3, [sl]
 800feee:	2b2a      	cmp	r3, #42	; 0x2a
 800fef0:	d015      	beq.n	800ff1e <_svfiprintf_r+0xf6>
 800fef2:	9a07      	ldr	r2, [sp, #28]
 800fef4:	4654      	mov	r4, sl
 800fef6:	2000      	movs	r0, #0
 800fef8:	f04f 0c0a 	mov.w	ip, #10
 800fefc:	4621      	mov	r1, r4
 800fefe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff02:	3b30      	subs	r3, #48	; 0x30
 800ff04:	2b09      	cmp	r3, #9
 800ff06:	d94e      	bls.n	800ffa6 <_svfiprintf_r+0x17e>
 800ff08:	b1b0      	cbz	r0, 800ff38 <_svfiprintf_r+0x110>
 800ff0a:	9207      	str	r2, [sp, #28]
 800ff0c:	e014      	b.n	800ff38 <_svfiprintf_r+0x110>
 800ff0e:	eba0 0308 	sub.w	r3, r0, r8
 800ff12:	fa09 f303 	lsl.w	r3, r9, r3
 800ff16:	4313      	orrs	r3, r2
 800ff18:	9304      	str	r3, [sp, #16]
 800ff1a:	46a2      	mov	sl, r4
 800ff1c:	e7d2      	b.n	800fec4 <_svfiprintf_r+0x9c>
 800ff1e:	9b03      	ldr	r3, [sp, #12]
 800ff20:	1d19      	adds	r1, r3, #4
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	9103      	str	r1, [sp, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	bfbb      	ittet	lt
 800ff2a:	425b      	neglt	r3, r3
 800ff2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff30:	9307      	strge	r3, [sp, #28]
 800ff32:	9307      	strlt	r3, [sp, #28]
 800ff34:	bfb8      	it	lt
 800ff36:	9204      	strlt	r2, [sp, #16]
 800ff38:	7823      	ldrb	r3, [r4, #0]
 800ff3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ff3c:	d10c      	bne.n	800ff58 <_svfiprintf_r+0x130>
 800ff3e:	7863      	ldrb	r3, [r4, #1]
 800ff40:	2b2a      	cmp	r3, #42	; 0x2a
 800ff42:	d135      	bne.n	800ffb0 <_svfiprintf_r+0x188>
 800ff44:	9b03      	ldr	r3, [sp, #12]
 800ff46:	1d1a      	adds	r2, r3, #4
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	9203      	str	r2, [sp, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	bfb8      	it	lt
 800ff50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff54:	3402      	adds	r4, #2
 800ff56:	9305      	str	r3, [sp, #20]
 800ff58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010024 <_svfiprintf_r+0x1fc>
 800ff5c:	7821      	ldrb	r1, [r4, #0]
 800ff5e:	2203      	movs	r2, #3
 800ff60:	4650      	mov	r0, sl
 800ff62:	f7f0 f93d 	bl	80001e0 <memchr>
 800ff66:	b140      	cbz	r0, 800ff7a <_svfiprintf_r+0x152>
 800ff68:	2340      	movs	r3, #64	; 0x40
 800ff6a:	eba0 000a 	sub.w	r0, r0, sl
 800ff6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ff72:	9b04      	ldr	r3, [sp, #16]
 800ff74:	4303      	orrs	r3, r0
 800ff76:	3401      	adds	r4, #1
 800ff78:	9304      	str	r3, [sp, #16]
 800ff7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff7e:	4826      	ldr	r0, [pc, #152]	; (8010018 <_svfiprintf_r+0x1f0>)
 800ff80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff84:	2206      	movs	r2, #6
 800ff86:	f7f0 f92b 	bl	80001e0 <memchr>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	d038      	beq.n	8010000 <_svfiprintf_r+0x1d8>
 800ff8e:	4b23      	ldr	r3, [pc, #140]	; (801001c <_svfiprintf_r+0x1f4>)
 800ff90:	bb1b      	cbnz	r3, 800ffda <_svfiprintf_r+0x1b2>
 800ff92:	9b03      	ldr	r3, [sp, #12]
 800ff94:	3307      	adds	r3, #7
 800ff96:	f023 0307 	bic.w	r3, r3, #7
 800ff9a:	3308      	adds	r3, #8
 800ff9c:	9303      	str	r3, [sp, #12]
 800ff9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa0:	4433      	add	r3, r6
 800ffa2:	9309      	str	r3, [sp, #36]	; 0x24
 800ffa4:	e767      	b.n	800fe76 <_svfiprintf_r+0x4e>
 800ffa6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffaa:	460c      	mov	r4, r1
 800ffac:	2001      	movs	r0, #1
 800ffae:	e7a5      	b.n	800fefc <_svfiprintf_r+0xd4>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	3401      	adds	r4, #1
 800ffb4:	9305      	str	r3, [sp, #20]
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	f04f 0c0a 	mov.w	ip, #10
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffc2:	3a30      	subs	r2, #48	; 0x30
 800ffc4:	2a09      	cmp	r2, #9
 800ffc6:	d903      	bls.n	800ffd0 <_svfiprintf_r+0x1a8>
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d0c5      	beq.n	800ff58 <_svfiprintf_r+0x130>
 800ffcc:	9105      	str	r1, [sp, #20]
 800ffce:	e7c3      	b.n	800ff58 <_svfiprintf_r+0x130>
 800ffd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e7f0      	b.n	800ffbc <_svfiprintf_r+0x194>
 800ffda:	ab03      	add	r3, sp, #12
 800ffdc:	9300      	str	r3, [sp, #0]
 800ffde:	462a      	mov	r2, r5
 800ffe0:	4b0f      	ldr	r3, [pc, #60]	; (8010020 <_svfiprintf_r+0x1f8>)
 800ffe2:	a904      	add	r1, sp, #16
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	f7fd fc4d 	bl	800d884 <_printf_float>
 800ffea:	1c42      	adds	r2, r0, #1
 800ffec:	4606      	mov	r6, r0
 800ffee:	d1d6      	bne.n	800ff9e <_svfiprintf_r+0x176>
 800fff0:	89ab      	ldrh	r3, [r5, #12]
 800fff2:	065b      	lsls	r3, r3, #25
 800fff4:	f53f af2c 	bmi.w	800fe50 <_svfiprintf_r+0x28>
 800fff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fffa:	b01d      	add	sp, #116	; 0x74
 800fffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010000:	ab03      	add	r3, sp, #12
 8010002:	9300      	str	r3, [sp, #0]
 8010004:	462a      	mov	r2, r5
 8010006:	4b06      	ldr	r3, [pc, #24]	; (8010020 <_svfiprintf_r+0x1f8>)
 8010008:	a904      	add	r1, sp, #16
 801000a:	4638      	mov	r0, r7
 801000c:	f7fd fede 	bl	800ddcc <_printf_i>
 8010010:	e7eb      	b.n	800ffea <_svfiprintf_r+0x1c2>
 8010012:	bf00      	nop
 8010014:	08011184 	.word	0x08011184
 8010018:	0801118e 	.word	0x0801118e
 801001c:	0800d885 	.word	0x0800d885
 8010020:	0800fd71 	.word	0x0800fd71
 8010024:	0801118a 	.word	0x0801118a

08010028 <__sfputc_r>:
 8010028:	6893      	ldr	r3, [r2, #8]
 801002a:	3b01      	subs	r3, #1
 801002c:	2b00      	cmp	r3, #0
 801002e:	b410      	push	{r4}
 8010030:	6093      	str	r3, [r2, #8]
 8010032:	da08      	bge.n	8010046 <__sfputc_r+0x1e>
 8010034:	6994      	ldr	r4, [r2, #24]
 8010036:	42a3      	cmp	r3, r4
 8010038:	db01      	blt.n	801003e <__sfputc_r+0x16>
 801003a:	290a      	cmp	r1, #10
 801003c:	d103      	bne.n	8010046 <__sfputc_r+0x1e>
 801003e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010042:	f7fe b9db 	b.w	800e3fc <__swbuf_r>
 8010046:	6813      	ldr	r3, [r2, #0]
 8010048:	1c58      	adds	r0, r3, #1
 801004a:	6010      	str	r0, [r2, #0]
 801004c:	7019      	strb	r1, [r3, #0]
 801004e:	4608      	mov	r0, r1
 8010050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010054:	4770      	bx	lr

08010056 <__sfputs_r>:
 8010056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010058:	4606      	mov	r6, r0
 801005a:	460f      	mov	r7, r1
 801005c:	4614      	mov	r4, r2
 801005e:	18d5      	adds	r5, r2, r3
 8010060:	42ac      	cmp	r4, r5
 8010062:	d101      	bne.n	8010068 <__sfputs_r+0x12>
 8010064:	2000      	movs	r0, #0
 8010066:	e007      	b.n	8010078 <__sfputs_r+0x22>
 8010068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801006c:	463a      	mov	r2, r7
 801006e:	4630      	mov	r0, r6
 8010070:	f7ff ffda 	bl	8010028 <__sfputc_r>
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	d1f3      	bne.n	8010060 <__sfputs_r+0xa>
 8010078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801007c <_vfiprintf_r>:
 801007c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010080:	460d      	mov	r5, r1
 8010082:	b09d      	sub	sp, #116	; 0x74
 8010084:	4614      	mov	r4, r2
 8010086:	4698      	mov	r8, r3
 8010088:	4606      	mov	r6, r0
 801008a:	b118      	cbz	r0, 8010094 <_vfiprintf_r+0x18>
 801008c:	6983      	ldr	r3, [r0, #24]
 801008e:	b90b      	cbnz	r3, 8010094 <_vfiprintf_r+0x18>
 8010090:	f7fd fa22 	bl	800d4d8 <__sinit>
 8010094:	4b89      	ldr	r3, [pc, #548]	; (80102bc <_vfiprintf_r+0x240>)
 8010096:	429d      	cmp	r5, r3
 8010098:	d11b      	bne.n	80100d2 <_vfiprintf_r+0x56>
 801009a:	6875      	ldr	r5, [r6, #4]
 801009c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801009e:	07d9      	lsls	r1, r3, #31
 80100a0:	d405      	bmi.n	80100ae <_vfiprintf_r+0x32>
 80100a2:	89ab      	ldrh	r3, [r5, #12]
 80100a4:	059a      	lsls	r2, r3, #22
 80100a6:	d402      	bmi.n	80100ae <_vfiprintf_r+0x32>
 80100a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100aa:	f7fd fad8 	bl	800d65e <__retarget_lock_acquire_recursive>
 80100ae:	89ab      	ldrh	r3, [r5, #12]
 80100b0:	071b      	lsls	r3, r3, #28
 80100b2:	d501      	bpl.n	80100b8 <_vfiprintf_r+0x3c>
 80100b4:	692b      	ldr	r3, [r5, #16]
 80100b6:	b9eb      	cbnz	r3, 80100f4 <_vfiprintf_r+0x78>
 80100b8:	4629      	mov	r1, r5
 80100ba:	4630      	mov	r0, r6
 80100bc:	f7fe fa02 	bl	800e4c4 <__swsetup_r>
 80100c0:	b1c0      	cbz	r0, 80100f4 <_vfiprintf_r+0x78>
 80100c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100c4:	07dc      	lsls	r4, r3, #31
 80100c6:	d50e      	bpl.n	80100e6 <_vfiprintf_r+0x6a>
 80100c8:	f04f 30ff 	mov.w	r0, #4294967295
 80100cc:	b01d      	add	sp, #116	; 0x74
 80100ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d2:	4b7b      	ldr	r3, [pc, #492]	; (80102c0 <_vfiprintf_r+0x244>)
 80100d4:	429d      	cmp	r5, r3
 80100d6:	d101      	bne.n	80100dc <_vfiprintf_r+0x60>
 80100d8:	68b5      	ldr	r5, [r6, #8]
 80100da:	e7df      	b.n	801009c <_vfiprintf_r+0x20>
 80100dc:	4b79      	ldr	r3, [pc, #484]	; (80102c4 <_vfiprintf_r+0x248>)
 80100de:	429d      	cmp	r5, r3
 80100e0:	bf08      	it	eq
 80100e2:	68f5      	ldreq	r5, [r6, #12]
 80100e4:	e7da      	b.n	801009c <_vfiprintf_r+0x20>
 80100e6:	89ab      	ldrh	r3, [r5, #12]
 80100e8:	0598      	lsls	r0, r3, #22
 80100ea:	d4ed      	bmi.n	80100c8 <_vfiprintf_r+0x4c>
 80100ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100ee:	f7fd fab7 	bl	800d660 <__retarget_lock_release_recursive>
 80100f2:	e7e9      	b.n	80100c8 <_vfiprintf_r+0x4c>
 80100f4:	2300      	movs	r3, #0
 80100f6:	9309      	str	r3, [sp, #36]	; 0x24
 80100f8:	2320      	movs	r3, #32
 80100fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010102:	2330      	movs	r3, #48	; 0x30
 8010104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102c8 <_vfiprintf_r+0x24c>
 8010108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801010c:	f04f 0901 	mov.w	r9, #1
 8010110:	4623      	mov	r3, r4
 8010112:	469a      	mov	sl, r3
 8010114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010118:	b10a      	cbz	r2, 801011e <_vfiprintf_r+0xa2>
 801011a:	2a25      	cmp	r2, #37	; 0x25
 801011c:	d1f9      	bne.n	8010112 <_vfiprintf_r+0x96>
 801011e:	ebba 0b04 	subs.w	fp, sl, r4
 8010122:	d00b      	beq.n	801013c <_vfiprintf_r+0xc0>
 8010124:	465b      	mov	r3, fp
 8010126:	4622      	mov	r2, r4
 8010128:	4629      	mov	r1, r5
 801012a:	4630      	mov	r0, r6
 801012c:	f7ff ff93 	bl	8010056 <__sfputs_r>
 8010130:	3001      	adds	r0, #1
 8010132:	f000 80aa 	beq.w	801028a <_vfiprintf_r+0x20e>
 8010136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010138:	445a      	add	r2, fp
 801013a:	9209      	str	r2, [sp, #36]	; 0x24
 801013c:	f89a 3000 	ldrb.w	r3, [sl]
 8010140:	2b00      	cmp	r3, #0
 8010142:	f000 80a2 	beq.w	801028a <_vfiprintf_r+0x20e>
 8010146:	2300      	movs	r3, #0
 8010148:	f04f 32ff 	mov.w	r2, #4294967295
 801014c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010150:	f10a 0a01 	add.w	sl, sl, #1
 8010154:	9304      	str	r3, [sp, #16]
 8010156:	9307      	str	r3, [sp, #28]
 8010158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801015c:	931a      	str	r3, [sp, #104]	; 0x68
 801015e:	4654      	mov	r4, sl
 8010160:	2205      	movs	r2, #5
 8010162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010166:	4858      	ldr	r0, [pc, #352]	; (80102c8 <_vfiprintf_r+0x24c>)
 8010168:	f7f0 f83a 	bl	80001e0 <memchr>
 801016c:	9a04      	ldr	r2, [sp, #16]
 801016e:	b9d8      	cbnz	r0, 80101a8 <_vfiprintf_r+0x12c>
 8010170:	06d1      	lsls	r1, r2, #27
 8010172:	bf44      	itt	mi
 8010174:	2320      	movmi	r3, #32
 8010176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801017a:	0713      	lsls	r3, r2, #28
 801017c:	bf44      	itt	mi
 801017e:	232b      	movmi	r3, #43	; 0x2b
 8010180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010184:	f89a 3000 	ldrb.w	r3, [sl]
 8010188:	2b2a      	cmp	r3, #42	; 0x2a
 801018a:	d015      	beq.n	80101b8 <_vfiprintf_r+0x13c>
 801018c:	9a07      	ldr	r2, [sp, #28]
 801018e:	4654      	mov	r4, sl
 8010190:	2000      	movs	r0, #0
 8010192:	f04f 0c0a 	mov.w	ip, #10
 8010196:	4621      	mov	r1, r4
 8010198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801019c:	3b30      	subs	r3, #48	; 0x30
 801019e:	2b09      	cmp	r3, #9
 80101a0:	d94e      	bls.n	8010240 <_vfiprintf_r+0x1c4>
 80101a2:	b1b0      	cbz	r0, 80101d2 <_vfiprintf_r+0x156>
 80101a4:	9207      	str	r2, [sp, #28]
 80101a6:	e014      	b.n	80101d2 <_vfiprintf_r+0x156>
 80101a8:	eba0 0308 	sub.w	r3, r0, r8
 80101ac:	fa09 f303 	lsl.w	r3, r9, r3
 80101b0:	4313      	orrs	r3, r2
 80101b2:	9304      	str	r3, [sp, #16]
 80101b4:	46a2      	mov	sl, r4
 80101b6:	e7d2      	b.n	801015e <_vfiprintf_r+0xe2>
 80101b8:	9b03      	ldr	r3, [sp, #12]
 80101ba:	1d19      	adds	r1, r3, #4
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	9103      	str	r1, [sp, #12]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	bfbb      	ittet	lt
 80101c4:	425b      	neglt	r3, r3
 80101c6:	f042 0202 	orrlt.w	r2, r2, #2
 80101ca:	9307      	strge	r3, [sp, #28]
 80101cc:	9307      	strlt	r3, [sp, #28]
 80101ce:	bfb8      	it	lt
 80101d0:	9204      	strlt	r2, [sp, #16]
 80101d2:	7823      	ldrb	r3, [r4, #0]
 80101d4:	2b2e      	cmp	r3, #46	; 0x2e
 80101d6:	d10c      	bne.n	80101f2 <_vfiprintf_r+0x176>
 80101d8:	7863      	ldrb	r3, [r4, #1]
 80101da:	2b2a      	cmp	r3, #42	; 0x2a
 80101dc:	d135      	bne.n	801024a <_vfiprintf_r+0x1ce>
 80101de:	9b03      	ldr	r3, [sp, #12]
 80101e0:	1d1a      	adds	r2, r3, #4
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	9203      	str	r2, [sp, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	bfb8      	it	lt
 80101ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80101ee:	3402      	adds	r4, #2
 80101f0:	9305      	str	r3, [sp, #20]
 80101f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102d8 <_vfiprintf_r+0x25c>
 80101f6:	7821      	ldrb	r1, [r4, #0]
 80101f8:	2203      	movs	r2, #3
 80101fa:	4650      	mov	r0, sl
 80101fc:	f7ef fff0 	bl	80001e0 <memchr>
 8010200:	b140      	cbz	r0, 8010214 <_vfiprintf_r+0x198>
 8010202:	2340      	movs	r3, #64	; 0x40
 8010204:	eba0 000a 	sub.w	r0, r0, sl
 8010208:	fa03 f000 	lsl.w	r0, r3, r0
 801020c:	9b04      	ldr	r3, [sp, #16]
 801020e:	4303      	orrs	r3, r0
 8010210:	3401      	adds	r4, #1
 8010212:	9304      	str	r3, [sp, #16]
 8010214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010218:	482c      	ldr	r0, [pc, #176]	; (80102cc <_vfiprintf_r+0x250>)
 801021a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801021e:	2206      	movs	r2, #6
 8010220:	f7ef ffde 	bl	80001e0 <memchr>
 8010224:	2800      	cmp	r0, #0
 8010226:	d03f      	beq.n	80102a8 <_vfiprintf_r+0x22c>
 8010228:	4b29      	ldr	r3, [pc, #164]	; (80102d0 <_vfiprintf_r+0x254>)
 801022a:	bb1b      	cbnz	r3, 8010274 <_vfiprintf_r+0x1f8>
 801022c:	9b03      	ldr	r3, [sp, #12]
 801022e:	3307      	adds	r3, #7
 8010230:	f023 0307 	bic.w	r3, r3, #7
 8010234:	3308      	adds	r3, #8
 8010236:	9303      	str	r3, [sp, #12]
 8010238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801023a:	443b      	add	r3, r7
 801023c:	9309      	str	r3, [sp, #36]	; 0x24
 801023e:	e767      	b.n	8010110 <_vfiprintf_r+0x94>
 8010240:	fb0c 3202 	mla	r2, ip, r2, r3
 8010244:	460c      	mov	r4, r1
 8010246:	2001      	movs	r0, #1
 8010248:	e7a5      	b.n	8010196 <_vfiprintf_r+0x11a>
 801024a:	2300      	movs	r3, #0
 801024c:	3401      	adds	r4, #1
 801024e:	9305      	str	r3, [sp, #20]
 8010250:	4619      	mov	r1, r3
 8010252:	f04f 0c0a 	mov.w	ip, #10
 8010256:	4620      	mov	r0, r4
 8010258:	f810 2b01 	ldrb.w	r2, [r0], #1
 801025c:	3a30      	subs	r2, #48	; 0x30
 801025e:	2a09      	cmp	r2, #9
 8010260:	d903      	bls.n	801026a <_vfiprintf_r+0x1ee>
 8010262:	2b00      	cmp	r3, #0
 8010264:	d0c5      	beq.n	80101f2 <_vfiprintf_r+0x176>
 8010266:	9105      	str	r1, [sp, #20]
 8010268:	e7c3      	b.n	80101f2 <_vfiprintf_r+0x176>
 801026a:	fb0c 2101 	mla	r1, ip, r1, r2
 801026e:	4604      	mov	r4, r0
 8010270:	2301      	movs	r3, #1
 8010272:	e7f0      	b.n	8010256 <_vfiprintf_r+0x1da>
 8010274:	ab03      	add	r3, sp, #12
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	462a      	mov	r2, r5
 801027a:	4b16      	ldr	r3, [pc, #88]	; (80102d4 <_vfiprintf_r+0x258>)
 801027c:	a904      	add	r1, sp, #16
 801027e:	4630      	mov	r0, r6
 8010280:	f7fd fb00 	bl	800d884 <_printf_float>
 8010284:	4607      	mov	r7, r0
 8010286:	1c78      	adds	r0, r7, #1
 8010288:	d1d6      	bne.n	8010238 <_vfiprintf_r+0x1bc>
 801028a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801028c:	07d9      	lsls	r1, r3, #31
 801028e:	d405      	bmi.n	801029c <_vfiprintf_r+0x220>
 8010290:	89ab      	ldrh	r3, [r5, #12]
 8010292:	059a      	lsls	r2, r3, #22
 8010294:	d402      	bmi.n	801029c <_vfiprintf_r+0x220>
 8010296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010298:	f7fd f9e2 	bl	800d660 <__retarget_lock_release_recursive>
 801029c:	89ab      	ldrh	r3, [r5, #12]
 801029e:	065b      	lsls	r3, r3, #25
 80102a0:	f53f af12 	bmi.w	80100c8 <_vfiprintf_r+0x4c>
 80102a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102a6:	e711      	b.n	80100cc <_vfiprintf_r+0x50>
 80102a8:	ab03      	add	r3, sp, #12
 80102aa:	9300      	str	r3, [sp, #0]
 80102ac:	462a      	mov	r2, r5
 80102ae:	4b09      	ldr	r3, [pc, #36]	; (80102d4 <_vfiprintf_r+0x258>)
 80102b0:	a904      	add	r1, sp, #16
 80102b2:	4630      	mov	r0, r6
 80102b4:	f7fd fd8a 	bl	800ddcc <_printf_i>
 80102b8:	e7e4      	b.n	8010284 <_vfiprintf_r+0x208>
 80102ba:	bf00      	nop
 80102bc:	08010e7c 	.word	0x08010e7c
 80102c0:	08010e9c 	.word	0x08010e9c
 80102c4:	08010e5c 	.word	0x08010e5c
 80102c8:	08011184 	.word	0x08011184
 80102cc:	0801118e 	.word	0x0801118e
 80102d0:	0800d885 	.word	0x0800d885
 80102d4:	08010057 	.word	0x08010057
 80102d8:	0801118a 	.word	0x0801118a

080102dc <_read_r>:
 80102dc:	b538      	push	{r3, r4, r5, lr}
 80102de:	4d07      	ldr	r5, [pc, #28]	; (80102fc <_read_r+0x20>)
 80102e0:	4604      	mov	r4, r0
 80102e2:	4608      	mov	r0, r1
 80102e4:	4611      	mov	r1, r2
 80102e6:	2200      	movs	r2, #0
 80102e8:	602a      	str	r2, [r5, #0]
 80102ea:	461a      	mov	r2, r3
 80102ec:	f7f3 fcb5 	bl	8003c5a <_read>
 80102f0:	1c43      	adds	r3, r0, #1
 80102f2:	d102      	bne.n	80102fa <_read_r+0x1e>
 80102f4:	682b      	ldr	r3, [r5, #0]
 80102f6:	b103      	cbz	r3, 80102fa <_read_r+0x1e>
 80102f8:	6023      	str	r3, [r4, #0]
 80102fa:	bd38      	pop	{r3, r4, r5, pc}
 80102fc:	20003510 	.word	0x20003510

08010300 <abort>:
 8010300:	b508      	push	{r3, lr}
 8010302:	2006      	movs	r0, #6
 8010304:	f000 f8a0 	bl	8010448 <raise>
 8010308:	2001      	movs	r0, #1
 801030a:	f7f3 fc9c 	bl	8003c46 <_exit>
	...

08010310 <_fstat_r>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	4d07      	ldr	r5, [pc, #28]	; (8010330 <_fstat_r+0x20>)
 8010314:	2300      	movs	r3, #0
 8010316:	4604      	mov	r4, r0
 8010318:	4608      	mov	r0, r1
 801031a:	4611      	mov	r1, r2
 801031c:	602b      	str	r3, [r5, #0]
 801031e:	f7f3 fce1 	bl	8003ce4 <_fstat>
 8010322:	1c43      	adds	r3, r0, #1
 8010324:	d102      	bne.n	801032c <_fstat_r+0x1c>
 8010326:	682b      	ldr	r3, [r5, #0]
 8010328:	b103      	cbz	r3, 801032c <_fstat_r+0x1c>
 801032a:	6023      	str	r3, [r4, #0]
 801032c:	bd38      	pop	{r3, r4, r5, pc}
 801032e:	bf00      	nop
 8010330:	20003510 	.word	0x20003510

08010334 <_isatty_r>:
 8010334:	b538      	push	{r3, r4, r5, lr}
 8010336:	4d06      	ldr	r5, [pc, #24]	; (8010350 <_isatty_r+0x1c>)
 8010338:	2300      	movs	r3, #0
 801033a:	4604      	mov	r4, r0
 801033c:	4608      	mov	r0, r1
 801033e:	602b      	str	r3, [r5, #0]
 8010340:	f7f3 fce0 	bl	8003d04 <_isatty>
 8010344:	1c43      	adds	r3, r0, #1
 8010346:	d102      	bne.n	801034e <_isatty_r+0x1a>
 8010348:	682b      	ldr	r3, [r5, #0]
 801034a:	b103      	cbz	r3, 801034e <_isatty_r+0x1a>
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	bd38      	pop	{r3, r4, r5, pc}
 8010350:	20003510 	.word	0x20003510

08010354 <__ascii_mbtowc>:
 8010354:	b082      	sub	sp, #8
 8010356:	b901      	cbnz	r1, 801035a <__ascii_mbtowc+0x6>
 8010358:	a901      	add	r1, sp, #4
 801035a:	b142      	cbz	r2, 801036e <__ascii_mbtowc+0x1a>
 801035c:	b14b      	cbz	r3, 8010372 <__ascii_mbtowc+0x1e>
 801035e:	7813      	ldrb	r3, [r2, #0]
 8010360:	600b      	str	r3, [r1, #0]
 8010362:	7812      	ldrb	r2, [r2, #0]
 8010364:	1e10      	subs	r0, r2, #0
 8010366:	bf18      	it	ne
 8010368:	2001      	movne	r0, #1
 801036a:	b002      	add	sp, #8
 801036c:	4770      	bx	lr
 801036e:	4610      	mov	r0, r2
 8010370:	e7fb      	b.n	801036a <__ascii_mbtowc+0x16>
 8010372:	f06f 0001 	mvn.w	r0, #1
 8010376:	e7f8      	b.n	801036a <__ascii_mbtowc+0x16>

08010378 <memmove>:
 8010378:	4288      	cmp	r0, r1
 801037a:	b510      	push	{r4, lr}
 801037c:	eb01 0402 	add.w	r4, r1, r2
 8010380:	d902      	bls.n	8010388 <memmove+0x10>
 8010382:	4284      	cmp	r4, r0
 8010384:	4623      	mov	r3, r4
 8010386:	d807      	bhi.n	8010398 <memmove+0x20>
 8010388:	1e43      	subs	r3, r0, #1
 801038a:	42a1      	cmp	r1, r4
 801038c:	d008      	beq.n	80103a0 <memmove+0x28>
 801038e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010396:	e7f8      	b.n	801038a <memmove+0x12>
 8010398:	4402      	add	r2, r0
 801039a:	4601      	mov	r1, r0
 801039c:	428a      	cmp	r2, r1
 801039e:	d100      	bne.n	80103a2 <memmove+0x2a>
 80103a0:	bd10      	pop	{r4, pc}
 80103a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103aa:	e7f7      	b.n	801039c <memmove+0x24>

080103ac <_realloc_r>:
 80103ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ae:	4607      	mov	r7, r0
 80103b0:	4614      	mov	r4, r2
 80103b2:	460e      	mov	r6, r1
 80103b4:	b921      	cbnz	r1, 80103c0 <_realloc_r+0x14>
 80103b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80103ba:	4611      	mov	r1, r2
 80103bc:	f7fd b968 	b.w	800d690 <_malloc_r>
 80103c0:	b922      	cbnz	r2, 80103cc <_realloc_r+0x20>
 80103c2:	f7ff fc85 	bl	800fcd0 <_free_r>
 80103c6:	4625      	mov	r5, r4
 80103c8:	4628      	mov	r0, r5
 80103ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103cc:	f000 f865 	bl	801049a <_malloc_usable_size_r>
 80103d0:	42a0      	cmp	r0, r4
 80103d2:	d20f      	bcs.n	80103f4 <_realloc_r+0x48>
 80103d4:	4621      	mov	r1, r4
 80103d6:	4638      	mov	r0, r7
 80103d8:	f7fd f95a 	bl	800d690 <_malloc_r>
 80103dc:	4605      	mov	r5, r0
 80103de:	2800      	cmp	r0, #0
 80103e0:	d0f2      	beq.n	80103c8 <_realloc_r+0x1c>
 80103e2:	4631      	mov	r1, r6
 80103e4:	4622      	mov	r2, r4
 80103e6:	f7fd f93c 	bl	800d662 <memcpy>
 80103ea:	4631      	mov	r1, r6
 80103ec:	4638      	mov	r0, r7
 80103ee:	f7ff fc6f 	bl	800fcd0 <_free_r>
 80103f2:	e7e9      	b.n	80103c8 <_realloc_r+0x1c>
 80103f4:	4635      	mov	r5, r6
 80103f6:	e7e7      	b.n	80103c8 <_realloc_r+0x1c>

080103f8 <_raise_r>:
 80103f8:	291f      	cmp	r1, #31
 80103fa:	b538      	push	{r3, r4, r5, lr}
 80103fc:	4604      	mov	r4, r0
 80103fe:	460d      	mov	r5, r1
 8010400:	d904      	bls.n	801040c <_raise_r+0x14>
 8010402:	2316      	movs	r3, #22
 8010404:	6003      	str	r3, [r0, #0]
 8010406:	f04f 30ff 	mov.w	r0, #4294967295
 801040a:	bd38      	pop	{r3, r4, r5, pc}
 801040c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801040e:	b112      	cbz	r2, 8010416 <_raise_r+0x1e>
 8010410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010414:	b94b      	cbnz	r3, 801042a <_raise_r+0x32>
 8010416:	4620      	mov	r0, r4
 8010418:	f000 f830 	bl	801047c <_getpid_r>
 801041c:	462a      	mov	r2, r5
 801041e:	4601      	mov	r1, r0
 8010420:	4620      	mov	r0, r4
 8010422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010426:	f000 b817 	b.w	8010458 <_kill_r>
 801042a:	2b01      	cmp	r3, #1
 801042c:	d00a      	beq.n	8010444 <_raise_r+0x4c>
 801042e:	1c59      	adds	r1, r3, #1
 8010430:	d103      	bne.n	801043a <_raise_r+0x42>
 8010432:	2316      	movs	r3, #22
 8010434:	6003      	str	r3, [r0, #0]
 8010436:	2001      	movs	r0, #1
 8010438:	e7e7      	b.n	801040a <_raise_r+0x12>
 801043a:	2400      	movs	r4, #0
 801043c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010440:	4628      	mov	r0, r5
 8010442:	4798      	blx	r3
 8010444:	2000      	movs	r0, #0
 8010446:	e7e0      	b.n	801040a <_raise_r+0x12>

08010448 <raise>:
 8010448:	4b02      	ldr	r3, [pc, #8]	; (8010454 <raise+0xc>)
 801044a:	4601      	mov	r1, r0
 801044c:	6818      	ldr	r0, [r3, #0]
 801044e:	f7ff bfd3 	b.w	80103f8 <_raise_r>
 8010452:	bf00      	nop
 8010454:	200000e4 	.word	0x200000e4

08010458 <_kill_r>:
 8010458:	b538      	push	{r3, r4, r5, lr}
 801045a:	4d07      	ldr	r5, [pc, #28]	; (8010478 <_kill_r+0x20>)
 801045c:	2300      	movs	r3, #0
 801045e:	4604      	mov	r4, r0
 8010460:	4608      	mov	r0, r1
 8010462:	4611      	mov	r1, r2
 8010464:	602b      	str	r3, [r5, #0]
 8010466:	f7f3 fbde 	bl	8003c26 <_kill>
 801046a:	1c43      	adds	r3, r0, #1
 801046c:	d102      	bne.n	8010474 <_kill_r+0x1c>
 801046e:	682b      	ldr	r3, [r5, #0]
 8010470:	b103      	cbz	r3, 8010474 <_kill_r+0x1c>
 8010472:	6023      	str	r3, [r4, #0]
 8010474:	bd38      	pop	{r3, r4, r5, pc}
 8010476:	bf00      	nop
 8010478:	20003510 	.word	0x20003510

0801047c <_getpid_r>:
 801047c:	f7f3 bbcb 	b.w	8003c16 <_getpid>

08010480 <__ascii_wctomb>:
 8010480:	b149      	cbz	r1, 8010496 <__ascii_wctomb+0x16>
 8010482:	2aff      	cmp	r2, #255	; 0xff
 8010484:	bf85      	ittet	hi
 8010486:	238a      	movhi	r3, #138	; 0x8a
 8010488:	6003      	strhi	r3, [r0, #0]
 801048a:	700a      	strbls	r2, [r1, #0]
 801048c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010490:	bf98      	it	ls
 8010492:	2001      	movls	r0, #1
 8010494:	4770      	bx	lr
 8010496:	4608      	mov	r0, r1
 8010498:	4770      	bx	lr

0801049a <_malloc_usable_size_r>:
 801049a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801049e:	1f18      	subs	r0, r3, #4
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	bfbc      	itt	lt
 80104a4:	580b      	ldrlt	r3, [r1, r0]
 80104a6:	18c0      	addlt	r0, r0, r3
 80104a8:	4770      	bx	lr
	...

080104ac <_init>:
 80104ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ae:	bf00      	nop
 80104b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104b2:	bc08      	pop	{r3}
 80104b4:	469e      	mov	lr, r3
 80104b6:	4770      	bx	lr

080104b8 <_fini>:
 80104b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ba:	bf00      	nop
 80104bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104be:	bc08      	pop	{r3}
 80104c0:	469e      	mov	lr, r3
 80104c2:	4770      	bx	lr
